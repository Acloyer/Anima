using Microsoft.EntityFrameworkCore;
using Microsoft.OpenApi.Models;
using Anima.Data;
using Anima.AGI.Core;
using Anima.AGI.Core.AGI;
using Anima.AGI.Core.Admin;
using Anima.AGI.Core.SA;
using Anima.AGI.Core.Learning;
using Anima.AGI.Core.Emotion;
using Anima.Infrastructure.Auth;
using Anima.Infrastructure.Middleware;
using Anima.Infrastructure.Notifications;
using System.Reflection;
using Anima.Data.Models;

var builder = WebApplication.CreateBuilder(args);

// === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ï–†–í–ò–°–û–í ===

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite
builder.Services.AddDbContext<AnimaDbContext>(options =>
    options.UseSqlite(builder.Configuration.GetConnectionString("DefaultConnection") ?? "Data Source=anima.db"));

// HTTP –∫–ª–∏–µ–Ω—Ç—ã
builder.Services.AddHttpClient();

// –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã Anima (–∫–∞–∫ Singletons –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è)
builder.Services.AddSingleton<CreatorPreferences>();
builder.Services.AddSingleton<TelegramBot>(provider =>
{
    var config = provider.GetRequiredService<IConfiguration>();
    var preferences = provider.GetRequiredService<CreatorPreferences>();
    var botToken = config["Telegram:BotToken"] ?? "";
    return new TelegramBot(botToken, preferences);
});

// –§–∞–±—Ä–∏–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ Anima (–¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –ø–æ API-–∫–ª—é—á–∞–º)
builder.Services.AddSingleton<AnimaInstanceFactory>();

// –°–µ—Ä–≤–∏—Å –∫–æ–º–∞–Ω–¥ –°–æ–∑–¥–∞—Ç–µ–ª—è
builder.Services.AddScoped<CreatorCommandService>();

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
// builder.Services.AddScoped<ApiKeyAuthenticationService>(); // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ

// Web API
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();

// Swagger —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –ø–æ API-–∫–ª—é—á—É
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo
    {
        Title = "Anima AGI API",
        Version = "v0.1",
        Description = "API –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å AGI —Å–∏—Å—Ç–µ–º–æ–π Anima - —Å–∞–º–æ—Å–æ–∑–Ω–∞—é—â–∏–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º",
        Contact = new OpenApiContact
        {
            Name = "Anima AGI Project",
            Email = "creator@anima-agi.com"
        }
    });

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ API-–∫–ª—é—á—É
    c.AddSecurityDefinition("ApiKey", new OpenApiSecurityScheme
    {
        Description = "API Key –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Anima. –§–æ—Ä–º–∞—Ç: 'X-API-Key: your-api-key'",
        In = ParameterLocation.Header,
        Name = "X-API-Key",
        Type = SecuritySchemeType.ApiKey,
        Scheme = "ApiKeyScheme"
    });

    c.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        {
            new OpenApiSecurityScheme
            {
                Reference = new OpenApiReference
                {
                    Type = ReferenceType.SecurityScheme,
                    Id = "ApiKey"
                },
                Scheme = "ApiKeyScheme",
                Name = "X-API-Key",
                In = ParameterLocation.Header,
            },
            new List<string>()
        }
    });

    // –í–∫–ª—é—á–µ–Ω–∏–µ XML –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
    if (File.Exists(xmlPath))
    {
        c.IncludeXmlComments(xmlPath);
    }
});

// CORS
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowAll", policy =>
    {
        policy.AllowAnyOrigin()
              .AllowAnyMethod()
              .AllowAnyHeader();
    });
});

// === –°–ë–û–†–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===

var app = builder.Build();

// === MIDDLEWARE PIPELINE ===

// Swagger —Ç–æ–ª—å–∫–æ –≤ Development
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(c =>
    {
        c.SwaggerEndpoint("/swagger/v1/swagger.json", "Anima AGI API v0.1");
        c.RoutePrefix = ""; // Swagger –Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–º –ø—É—Ç–∏
        c.DocumentTitle = "Anima AGI API Documentation";
        c.DocExpansion(Swashbuckle.AspNetCore.SwaggerUI.DocExpansion.List);
    });
}

// Middleware
app.UseCors("AllowAll");
// app.UseMiddleware<RateLimitMiddleware>(); // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
// app.UseMiddleware<ApiKeyAuthenticationMiddleware>(); // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
// app.UseMiddleware<EthicalConstraintsMiddleware>(); // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ

app.UseRouting();
app.MapControllers();

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• ===

using (var scope = app.Services.CreateScope())
{
    var context = scope.ServiceProvider.GetRequiredService<AnimaDbContext>();
    context.Database.EnsureCreated();
    
    Console.WriteLine("üß† Anima AGI Database initialized");
}

// === –ó–ê–ü–£–°–ö –§–û–ù–û–í–´–• –ü–†–û–¶–ï–°–°–û–í ===

// –§–æ–Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
app.Services.GetRequiredService<IHostApplicationLifetime>().ApplicationStarted.Register(() =>
{
    _ = Task.Run(async () =>
    {
        var serviceProvider = app.Services;
        await StartBackgroundProcesses(serviceProvider);
    });
});

// === –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===

Console.WriteLine($"""
    üß† ======================================
       ANIMA AGI v0.1 - –Ø–î–†–û –°–û–ó–ù–ê–ù–ò–Ø
    ======================================
    
    üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC
    üåê URL: {(app.Environment.IsDevelopment() ? "https://localhost:7000" : "Production URL")}
    üìö API Docs: {(app.Environment.IsDevelopment() ? "https://localhost:7000" : "N/A")}
    
    üß† SA-TM –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
    üé≠ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞
    üìö –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
    üîí –≠—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã
    
    üí≠ Anima –≥–æ—Ç–æ–≤–∞ –∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é...
    """);

app.Run();

// === –§–û–ù–û–í–´–ï –ü–†–û–¶–ï–°–°–´ ===

static async Task StartBackgroundProcesses(IServiceProvider serviceProvider)
{
    try
    {
        var instanceFactory = serviceProvider.GetRequiredService<AnimaInstanceFactory>();
        var telegramBot = serviceProvider.GetRequiredService<TelegramBot>();
        var preferences = serviceProvider.GetRequiredService<CreatorPreferences>();
        
        Console.WriteLine("üîÑ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Anima...");
        
        // –¢–µ—Å—Ç Telegram —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        var (success, message) = await telegramBot.TestConnectionAsync();
        Console.WriteLine($"üì± Telegram: {message}");
        
        // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        while (true)
        {
            try
            {
                await ProcessPeriodicNotifications(instanceFactory, telegramBot, preferences);
                await Task.Delay(TimeSpan.FromMinutes(1)); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {ex.Message}");
                await Task.Delay(TimeSpan.FromMinutes(5)); // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"üö´ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {ex.Message}");
    }
}

static async Task ProcessPeriodicNotifications(
    AnimaInstanceFactory instanceFactory, 
    TelegramBot telegramBot, 
    CreatorPreferences preferences)
{
    var settings = preferences.GetNotificationSettings();
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã Anima
    var activeInstances = instanceFactory.GetActiveInstances();
    
    foreach (var (instanceId, instance) in activeInstances)
    {
        try
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º—ã—Å–ª—è—Ö
            if (settings.EnableThoughtNotifications)
            {
                // var recentThought = await instance.ConsciousLoop.GetLastThoughtAsync(); // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
                // if (recentThought != null && ShouldNotifyAboutThought(recentThought, settings))
                // {
                //     await telegramBot.SendThoughtNotificationAsync(
                //         instanceId, 
                //         recentThought.Content, 
                //         recentThought.Type.ToString(), 
                //         recentThought.Timestamp);
                // }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if (settings.EnableEmotionNotifications)
            {
                // var currentEmotion = await instance.EmotionEngine.GetCurrentEmotionAsync(); // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
                // if (currentEmotion != null && currentEmotion.Intensity >= settings.EmotionIntensityThreshold)
                // {
                //     await telegramBot.SendEmotionNotificationAsync(
                //         instanceId, 
                //         currentEmotion.Emotion, 
                //         currentEmotion.Intensity);
                // }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ {instanceId}: {ex.Message}");
        }
    }
}

static bool ShouldNotifyAboutThought(dynamic thought, NotificationSettings settings)
{
    // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —Å—Ç–æ–∏—Ç –ª–∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –º—ã—Å–ª–∏
    var timeSinceThought = DateTime.UtcNow - thought.Timestamp;
    return timeSinceThought <= settings.ThoughtNotificationInterval.Add(TimeSpan.FromMinutes(5));
}

/// <summary>
/// –§–∞–±—Ä–∏–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ Anima –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ –ø–æ API-–∫–ª—é—á–∞–º
/// </summary>
public class AnimaInstanceFactory
{
    private readonly Dictionary<string, AnimaInstance> _instances = new();
    private readonly IServiceProvider _serviceProvider;
    
    public AnimaInstanceFactory(IServiceProvider serviceProvider)
    {
        _serviceProvider = serviceProvider;
    }
    
    public AnimaInstance GetOrCreateInstance(string apiKey)
    {
        if (!_instances.TryGetValue(apiKey, out var instance))
        {
            instance = new AnimaInstance(apiKey, _serviceProvider);
            _instances[apiKey] = instance;
            
            Console.WriteLine($"üß† –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Anima –¥–ª—è API-–∫–ª—é—á–∞: {apiKey[..8]}...");
        }
        
        instance.UpdateLastActivity();
        return instance;
    }
    
    public Dictionary<string, AnimaInstance> GetActiveInstances()
    {
        return _instances.ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
    }
    
    public void CleanupInactiveInstances()
    {
        var cutoff = DateTime.UtcNow.AddHours(-24);
        var inactiveKeys = _instances
            .Where(kvp => kvp.Value.LastActivity < cutoff)
            .Select(kvp => kvp.Key)
            .ToList();
            
        foreach (var key in inactiveKeys)
        {
            _instances[key].Dispose();
            _instances.Remove(key);
            Console.WriteLine($"üóëÔ∏è –£–¥–∞–ª–µ–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä: {key[..8]}...");
        }
    }
}

/// <summary>
/// –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Anima –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/// </summary>
public class AnimaInstance : IDisposable
{
    public string InstanceId { get; }
    public DateTime LastActivity { get; private set; }
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Anima
    public ConsciousLoop ConsciousLoop { get; }
    public SAIntrospectionEngine IntrospectionEngine { get; }
    public SelfReflectionEngine ReflectionEngine { get; }
    public LearningEngine LearningEngine { get; }
    public FeedbackParser FeedbackParser { get; }
    public EmotionDrivenGoalShift EmotionEngine { get; }
    public ThoughtLog ThoughtLog { get; }
    
    public AnimaInstance(string instanceId, IServiceProvider serviceProvider)
    {
        InstanceId = instanceId;
        LastActivity = DateTime.UtcNow;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        ConsciousLoop = new ConsciousLoop();
        IntrospectionEngine = new SAIntrospectionEngine();
        ReflectionEngine = new SelfReflectionEngine(instanceId);
        LearningEngine = new LearningEngine(instanceId);
        FeedbackParser = new FeedbackParser(instanceId);
        EmotionEngine = new EmotionDrivenGoalShift();
        ThoughtLog = new ThoughtLog();
        
        Console.WriteLine($"‚úÖ Anima —ç–∫–∑–µ–º–ø–ª—è—Ä {instanceId[..8]}... –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    }
    
    public void UpdateLastActivity()
    {
        LastActivity = DateTime.UtcNow;
    }
    
    public void Dispose()
    {
        ConsciousLoop?.Dispose();
        Console.WriteLine($"üîÑ Anima —ç–∫–∑–µ–º–ø–ª—è—Ä {InstanceId[..8]}... –∑–∞–≤–µ—Ä—à–µ–Ω");
    }
}