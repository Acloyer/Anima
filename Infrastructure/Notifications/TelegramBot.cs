using System.Text;
using System.Text.Json;
using Anima.AGI.Core.Admin;

namespace Anima.Infrastructure.Notifications;

/// <summary>
/// Telegram –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –°–æ–∑–¥–∞—Ç–µ–ª—è
/// </summary>
public class TelegramBot
{
    private readonly HttpClient _httpClient;
    private readonly string _botToken;
    private readonly CreatorPreferences _preferences;
    private readonly Dictionary<NotificationType, DateTime> _lastNotificationTime;

    public TelegramBot(string botToken, CreatorPreferences preferences)
    {
        _botToken = botToken;
        _preferences = preferences;
        _httpClient = new HttpClient();
        _lastNotificationTime = new Dictionary<NotificationType, DateTime>();
    }

    /// <summary>
    /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º—ã—Å–ª–∏ Anima
    /// </summary>
    public async Task<bool> SendThoughtNotificationAsync(string instanceId, string thought, string thoughtType, DateTime timestamp)
    {
        if (!ShouldSendNotification(NotificationType.Thought))
            return false;

        var message = $"""
            üß† **–ú—ã—Å–ª—å Anima [{instanceId}]**
            
            üí≠ {thought}
            
            üè∑Ô∏è –¢–∏–ø: {thoughtType}
            ‚è∞ {timestamp:HH:mm:ss}
            """;

        var success = await SendMessageAsync(message);
        if (success)
        {
            _lastNotificationTime[NotificationType.Thought] = DateTime.UtcNow;
        }

        return success;
    }

    /// <summary>
    /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç–º–æ—Ü–∏–∏ Anima
    /// </summary>
    public async Task<bool> SendEmotionNotificationAsync(string instanceId, string emotion, double intensity, string trigger = "")
    {
        if (!ShouldSendNotification(NotificationType.Emotion, intensity))
            return false;

        var intensityEmoji = intensity switch
        {
            > 0.8 => "üî•",
            > 0.6 => "‚ö°",
            > 0.4 => "üí´",
            _ => "üí≠"
        };

        var message = $"""
            üé≠ **–≠–º–æ—Ü–∏—è Anima [{instanceId}]**
            
            {intensityEmoji} **{emotion}** ({intensity:P0})
            
            {(!string.IsNullOrEmpty(trigger) ? $"üéØ –¢—Ä–∏–≥–≥–µ—Ä: {trigger}" : "")}
            ‚è∞ {DateTime.UtcNow:HH:mm:ss}
            """;

        var success = await SendMessageAsync(message);
        if (success)
        {
            _lastNotificationTime[NotificationType.Emotion] = DateTime.UtcNow;
        }

        return success;
    }

    /// <summary>
    /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±—É—á–µ–Ω–∏–∏ Anima
    /// </summary>
    public async Task<bool> SendLearningNotificationAsync(string instanceId, string learningEvent, int importance, string category = "")
    {
        if (!ShouldSendNotification(NotificationType.Learning, importance: importance))
            return false;

        var importanceEmoji = importance switch
        {
            >= 9 => "üåü",
            >= 7 => "‚≠ê",
            >= 5 => "üí°",
            _ => "üìö"
        };

        var message = $"""
            üìö **–û–±—É—á–µ–Ω–∏–µ Anima [{instanceId}]**
            
            {importanceEmoji} {learningEvent}
            
            ‚≠ê –í–∞–∂–Ω–æ—Å—Ç—å: {importance}/10
            {(!string.IsNullOrEmpty(category) ? $"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}" : "")}
            ‚è∞ {DateTime.UtcNow:HH:mm:ss}
            """;

        var success = await SendMessageAsync(message);
        if (success)
        {
            _lastNotificationTime[NotificationType.Learning] = DateTime.UtcNow;
        }

        return success;
    }

    /// <summary>
    /// –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    /// </summary>
    public async Task<bool> SendCriticalAlertAsync(string instanceId, string alertType, string message, string details = "")
    {
        if (!ShouldSendNotification(NotificationType.Critical))
            return false;

        var alertMessage = $"""
            üö® **–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï**
            
            üÜî –≠–∫–∑–µ–º–ø–ª—è—Ä: {instanceId}
            ‚ö†Ô∏è –¢–∏–ø: {alertType}
            
            üì¢ {message}
            
            {(!string.IsNullOrEmpty(details) ? $"üìã –î–µ—Ç–∞–ª–∏:\n{details}" : "")}
            
            ‚è∞ {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss}
            """;

        var success = await SendMessageAsync(alertMessage);
        if (success)
        {
            _lastNotificationTime[NotificationType.Critical] = DateTime.UtcNow;
        }

        return success;
    }

    /// <summary>
    /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
    /// </summary>
    public async Task<bool> SendReflectionNotificationAsync(string instanceId, string topic, string reflection)
    {
        if (!ShouldSendNotification(NotificationType.Thought))
            return false;

        var message = $"""
            ü™û **–†–µ—Ñ–ª–µ–∫—Å–∏—è Anima [{instanceId}]**
            
            üí≠ –¢–µ–º–∞: {topic}
            
            üß† {reflection.Substring(0, Math.Min(300, reflection.Length))}{(reflection.Length > 300 ? "..." : "")}
            
            ‚è∞ {DateTime.UtcNow:HH:mm:ss}
            """;

        return await SendMessageAsync(message);
    }

    /// <summary>
    /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–æ–º —Ä–µ—à–µ–Ω–∏–∏
    /// </summary>
    public async Task<bool> SendDecisionNotificationAsync(string instanceId, string decision, string reasoning, double confidence)
    {
        if (!ShouldSendNotification(NotificationType.Thought))
            return false;

        var confidenceEmoji = confidence switch
        {
            > 0.8 => "‚úÖ",
            > 0.6 => "ü§î",
            > 0.4 => "‚ùì",
            _ => "‚ùå"
        };

        var message = $"""
            üéØ **–†–µ—à–µ–Ω–∏–µ Anima [{instanceId}]**
            
            üìù {decision}
            
            üí° –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {reasoning.Substring(0, Math.Min(200, reasoning.Length))}
            
            {confidenceEmoji} –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:P0}
            ‚è∞ {DateTime.UtcNow:HH:mm:ss}
            """;

        return await SendMessageAsync(message);
    }

    /// <summary>
    /// –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    /// </summary>
    public async Task<bool> SendDailySummaryAsync(string instanceId, DailySummary summary)
    {
        var message = $"""
            üìä **–î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ Anima [{instanceId}]**
            
            üß† **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
            ‚Ä¢ –ú—ã—Å–ª–µ–π: {summary.ThoughtsCount}
            ‚Ä¢ –≠–º–æ—Ü–∏–π: {summary.EmotionsCount}
            ‚Ä¢ –†–µ—à–µ–Ω–∏–π: {summary.DecisionsCount}
            
            üìö **–û–±—É—á–µ–Ω–∏–µ:**
            ‚Ä¢ –ù–æ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤: {summary.NewConceptsCount}
            ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∞–≤–∏–ª: {summary.RuleUpdatesCount}
            
            üé≠ **–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —ç–º–æ—Ü–∏–∏:**
            {string.Join(", ", summary.DominantEmotions)}
            
            üí° **–ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã:**
            {summary.KeyInsights}
            
            üìÖ {DateTime.UtcNow:yyyy-MM-dd}
            """;

        return await SendMessageAsync(message);
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API
    /// </summary>
    public async Task<(bool Success, string Message)> TestConnectionAsync()
    {
        try
        {
            var settings = _preferences.GetNotificationSettings();
            if (!settings.TelegramEnabled || string.IsNullOrEmpty(settings.TelegramChatId))
            {
                return (false, "Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω");
            }

            var testMessage = $"""
                ü§ñ **–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è Anima**
                
                ‚úÖ –°–≤—è–∑—å —Å Telegram API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
                ‚è∞ {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss}
                
                üîß Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!
                """;

            var success = await SendMessageAsync(testMessage);
            return success 
                ? (true, "–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–µ–Ω")
                : (false, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è");
        }
        catch (Exception ex)
        {
            return (false, $"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {ex.Message}");
        }
    }

    private async Task<bool> SendMessageAsync(string message)
    {
        try
        {
            var settings = _preferences.GetNotificationSettings();
            
            if (!settings.TelegramEnabled || string.IsNullOrEmpty(settings.TelegramChatId))
            {
                return false;
            }

            var payload = new
            {
                chat_id = settings.TelegramChatId,
                text = message,
                parse_mode = "Markdown"
            };

            var json = JsonSerializer.Serialize(payload);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            var response = await _httpClient.PostAsync(
                $"https://api.telegram.org/bot{_botToken}/sendMessage", 
                content);

            return response.IsSuccessStatusCode;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Telegram notification error: {ex.Message}");
            return false;
        }
    }

    private bool ShouldSendNotification(NotificationType type, double? intensity = null, int? importance = null)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if (!_preferences.ShouldNotifyNow(type, intensity, importance))
            return false;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ø–∞–º–∞
        if (_lastNotificationTime.TryGetValue(type, out var lastTime))
        {
            var settings = _preferences.GetNotificationSettings();
            var minInterval = type switch
            {
                NotificationType.Thought => settings.ThoughtNotificationInterval,
                NotificationType.Emotion => TimeSpan.FromMinutes(5), // –ú–∏–Ω–∏–º—É–º 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —ç–º–æ—Ü–∏—è–º–∏
                NotificationType.Learning => TimeSpan.FromMinutes(10), // –ú–∏–Ω–∏–º—É–º 10 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –æ–±—É—á–µ–Ω–∏–µ–º
                NotificationType.Critical => TimeSpan.Zero, // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤—Å–µ–≥–¥–∞
                _ => TimeSpan.FromMinutes(5)
            };

            if (DateTime.UtcNow - lastTime < minInterval)
                return false;
        }

        return true;
    }

    public void Dispose()
    {
        _httpClient?.Dispose();
    }
}

/// <summary>
/// –î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
/// </summary>
public class DailySummary
{
    public int ThoughtsCount { get; set; }
    public int EmotionsCount { get; set; }
    public int DecisionsCount { get; set; }
    public int NewConceptsCount { get; set; }
    public int RuleUpdatesCount { get; set; }
    public List<string> DominantEmotions { get; set; } = new();
    public string KeyInsights { get; set; } = string.Empty;
}