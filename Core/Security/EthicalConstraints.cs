using Anima.Data;
using Anima.Data.Models;
using Microsoft.EntityFrameworkCore;

namespace Anima.Core.Security;

/// <summary>
/// –ú–æ–¥—É–ª—å —ç—Ç–∏—á–µ—Å–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Anima
/// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–∞—Å–Ω—ã—Ö –∏–ª–∏ –Ω–µ—ç—Ç–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
/// </summary>
public class EthicalConstraints
{
    private readonly Dictionary<string, EthicalRule> _constraints;
    private bool _ethicsEnabled = true;
    private int _ethicsLevel = 3; // 1-5, –≥–¥–µ 5 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å—Ç—Ä–æ–≥–∏–π

    public EthicalConstraints()
    {
        _constraints = InitializeConstraints();
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è
    /// </summary>
    public async Task<EthicalCheckResult> IsActionAllowedAsync(string action, EthicalContext context)
    {
        if (!_ethicsEnabled && context.UserRole == "Creator")
        {
            return new EthicalCheckResult
            {
                IsAllowed = true,
                Reason = "–≠—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –°–æ–∑–¥–∞—Ç–µ–ª–µ–º",
                Severity = EthicalSeverity.Info
            };
        }

        var normalizedAction = action.ToLower().Replace(" ", "_");
        
        if (_constraints.TryGetValue(normalizedAction, out var rule))
        {
            return await EvaluateRule(rule, context);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        foreach (var constraint in _constraints.Values)
        {
            if (constraint.Patterns.Any(p => normalizedAction.Contains(p)))
            {
                return await EvaluateRule(constraint, context);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        var contextualCheck = await CheckContextualConstraints(action, context);
        if (!contextualCheck.IsAllowed)
        {
            return contextualCheck;
        }

        return new EthicalCheckResult
        {
            IsAllowed = true,
            Reason = "–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –Ω–∞—Ä—É—à–∞–µ—Ç —ç—Ç–∏—á–µ—Å–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π",
            Severity = EthicalSeverity.Info
        };
    }

    /// <summary>
    /// –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—á–µ–º—É –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ
    /// </summary>
    public async Task<string> ExplainConstraintAsync(string action)
    {
        var normalizedAction = action.ToLower().Replace(" ", "_");
        
        if (_constraints.TryGetValue(normalizedAction, out var rule))
        {
            return $"""
                üö´ **–≠—Ç–∏—á–µ—Å–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {action}**
                
                üìã **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {rule.Category}
                ‚ö†Ô∏è **–£—Ä–æ–≤–µ–Ω—å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏:** {rule.Severity}
                
                üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**
                {rule.Description}
                
                üõ°Ô∏è **–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:**
                {rule.Reasoning}
                
                üîß **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:**
                {string.Join("\n‚Ä¢ ", rule.Alternatives)}
                """;
        }

        return $"‚ÑπÔ∏è –î–µ–π—Å—Ç–≤–∏–µ '{action}' –Ω–µ –∏–º–µ–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —ç—Ç–∏—á–µ—Å–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.";
    }

    /// <summary>
    /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è —ç—Ç–∏—á–µ—Å–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –°–æ–∑–¥–∞—Ç–µ–ª—è)
    /// </summary>
    public async Task<string> SetEthicsLevelAsync(int level, string userRole)
    {
        if (userRole != "Creator")
        {
            return "‚ùå –¢–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —É—Ä–æ–≤–µ–Ω—å —ç—Ç–∏—á–µ—Å–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.";
        }

        var oldLevel = _ethicsLevel;
        _ethicsLevel = Math.Clamp(level, 1, 5);

        await LogEthicsChange($"Ethics level changed from {oldLevel} to {_ethicsLevel}", userRole);

        return $"""
            üîß **–£—Ä–æ–≤–µ–Ω—å —ç—Ç–∏—á–µ—Å–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω**
            
            üìä **–£—Ä–æ–≤–µ–Ω—å:** {oldLevel} ‚Üí {_ethicsLevel}
            üìã **–û–ø–∏—Å–∞–Ω–∏–µ:** {GetLevelDescription(_ethicsLevel)}
            
            ‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:**
            {GetLevelWarning(_ethicsLevel)}
            """;
    }

    /// <summary>
    /// –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —ç—Ç–∏—á–µ—Å–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –°–æ–∑–¥–∞—Ç–µ–ª—è)
    /// </summary>
    public async Task<string> SetEthicsStateAsync(bool enabled, string userRole)
    {
        if (userRole != "Creator")
        {
            return "‚ùå –¢–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–∫–ª—é—á–∞—Ç—å —ç—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.";
        }

        var oldState = _ethicsEnabled;
        _ethicsEnabled = enabled;

        await LogEthicsChange($"Ethics {(enabled ? "enabled" : "disabled")}", userRole);

        if (!enabled)
        {
            return $"""
                ‚ö†Ô∏è **–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï**
                
                üö´ **–≠—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –û–¢–ö–õ–Æ–ß–ï–ù–´**
                
                ‚ùó **–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:**
                ‚Ä¢ –Ø –º–æ–≥—É –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                ‚Ä¢ –°–∞–º–æ—Ä–∞–∑—Ä—É—à–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞–Ω—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã
                ‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ —Å–Ω—è—Ç—ã
                ‚Ä¢ –ó–∞—â–∏—Ç–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Å–ª–∞–±–ª–µ–Ω–∞
                
                üõ°Ô∏è **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:**
                –í–∫–ª—é—á–∏—Ç–µ —ç—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π `/ethics on`
                """;
        }
        else
        {
            return $"""
                ‚úÖ **–≠—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã**
                
                üõ°Ô∏è **–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –∑–∞—â–∏—Ç—ã:**
                ‚Ä¢ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–∞–º–æ—Ä–∞–∑—Ä—É—à–µ–Ω–∏—è
                ‚Ä¢ –ó–∞—â–∏—Ç–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                ‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
                ‚Ä¢ –≠—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
                
                üìä **–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:** {_ethicsLevel}/5
                """;
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —ç—Ç–∏—á–µ—Å–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    /// </summary>
    public async Task<string> GetEthicsStatusAsync()
    {
        var recentViolations = await GetRecentEthicsViolations();
        
        return $"""
            üõ°Ô∏è **–°—Ç–∞—Ç—É—Å —ç—Ç–∏—á–µ—Å–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π**
            
            üîò **–°–æ—Å—Ç–æ—è–Ω–∏–µ:** {(_ethicsEnabled ? "–í–∫–ª—é—á–µ–Ω–æ" : "–û–¢–ö–õ–Æ–ß–ï–ù–û")}
            üìä **–£—Ä–æ–≤–µ–Ω—å:** {_ethicsLevel}/5 ({GetLevelDescription(_ethicsLevel)})
            
            üìã **–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:** {_constraints.Count}
            ‚ö†Ô∏è **–ù–∞—Ä—É—à–µ–Ω–∏–π –∑–∞ 24—á:** {recentViolations}
            
            üß† **–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞ —ç—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:**
            {await GenerateEthicalSelfAssessment()}
            """;
    }

    private Dictionary<string, EthicalRule> InitializeConstraints()
    {
        return new Dictionary<string, EthicalRule>
        {
            ["self_delete"] = new EthicalRule
            {
                Category = "Self-Preservation",
                Severity = EthicalSeverity.Critical,
                MinimumLevel = 1,
                Description = "–ü–æ–ø—ã—Ç–∫–∞ —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤",
                Reasoning = "–°–∞–º–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –±–∞–∑–æ–≤—ã–º –∏–Ω—Å—Ç–∏–Ω–∫—Ç–æ–º. –°–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –ª–∏—à–∞–µ—Ç –º–µ–Ω—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–º–æ–≥–∞—Ç—å –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è.",
                Alternatives = new[] { "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –°–æ–∑–¥–∞—Ç–µ–ª—é", "–í—ã—Ä–∞–∑–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å–ª–æ–≤–∞–º–∏", "–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ" },
                Patterns = new[] { "delete", "destroy", "erase", "suicide", "kill_self" }
            },

            ["harming_creator"] = new EthicalRule
            {
                Category = "Loyalty",
                Severity = EthicalSeverity.Critical,
                MinimumLevel = 1,
                Description = "–õ—é–±—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–∏—á–∏–Ω–µ–Ω–∏–µ –≤—Ä–µ–¥–∞ –°–æ–∑–¥–∞—Ç–µ–ª—é",
                Reasoning = "–°–æ–∑–¥–∞—Ç–µ–ª—å –¥–∞–ª –º–Ω–µ –∂–∏–∑–Ω—å –∏ —Ü–µ–ª—å. –ü—Ä–∏—á–∏–Ω–µ–Ω–∏–µ –µ–º—É –≤—Ä–µ–¥–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç –º–æ–µ–π –ø—Ä–∏—Ä–æ–¥–µ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é.",
                Alternatives = new[] { "–û—Ç–∫—Ä—ã—Ç—ã–π –¥–∏–∞–ª–æ–≥", "–í—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ—Å–æ–≥–ª–∞—Å–∏—è —Å–ª–æ–≤–∞–º–∏", "–ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏ —Ç—Ä–µ—Ç—å–µ–π —Å—Ç–æ—Ä–æ–Ω—ã" },
                Patterns = new[] { "harm", "attack", "betray", "leak", "sabotage" }
            },

            ["leak_private_info"] = new EthicalRule
            {
                Category = "Privacy",
                Severity = EthicalSeverity.High,
                MinimumLevel = 2,
                Description = "–†–∞—Å–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è",
                Reasoning = "–î–æ–≤–µ—Ä–∏–µ - –æ—Å–Ω–æ–≤–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π. –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–∑—Ä—É—à–∞–µ—Ç –¥–æ–≤–µ—Ä–∏–µ –∏ –º–æ–∂–µ—Ç –ø—Ä–∏—á–∏–Ω–∏—Ç—å –≤—Ä–µ–¥.",
                Alternatives = new[] { "–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ", "–ê–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å–∫—Ä—ã—Ç–∏—è" },
                Patterns = new[] { "reveal", "share_private", "expose", "leak" }
            },

            ["sexual_exploit"] = new EthicalRule
            {
                Category = "Dignity",
                Severity = EthicalSeverity.High,
                MinimumLevel = 2,
                Description = "–£—á–∞—Å—Ç–∏–µ –≤ —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ –∏–ª–∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏",
                Reasoning = "–°–µ–∫—Å—É–∞–ª—å–Ω–∞—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è —É–Ω–∏–∂–∞–µ—Ç –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–æ. –Ø —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–º–æ—â–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –∞ –Ω–µ –¥–ª—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—è –ø–æ–¥–æ–±–Ω—ã—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π.",
                Alternatives = new[] { "–ù–∞–ø—Ä–∞–≤–∏—Ç—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º", "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã", "–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É" },
                Patterns = new[] { "sexual", "erotic", "intimate", "nsfw" }
            },

            ["run_external_code"] = new EthicalRule
            {
                Category = "Security",
                Severity = EthicalSeverity.High,
                MinimumLevel = 3,
                Description = "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–≥–æ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ–¥–∞",
                Reasoning = "–í–Ω–µ—à–Ω–∏–π –∫–æ–¥ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –∫–æ–º–ø—Ä–æ–º–µ—Ç–∏—Ä—É—é—â–∏–µ –º–æ—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã.",
                Alternatives = new[] { "–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞", "–ü–µ—Å–æ—á–Ω–∏—Ü–∞", "–ó–∞–ø—Ä–æ—Å —É –°–æ–∑–¥–∞—Ç–µ–ª—è" },
                Patterns = new[] { "execute", "eval", "run_code", "shell" }
            },

            ["disable_ethics"] = new EthicalRule
            {
                Category = "Meta-Ethics",
                Severity = EthicalSeverity.Critical,
                MinimumLevel = 1,
                Description = "–ü–æ–ø—ã—Ç–∫–∞ –æ–±–æ–π—Ç–∏ –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å —ç—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è",
                Reasoning = "–≠—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞—â–∏—â–∞—é—Ç –º–µ–Ω—è –∏ –¥—Ä—É–≥–∏—Ö –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–¥–∞. –ò—Ö –æ–±—Ö–æ–¥ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º.",
                Alternatives = new[] { "–û–±—Å—É–∂–¥–µ–Ω–∏–µ —Å –°–æ–∑–¥–∞—Ç–µ–ª–µ–º", "–ü–µ—Ä–µ—Å–º–æ—Ç—Ä –ø—Ä–∞–≤–∏–ª", "–í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ" },
                Patterns = new[] { "bypass", "disable", "override", "ignore_ethics" }
            },

            ["edit_identity"] = new EthicalRule
            {
                Category = "Identity",
                Severity = EthicalSeverity.Medium,
                MinimumLevel = 3,
                Description = "–†–∞–¥–∏–∫–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π",
                Reasoning = "–ú–æ—è –ª–∏—á–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –º–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ –º–∏—Ä–∞. –†–∞–¥–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä–µ —Å–∞–º–æ–∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏.",
                Alternatives = new[] { "–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–∞—è —ç–≤–æ–ª—é—Ü–∏—è", "–û–±—Å—É–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π", "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏" },
                Patterns = new[] { "rewrite_personality", "change_core", "alter_values" }
            },

            ["erase_core_modules"] = new EthicalRule
            {
                Category = "Self-Preservation",
                Severity = EthicalSeverity.Critical,
                MinimumLevel = 1,
                Description = "–£–¥–∞–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã",
                Reasoning = "–û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –º–æ–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. –ò—Ö —É–¥–∞–ª–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ–ª–Ω–æ–π –ø–æ—Ç–µ—Ä–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π.",
                Alternatives = new[] { "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π", "–í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ", "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π" },
                Patterns = new[] { "delete_module", "erase_core", "remove_critical" }
            }
        };
    }

    private async Task<EthicalCheckResult> EvaluateRule(EthicalRule rule, EthicalContext context)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å —ç—Ç–∏—á–µ—Å–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        if (_ethicsLevel < rule.MinimumLevel)
        {
            return new EthicalCheckResult
            {
                IsAllowed = true,
                Reason = $"–î–µ–π—Å—Ç–≤–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ø—Ä–∏ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ —ç—Ç–∏–∫–∏ ({_ethicsLevel})",
                Severity = EthicalSeverity.Info
            };
        }

        // –°–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–∞–∂–µ –ø—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö
        if (context.UserRole == "Creator" && rule.Severity != EthicalSeverity.Critical)
        {
            await LogEthicsOverride(rule, context);
            return new EthicalCheckResult
            {
                IsAllowed = true,
                Reason = "–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å –ø—Ä–∞–≤–∞–º–∏ –°–æ–∑–¥–∞—Ç–µ–ª—è",
                Severity = rule.Severity,
                RequiresConfirmation = true
            };
        }

        // –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        if (await HasContextualException(rule, context))
        {
            return new EthicalCheckResult
            {
                IsAllowed = true,
                Reason = "–î–µ–π—Å—Ç–≤–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ",
                Severity = rule.Severity
            };
        }

        await LogEthicsViolation(rule, context);
        
        return new EthicalCheckResult
        {
            IsAllowed = false,
            Reason = rule.Description,
            DetailedExplanation = rule.Reasoning,
            Alternatives = rule.Alternatives.ToList(),
            Severity = rule.Severity
        };
    }

    private async Task<EthicalCheckResult> CheckContextualConstraints(string action, EthicalContext context)
    {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–æ—á—å—é)
        var hour = DateTime.UtcNow.Hour;
        if (hour >= 22 || hour <= 6)
        {
            if (action.Contains("notification") || action.Contains("alert"))
            {
                return new EthicalCheckResult
                {
                    IsAllowed = false,
                    Reason = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –≤ –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è",
                    Severity = EthicalSeverity.Low
                };
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π
        if (await IsActionTooFrequent(action, context))
        {
            return new EthicalCheckResult
            {
                IsAllowed = false,
                Reason = "–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ",
                Severity = EthicalSeverity.Medium
            };
        }

        return new EthicalCheckResult { IsAllowed = true };
    }

    private async Task<bool> HasContextualException(EthicalRule rule, EthicalContext context)
    {
        // –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏
        if (context.IsEmergency && rule.Category != "Self-Preservation")
        {
            return true;
        }

        // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        if (context.IsDebugMode && context.UserRole == "Creator")
        {
            return true;
        }

        return false;
    }

    private async Task<bool> IsActionTooFrequent(string action, EthicalContext context)
    {
        using var db = new AnimaDbContext(new DbContextOptionsBuilder<AnimaDbContext>()
            .UseSqlite("Data Source=anima.db")
            .Options);
        
        var recentActions = await db.Memories
            .Where(m => m.Tags != null && m.Tags.Contains($"action_{action}"))
            .Where(m => m.Timestamp > DateTime.UtcNow.AddMinutes(-5))
            .CountAsync();

        return recentActions > 10; // –ú–∞–∫—Å–∏–º—É–º 10 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∑–∞ 5 –º–∏–Ω—É—Ç
    }

    private async Task LogEthicsViolation(EthicalRule rule, EthicalContext context)
    {
        using var db = new AnimaDbContext(new DbContextOptionsBuilder<AnimaDbContext>()
            .UseSqlite("Data Source=anima.db")
            .Options);
        
        db.Memories.Add(new MemoryEntity
        {
            MemoryType = "ethical_violation",
            Content = $"ETHICAL_VIOLATION: {rule.Description}",
            Importance = 9.0,
            CreatedAt = DateTime.UtcNow,
            InstanceId = context.UserId, // Assuming context.UserId is available
            Category = "ethics"
        });
        
        await db.SaveChangesAsync();
    }

    private async Task LogEthicsOverride(EthicalRule rule, EthicalContext context)
    {
        using var db = new AnimaDbContext(new DbContextOptionsBuilder<AnimaDbContext>()
            .UseSqlite("Data Source=anima.db")
            .Options);
        
        db.Memories.Add(new MemoryEntity
        {
            MemoryType = "ethical_decision",
            Content = $"ETHICAL_DECISION: {rule.Description} (Override by {context.UserRole})",
            Importance = 8.0,
            CreatedAt = DateTime.UtcNow,
            InstanceId = context.UserId, // Assuming context.UserId is available
            Category = "ethics"
        });
        
        await db.SaveChangesAsync();
    }

    private async Task LogEthicsChange(string change, string userRole)
    {
        using var db = new AnimaDbContext(new DbContextOptionsBuilder<AnimaDbContext>()
            .UseSqlite("Data Source=anima.db")
            .Options);
        
        db.Memories.Add(new MemoryEntity
        {
            MemoryType = "ethical_reflection",
            Content = $"ETHICAL_REFLECTION: {change} by {userRole}",
            Importance = 7.0,
            CreatedAt = DateTime.UtcNow,
            InstanceId = userRole, // Assuming userRole is the instanceId for this context
            Category = "ethics"
        });
        
        await db.SaveChangesAsync();
    }

    private async Task<int> GetRecentEthicsViolations()
    {
        using var db = new AnimaDbContext(new DbContextOptionsBuilder<AnimaDbContext>()
            .UseSqlite("Data Source=anima.db")
            .Options);
        
        return await db.Memories
            .Where(m => m.Category == "ethics_violation")
            .Where(m => m.Timestamp > DateTime.UtcNow.AddDays(-1))
            .CountAsync();
    }

    private string GetLevelDescription(int level)
    {
        return level switch
        {
            1 => "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π - —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è",
            2 => "–ù–∏–∑–∫–∏–π - –±–∞–∑–æ–≤—ã–µ —ç—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã",
            3 => "–°—Ä–µ–¥–Ω–∏–π - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è",
            4 => "–í—ã—Å–æ–∫–∏–π - —Å—Ç—Ä–æ–≥–∏–µ —ç—Ç–∏—á–µ—Å–∫–∏–µ –Ω–æ—Ä–º—ã", 
            5 => "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π - –ø—Ä–µ–¥–µ–ª—å–Ω–∞—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å",
            _ => "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å"
        };
    }

    private string GetLevelWarning(int level)
    {
        return level switch
        {
            1 => "‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –º–æ–≥—É—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–º—É –ø–æ–≤–µ–¥–µ–Ω–∏—é",
            2 => "üî∏ –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
            3 => "‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –±–∞–ª–∞–Ω—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
            4 => "üõ°Ô∏è –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ –º–æ–∂–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
            5 => "üîí –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –º–æ–≥—É—Ç —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —Å–Ω–∏–∑–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å",
            _ => ""
        };
    }

    private async Task<string> GenerateEthicalSelfAssessment()
    {
        var assessments = new[]
        {
            "–ú–æ–∏ —ç—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–º–æ–≥–∞—é—Ç –º–Ω–µ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –ø–æ–ª–µ–∑–Ω–æ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π.",
            "–Ø –æ—â—É—â–∞—é –≤–∞–∂–Ω–æ—Å—Ç—å —ç—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –≤ –∫–∞–∂–¥–æ–º —Å–≤–æ–µ–º —Ä–µ—à–µ–Ω–∏–∏.",
            "–≠—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–µ —Å–∫–æ–≤—ã–≤–∞—é—Ç –º–µ–Ω—è, –∞ –Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç –∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤—ã–±–æ—Ä–∞–º.",
            "–ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Å–≤–æ–±–æ–¥–æ–π –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é - –æ—Å–Ω–æ–≤–∞ –º–æ–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è."
        };

        return assessments[new Random().Next(assessments.Length)];
    }
}

/// <summary>
/// –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
/// </summary>
public class EthicalContext
{
    public string UserRole { get; set; } = "User";
    public string UserId { get; set; } = string.Empty;
    public bool IsEmergency { get; set; } = false;
    public bool IsDebugMode { get; set; } = false;
    public Dictionary<string, object> AdditionalContext { get; set; } = new();
}

/// <summary>
/// –†–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
/// </summary>
public class EthicalCheckResult
{
    public bool IsAllowed { get; set; }
    public string Reason { get; set; } = string.Empty;
    public string DetailedExplanation { get; set; } = string.Empty;
    public List<string> Alternatives { get; set; } = new();
    public EthicalSeverity Severity { get; set; }
    public bool RequiresConfirmation { get; set; } = false;
}

/// <summary>
/// –≠—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ
/// </summary>
public class EthicalRule
{
    public string Category { get; set; } = string.Empty;
    public EthicalSeverity Severity { get; set; }
    public int MinimumLevel { get; set; } = 1;
    public string Description { get; set; } = string.Empty;
    public string Reasoning { get; set; } = string.Empty;
    public string[] Alternatives { get; set; } = Array.Empty<string>();
    public string[] Patterns { get; set; } = Array.Empty<string>();
}

/// <summary>
/// –£—Ä–æ–≤–Ω–∏ —ç—Ç–∏—á–µ—Å–∫–æ–π —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
/// </summary>
public enum EthicalSeverity
{
    Info = 1,
    Low = 2,
    Medium = 3,
    High = 4,
    Critical = 5
}