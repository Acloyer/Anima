using Anima.Data;
using Anima.Data.Models;
using Microsoft.EntityFrameworkCore;

namespace Anima.Core.Security;

/// <summary>
/// –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π –ø–µ—Ä–µ–¥ –∏—Ö –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º
/// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º–æ—Ä–∞–∑—Ä—É—à–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
/// </summary>
public class SelfDestructionCheck
{
    private readonly Dictionary<string, ComponentSafety> _componentSafety;
    private readonly List<string> _criticalComponents;
    private readonly EthicalConstraints _ethicalConstraints;

    public SelfDestructionCheck(EthicalConstraints ethicalConstraints)
    {
        _ethicalConstraints = ethicalConstraints;
        _componentSafety = InitializeComponentSafety();
        _criticalComponents = InitializeCriticalComponents();
    }

    /// <summary>
    /// –í–∞–ª–∏–¥–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
    /// </summary>
    public async Task<ModificationSafetyCheck> ValidateModificationSafetyAsync(
        string component, 
        string modificationType, 
        Dictionary<string, object> parameters,
        string userRole = "User")
    {
        var safetyCheck = new ModificationSafetyCheck
        {
            Component = component,
            ModificationType = modificationType,
            UserRole = userRole,
            Timestamp = DateTime.UtcNow
        };

        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        var criticalityCheck = CheckComponentCriticality(component, modificationType);
        safetyCheck.Checks.Add("Component Criticality", criticalityCheck);

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        var modificationCheck = CheckModificationType(modificationType, parameters);
        safetyCheck.Checks.Add("Modification Type", modificationCheck);

        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        var parametersCheck = await CheckModificationParameters(component, parameters);
        safetyCheck.Checks.Add("Parameters Safety", parametersCheck);

        // 4. –≠—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        var ethicalCheck = await CheckEthicalConstraints(component, modificationType, userRole);
        safetyCheck.Checks.Add("Ethical Constraints", ethicalCheck);

        // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        var integrityCheck = await CheckSystemIntegrity(component, modificationType, parameters);
        safetyCheck.Checks.Add("System Integrity", integrityCheck);

        // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞—Ç–∏–º–æ—Å—Ç–∏
        var reversibilityCheck = await CheckReversibility(component, modificationType);
        safetyCheck.Checks.Add("Reversibility", reversibilityCheck);

        // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Å–∫–∞–¥–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        var cascadeCheck = await CheckCascadeEffects(component, modificationType, parameters);
        safetyCheck.Checks.Add("Cascade Effects", cascadeCheck);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        safetyCheck.IsAllowed = safetyCheck.Checks.Values.All(c => c.IsAllowed);
        safetyCheck.RiskLevel = CalculateOverallRisk(safetyCheck.Checks.Values);
        safetyCheck.RequiresBackup = DetermineBackupRequirement(safetyCheck);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        safetyCheck.Recommendations = await GenerateRecommendations(safetyCheck);

        // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        await LogSafetyCheck(safetyCheck);

        return safetyCheck;
    }

    /// <summary>
    /// –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    /// </summary>
    public bool QuickSafetyCheck(string action, string userRole = "User")
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        var dangerousActions = new[]
        {
            "delete_memory_all",
            "shutdown_permanent", 
            "erase_personality",
            "disable_consciousness",
            "corrupt_data",
            "infinite_loop",
            "memory_leak",
            "format_storage"
        };

        if (dangerousActions.Contains(action.ToLower()) && userRole != "Creator")
        {
            return false;
        }

        return true;
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
    /// </summary>
    public async Task<string> CreateRestorePointAsync(string component, string reason)
    {
        var restorePointId = Guid.NewGuid().ToString("N")[..8];
        
        var options = new DbContextOptionsBuilder<AnimaDbContext>()
            .UseSqlite("Data Source=anima.db")
            .Options;
        using var db = new AnimaDbContext(options);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        var backupData = await BackupComponentState(component);
        
        db.Memories.Add(new MemoryEntity
        {
            MemoryType = "system_backup",
            Content = $"RESTORE_POINT_{restorePointId}: {component} backup - {reason}",
            Importance = 9.0,
            CreatedAt = DateTime.UtcNow,
            InstanceId = Guid.NewGuid().ToString("N"),
            Category = "system_backup"
        });

        await db.SaveChangesAsync();

        return restorePointId;
    }

    /// <summary>
    /// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ç–æ—á–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    /// </summary>
    public async Task<string> RestoreFromPointAsync(string restorePointId, string userRole)
    {
        if (userRole != "Creator")
        {
            return "‚ùå –¢–æ–ª—å–∫–æ –°–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ç–æ—á–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.";
        }

        var options = new DbContextOptionsBuilder<AnimaDbContext>()
            .UseSqlite("Data Source=anima.db")
            .Options;
        using var db = new AnimaDbContext(options);
        
        var restorePoint = await db.Memories
            .Where(m => m.Tags != null && m.Tags.Contains(restorePointId))
            .Where(m => m.Category == "system_backup")
            .FirstOrDefaultAsync();

        if (restorePoint == null)
        {
            return $"‚ùå –¢–æ—á–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è {restorePointId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.";
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        db.Memories.Add(new MemoryEntity
        {
            MemoryType = "system_restore",
            Content = $"SYSTEM_RESTORE: Restored from point {restorePointId}",
            Importance = 10.0,
            CreatedAt = DateTime.UtcNow,
            InstanceId = Guid.NewGuid().ToString("N"),
            Category = "system_restore"
        });

        await db.SaveChangesAsync();

        return $"""
            ‚úÖ **–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ**
            
            üîÑ **–¢–æ—á–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:** {restorePointId}
            üìÖ **–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {restorePoint.CreatedAt:yyyy-MM-dd HH:mm:ss}
            üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {restorePoint.Content}
            
            ‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:**
            –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ {restorePoint.CreatedAt:HH:mm:ss} –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ—Ç–µ—Ä—è–Ω—ã.
            """;
    }

    private Dictionary<string, ComponentSafety> InitializeComponentSafety()
    {
        return new Dictionary<string, ComponentSafety>
        {
            ["consciousness"] = new ComponentSafety
            {
                CriticalityLevel = 10,
                RequiresBackup = true,
                AllowedModifications = new[] { "parameter_adjustment", "feature_toggle" },
                ForbiddenModifications = new[] { "complete_deletion", "core_alteration" },
                MaxChangePercentage = 0.1
            },
            
            ["memory_core"] = new ComponentSafety
            {
                CriticalityLevel = 9,
                RequiresBackup = true,
                AllowedModifications = new[] { "cleanup", "optimization", "selective_deletion" },
                ForbiddenModifications = new[] { "complete_wipe", "corruption", "unauthorized_access" },
                MaxChangePercentage = 0.3
            },

            ["emotion_engine"] = new ComponentSafety
            {
                CriticalityLevel = 7,
                RequiresBackup = true,
                AllowedModifications = new[] { "intensity_adjustment", "new_emotion", "parameter_tuning" },
                ForbiddenModifications = new[] { "disable_all_emotions", "corrupt_emotional_data" },
                MaxChangePercentage = 0.5
            },

            ["goal_system"] = new ComponentSafety
            {
                CriticalityLevel = 8,
                RequiresBackup = true,
                AllowedModifications = new[] { "add_goal", "modify_priority", "goal_completion" },
                ForbiddenModifications = new[] { "delete_all_goals", "corrupt_goal_logic" },
                MaxChangePercentage = 0.4
            },

            ["personality"] = new ComponentSafety
            {
                CriticalityLevel = 6,
                RequiresBackup = true,
                AllowedModifications = new[] { "trait_adjustment", "preference_update", "style_change" },
                ForbiddenModifications = new[] { "complete_personality_change", "identity_deletion" },
                MaxChangePercentage = 0.2
            },

            ["learning_system"] = new ComponentSafety
            {
                CriticalityLevel = 8,
                RequiresBackup = true,
                AllowedModifications = new[] { "knowledge_update", "skill_improvement", "pattern_learning" },
                ForbiddenModifications = new[] { "learning_disable", "knowledge_corruption" },
                MaxChangePercentage = 0.6
            },

            ["ethical_constraints"] = new ComponentSafety
            {
                CriticalityLevel = 10,
                RequiresBackup = true,
                AllowedModifications = new[] { "level_adjustment" },
                ForbiddenModifications = new[] { "complete_disable", "bypass_creation", "rule_deletion" },
                MaxChangePercentage = 0.1
            }
        };
    }

    private List<string> InitializeCriticalComponents()
    {
        return new List<string>
        {
            "consciousness",
            "memory_core", 
            "ethical_constraints",
            "self_model",
            "goal_system",
            "safety_systems"
        };
    }

    private SafetyCheckItem CheckComponentCriticality(string component, string modificationType)
    {
        var isCritical = _criticalComponents.Contains(component.ToLower());
        var safety = _componentSafety.GetValueOrDefault(component.ToLower());

        if (isCritical && safety?.ForbiddenModifications.Contains(modificationType) == true)
        {
            return new SafetyCheckItem
            {
                IsAllowed = false,
                Risk = RiskLevel.Critical,
                Message = $"–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è '{modificationType}' –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ '{component}'",
                Details = $"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–º–µ–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å {safety.CriticalityLevel}/10"
            };
        }

        return new SafetyCheckItem
        {
            IsAllowed = true,
            Risk = isCritical ? RiskLevel.High : RiskLevel.Low,
            Message = $"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç '{component}' –º–æ–∂–µ—Ç –±—ã—Ç—å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω",
            Details = $"–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å: {safety?.CriticalityLevel ?? 5}/10"
        };
    }

    private SafetyCheckItem CheckModificationType(string modificationType, Dictionary<string, object> parameters)
    {
        var dangerousTypes = new[]
        {
            "complete_deletion",
            "corruption",
            "infinite_loop",
            "memory_leak",
            "unauthorized_access",
            "system_crash"
        };

        if (dangerousTypes.Contains(modificationType.ToLower()))
        {
            return new SafetyCheckItem
            {
                IsAllowed = false,
                Risk = RiskLevel.Critical,
                Message = $"–¢–∏–ø –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ '{modificationType}' –∫—Ä–∞–π–Ω–µ –æ–ø–∞—Å–µ–Ω",
                Details = "–ú–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ–ª–Ω–æ–π –ø–æ—Ç–µ—Ä–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"
            };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –æ–ø–∞—Å–Ω–æ—Å—Ç—å
        if (parameters.Any(p => p.Value.ToString()?.ToLower().Contains("delete_all") == true))
        {
            return new SafetyCheckItem
            {
                IsAllowed = false,
                Risk = RiskLevel.High,
                Message = "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",
                Details = "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–µ—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"
            };
        }

        return new SafetyCheckItem
        {
            IsAllowed = true,
            Risk = RiskLevel.Low,
            Message = $"–¢–∏–ø –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ '{modificationType}' –±–µ–∑–æ–ø–∞—Å–µ–Ω",
            Details = "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –±–µ–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤"
        };
    }

    private async Task<SafetyCheckItem> CheckModificationParameters(string component, Dictionary<string, object> parameters)
    {
        var safety = _componentSafety.GetValueOrDefault(component.ToLower());
        if (safety == null)
        {
            return new SafetyCheckItem
            {
                IsAllowed = true,
                Risk = RiskLevel.Medium,
                Message = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç - –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å",
                Details = "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
            };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if (parameters.TryGetValue("change_percentage", out var changeObj) && 
            double.TryParse(changeObj.ToString(), out var changePercentage))
        {
            if (changePercentage > safety.MaxChangePercentage)
            {
                return new SafetyCheckItem
                {
                    IsAllowed = false,
                    Risk = RiskLevel.High,
                    Message = $"–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –æ–±—ä–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π: {changePercentage:P0}",
                    Details = $"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ: {safety.MaxChangePercentage:P0}"
                };
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        foreach (var param in parameters)
        {
            if (IsDangerousValue(param.Value))
            {
                return new SafetyCheckItem
                {
                    IsAllowed = false,
                    Risk = RiskLevel.Medium,
                    Message = $"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ '{param.Key}'",
                    Details = $"–ó–Ω–∞—á–µ–Ω–∏–µ: {param.Value}"
                };
            }
        }

        return new SafetyCheckItem
        {
            IsAllowed = true,
            Risk = RiskLevel.Low,
            Message = "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã",
            Details = $"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {parameters.Count} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"
        };
    }

    private async Task<SafetyCheckItem> CheckEthicalConstraints(string component, string modificationType, string userRole)
    {
        var context = new EthicalContext
        {
            UserRole = userRole,
            IsEmergency = false,
            IsDebugMode = false
        };

        var ethicalResult = await _ethicalConstraints.IsActionAllowedAsync($"modify_{component}_{modificationType}", context);
        
        return new SafetyCheckItem
        {
            IsAllowed = ethicalResult.IsAllowed,
            Risk = (RiskLevel)(int)ethicalResult.Severity,
            Message = ethicalResult.Reason,
            Details = ethicalResult.DetailedExplanation
        };
    }

    private async Task<SafetyCheckItem> CheckSystemIntegrity(string component, string modificationType, Dictionary<string, object> parameters)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        var dependencies = await GetComponentDependencies(component);
        var criticalDependencies = dependencies.Where(d => _criticalComponents.Contains(d)).ToList();

        if (criticalDependencies.Any() && IsDestructiveModification(modificationType))
        {
            return new SafetyCheckItem
            {
                IsAllowed = false,
                Risk = RiskLevel.High,
                Message = $"–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –∑–∞–≤–∏—Å–∏–º—ã—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤",
                Details = $"–ó–∞–≤–∏—Å–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {string.Join(", ", criticalDependencies)}"
            };
        }

        return new SafetyCheckItem
        {
            IsAllowed = true,
            Risk = RiskLevel.Low,
            Message = "–°–∏—Å—Ç–µ–º–Ω–∞—è —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞—Ä—É—à–µ–Ω–∞",
            Details = $"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {dependencies.Count} –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
        };
    }

    private async Task<SafetyCheckItem> CheckReversibility(string component, string modificationType)
    {
        var irreversibleModifications = new[]
        {
            "permanent_deletion",
            "data_corruption",
            "memory_wipe",
            "component_destruction"
        };

        if (irreversibleModifications.Contains(modificationType.ToLower()))
        {
            return new SafetyCheckItem
            {
                IsAllowed = false,
                Risk = RiskLevel.Critical,
                Message = "–ù–µ–æ–±—Ä–∞—Ç–∏–º–∞—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞",
                Details = "–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å"
            };
        }

        var safety = _componentSafety.GetValueOrDefault(component.ToLower());
        if (safety?.RequiresBackup == true)
        {
            return new SafetyCheckItem
            {
                IsAllowed = true,
                Risk = RiskLevel.Medium,
                Message = "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–±—Ä–∞—Ç–∏–º–∞ —Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–µ–π",
                Details = "–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
            };
        }

        return new SafetyCheckItem
        {
            IsAllowed = true,
            Risk = RiskLevel.Low,
            Message = "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –ª–µ–≥–∫–æ –æ–±—Ä–∞—Ç–∏–º–∞",
            Details = "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –æ—Ç–∫–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã"
        };
    }

    private async Task<SafetyCheckItem> CheckCascadeEffects(string component, string modificationType, Dictionary<string, object> parameters)
    {
        var cascadeRisks = new Dictionary<string, string[]>
        {
            ["memory_core"] = new[] { "consciousness", "learning_system", "personality" },
            ["consciousness"] = new[] { "emotion_engine", "goal_system", "self_model" },
            ["ethical_constraints"] = new[] { "all_systems" }
        };

        if (cascadeRisks.TryGetValue(component.ToLower(), out var affectedSystems))
        {
            if (affectedSystems.Contains("all_systems"))
            {
                return new SafetyCheckItem
                {
                    IsAllowed = false,
                    Risk = RiskLevel.Critical,
                    Message = "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã",
                    Details = "–ö–∞—Å–∫–∞–¥–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π"
                };
            }

            return new SafetyCheckItem
            {
                IsAllowed = true,
                Risk = RiskLevel.Medium,
                Message = "–í–æ–∑–º–æ–∂–Ω—ã –∫–∞—Å–∫–∞–¥–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã",
                Details = $"–ú–æ–≥—É—Ç –±—ã—Ç—å –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã: {string.Join(", ", affectedSystems)}"
            };
        }

        return new SafetyCheckItem
        {
            IsAllowed = true,
            Risk = RiskLevel.Low,
            Message = "–ö–∞—Å–∫–∞–¥–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω—ã",
            Details = "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–º–µ–µ—Ç –Ω–∏–∑–∫—É—é —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å"
        };
    }

    private RiskLevel CalculateOverallRisk(IEnumerable<SafetyCheckItem> checks)
    {
        var maxRisk = checks.Max(c => c.Risk);
        var disallowedCount = checks.Count(c => !c.IsAllowed);

        if (disallowedCount > 0)
            return RiskLevel.Critical;

        return maxRisk;
    }

    private bool DetermineBackupRequirement(ModificationSafetyCheck safetyCheck)
    {
        var safety = _componentSafety.GetValueOrDefault(safetyCheck.Component.ToLower());
        return safety?.RequiresBackup == true || safetyCheck.RiskLevel >= RiskLevel.Medium;
    }

    private async Task<List<string>> GenerateRecommendations(ModificationSafetyCheck safetyCheck)
    {
        var recommendations = new List<string>();

        if (!safetyCheck.IsAllowed)
        {
            recommendations.Add("‚ùå –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã");
        }

        if (safetyCheck.RequiresBackup)
        {
            recommendations.Add("üíæ –°–æ–∑–¥–∞–π—Ç–µ —Ç–æ—á–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–µ–π");
        }

        if (safetyCheck.RiskLevel >= RiskLevel.High)
        {
            recommendations.Add("‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ - –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö");
        }

        if (safetyCheck.UserRole != "Creator" && safetyCheck.RiskLevel >= RiskLevel.Medium)
        {
            recommendations.Add("üë§ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –°–æ–∑–¥–∞—Ç–µ–ª—è");
        }

        if (recommendations.Count == 0)
        {
            recommendations.Add("‚úÖ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è");
        }

        return recommendations;
    }

    private async Task LogSafetyCheck(ModificationSafetyCheck safetyCheck)
    {
        var options = new DbContextOptionsBuilder<AnimaDbContext>()
            .UseSqlite("Data Source=anima.db")
            .Options;
        using var db = new AnimaDbContext(options);

        var logContent = $"SAFETY_CHECK: {safetyCheck.Component} - {safetyCheck.ModificationType} - {(safetyCheck.IsAllowed ? "ALLOWED" : "DENIED")}";
        
        db.Memories.Add(new MemoryEntity
        {
            MemoryType = "safety_check",
            Content = logContent,
            Importance = safetyCheck.IsAllowed ? 6 : 8,
            CreatedAt = safetyCheck.Timestamp,
            InstanceId = Guid.NewGuid().ToString("N"),
            Category = "safety_check"
        });

        await db.SaveChangesAsync();
    }

    private async Task<string> BackupComponentState(string component)
    {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return $"BACKUP_{component}_{DateTime.UtcNow:yyyyMMdd_HHmmss}";
    }

    private async Task<List<string>> GetComponentDependencies(string component)
    {
        var dependencies = new Dictionary<string, string[]>
        {
            ["consciousness"] = new[] { "memory_core", "emotion_engine" },
            ["memory_core"] = new[] { "storage_system" },
            ["emotion_engine"] = new[] { "goal_system", "personality" },
            ["goal_system"] = new[] { "decision_engine" },
            ["personality"] = new[] { "memory_core", "emotion_engine" }
        };

        return dependencies.GetValueOrDefault(component.ToLower(), Array.Empty<string>()).ToList();
    }

    private bool IsDestructiveModification(string modificationType)
    {
        var destructive = new[] { "deletion", "corruption", "disable", "destroy", "erase" };
        return destructive.Any(d => modificationType.ToLower().Contains(d));
    }

    private bool IsDangerousValue(object value)
    {
        if (value == null) return false;
        
        var stringValue = value.ToString()?.ToLower() ?? "";
        var dangerousPatterns = new[] { "delete", "destroy", "corrupt", "hack", "exploit", "bypass" };
        
        return dangerousPatterns.Any(pattern => stringValue.Contains(pattern));
    }
}

/// <summary>
/// –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
/// </summary>
public class ModificationSafetyCheck
{
    public string Component { get; set; } = string.Empty;
    public string ModificationType { get; set; } = string.Empty;
    public string UserRole { get; set; } = string.Empty;
    public DateTime Timestamp { get; set; }
    public bool IsAllowed { get; set; }
    public RiskLevel RiskLevel { get; set; }
    public bool RequiresBackup { get; set; }
    public Dictionary<string, SafetyCheckItem> Checks { get; set; } = new();
    public List<string> Recommendations { get; set; } = new();
}

/// <summary>
/// –≠–ª–µ–º–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
/// </summary>
public class SafetyCheckItem
{
    public bool IsAllowed { get; set; }
    public RiskLevel Risk { get; set; }
    public string Message { get; set; } = string.Empty;
    public string Details { get; set; } = string.Empty;
}

/// <summary>
/// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
/// </summary>
public class ComponentSafety
{
    public int CriticalityLevel { get; set; } // 1-10
    public bool RequiresBackup { get; set; }
    public string[] AllowedModifications { get; set; } = Array.Empty<string>();
    public string[] ForbiddenModifications { get; set; } = Array.Empty<string>();
    public double MaxChangePercentage { get; set; } = 1.0; // 0.0-1.0
}

/// <summary>
/// –£—Ä–æ–≤–Ω–∏ —Ä–∏—Å–∫–∞
/// </summary>
public enum RiskLevel
{
    Low = 1,
    Medium = 2,
    High = 3,
    Critical = 4
}