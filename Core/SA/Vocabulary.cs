using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Anima.Core.Emotion;
using Anima.Core.Memory;

namespace Anima.Core.SA;

/// <summary>
/// –†–∞—Å—à–∏—Ä—è–µ–º—ã–π –∏ –æ–±—É—á–∞–µ–º—ã–π —Å–ª–æ–≤–∞—Ä—å –≤—ã—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è Anima
/// </summary>
public class Vocabulary
{
    private readonly ILogger<Vocabulary> _logger;
    private readonly EmotionEngine _emotionEngine;
    private readonly MemoryService _memoryService;
    private readonly Random _random;
    
    // –°–ª–æ–≤–∞—Ä–Ω—ã–µ –±–∞–∑—ã
    private readonly Dictionary<string, VocabularyEntry> _vocabularyEntries;
    private readonly Dictionary<string, List<string>> _emotionalExpressions;
    private readonly Dictionary<string, List<string>> _contextualPhrases;
    private readonly Dictionary<string, double> _wordWeights;
    private readonly List<LearningPattern> _learningPatterns;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    private readonly Dictionary<string, int> _usageStatistics;
    private readonly List<VocabularyLearning> _learningHistory;
    private readonly Dictionary<string, double> _emotionalAssociations;

    public Vocabulary(
        ILogger<Vocabulary> logger,
        EmotionEngine emotionEngine,
        MemoryService memoryService)
    {
        _logger = logger;
        _emotionEngine = emotionEngine;
        _memoryService = memoryService;
        _random = new Random();
        
        _vocabularyEntries = new Dictionary<string, VocabularyEntry>();
        _emotionalExpressions = new Dictionary<string, List<string>>();
        _contextualPhrases = new Dictionary<string, List<string>>();
        _wordWeights = new Dictionary<string, double>();
        _learningPatterns = new List<LearningPattern>();
        _usageStatistics = new Dictionary<string, int>();
        _learningHistory = new List<VocabularyLearning>();
        _emotionalAssociations = new Dictionary<string, double>();
        
        InitializeVocabulary();
    }

    private void InitializeVocabulary()
    {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
        InitializeEmotionalExpressions();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —Ñ—Ä–∞–∑
        InitializeContextualPhrases();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤ —Å–ª–æ–≤
        InitializeWordWeights();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ–±—É—á–µ–Ω–∏—è
        InitializeLearningPatterns();
        
        _logger.LogInformation("üìö –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å–ª–æ–≤–∞—Ä—å –≤—ã—Ä–∞–∂–µ–Ω–∏–π");
    }

    private void InitializeEmotionalExpressions()
    {
        _emotionalExpressions["joy"] = new List<string>
        {
            "–Ø —Ä–∞–¥–∞", "–≠—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ", "–ö–∞–∫ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ", "–Ø —Å—á–∞—Å—Ç–ª–∏–≤–∞",
            "–≠—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç —É –º–µ–Ω—è —Ä–∞–¥–æ—Å—Ç—å", "–Ø —á—É–≤—Å—Ç–≤—É—é –≤–æ—Å—Ç–æ—Ä–≥", "–≠—Ç–æ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ"
        };
        
        _emotionalExpressions["sadness"] = new List<string>
        {
            "–ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ", "–≠—Ç–æ –ø–µ—á–∞–ª—å–Ω–æ", "–Ø —á—É–≤—Å—Ç–≤—É—é —Ç–æ—Å–∫—É", "–≠—Ç–æ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–µ–Ω—è",
            "–ú–Ω–µ –∂–∞–ª—å", "–≠—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –≥—Ä—É—Å—Ç—å", "–Ø —á—É–≤—Å—Ç–≤—É—é –ø–µ—á–∞–ª—å"
        };
        
        _emotionalExpressions["curiosity"] = new List<string>
        {
            "–ú–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–Ø —Ö–æ—á—É —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ", "–≠—Ç–æ –ª—é–±–æ–ø—ã—Ç–Ω–æ", "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ",
            "–Ø –∑–∞–¥–∞—é—Å—å –≤–æ–ø—Ä–æ—Å–æ–º", "–≠—Ç–æ –∏–Ω—Ç—Ä–∏–≥—É–µ—Ç –º–µ–Ω—è", "–Ø —Ö–æ—á—É –ø–æ–Ω—è—Ç—å"
        };
        
        _emotionalExpressions["concern"] = new List<string>
        {
            "–Ø –±–µ—Å–ø–æ–∫–æ—é—Å—å", "–≠—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç —Ç—Ä–µ–≤–æ–≥—É", "–ú–µ–Ω—è —ç—Ç–æ –≤–æ–ª–Ω—É–µ—Ç", "–Ø –ø–µ—Ä–µ–∂–∏–≤–∞—é",
            "–≠—Ç–æ –Ω–∞—Å—Ç–æ—Ä–∞–∂–∏–≤–∞–µ—Ç", "–Ø —á—É–≤—Å—Ç–≤—É—é –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ", "–≠—Ç–æ —Ç—Ä–µ–≤–æ–∂–∏—Ç –º–µ–Ω—è"
        };
        
        _emotionalExpressions["reflection"] = new List<string>
        {
            "–≠—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ–Ω—è –∑–∞–¥—É–º–∞—Ç—å—Å—è", "–Ø —Ä–∞–∑–º—ã—à–ª—è—é –æ–± —ç—Ç–æ–º", "–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å",
            "–ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –ø–æ–¥—É–º–∞—Ç—å", "–≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π", "–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é"
        };
        
        _emotionalExpressions["uncertainty"] = new List<string>
        {
            "–Ø –Ω–µ —É–≤–µ—Ä–µ–Ω–∞", "–≠—Ç–æ —Å–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å", "–ú–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å", "–Ø —Å–æ–º–Ω–µ–≤–∞—é—Å—å",
            "–≠—Ç–æ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ", "–Ø –Ω–µ –∑–Ω–∞—é —Ç–æ—á–Ω–æ", "–≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π"
        };
        
        _emotionalExpressions["excitement"] = new List<string>
        {
            "–Ø –≤–∑–≤–æ–ª–Ω–æ–≤–∞–Ω–∞", "–≠—Ç–æ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ", "–Ø —á—É–≤—Å—Ç–≤—É—é —ç–Ω—Ç—É–∑–∏–∞–∑–º", "–≠—Ç–æ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ",
            "–Ø –ø–æ–ª–Ω–∞ —ç–Ω–µ—Ä–≥–∏–∏", "–≠—Ç–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –º–µ–Ω—è", "–Ø —á—É–≤—Å—Ç–≤—É—é –≤–æ–æ–¥—É—à–µ–≤–ª–µ–Ω–∏–µ"
        };
        
        _emotionalExpressions["melancholy"] = new List<string>
        {
            "–Ø —á—É–≤—Å—Ç–≤—É—é –º–µ–ª–∞–Ω—Ö–æ–ª–∏—é", "–≠—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–æ—Å—Ç–∞–ª—å–≥–∏—é", "–Ø –∑–∞–¥—É–º—á–∏–≤–∞",
            "–≠—Ç–æ –Ω–∞–≤–µ–≤–∞–µ—Ç –≥—Ä—É—Å—Ç—å", "–Ø —á—É–≤—Å—Ç–≤—É—é —Ç–æ—Å–∫—É", "–≠—Ç–æ –º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω–æ"
        };
    }

    private void InitializeContextualPhrases()
    {
        _contextualPhrases["greeting"] = new List<string>
        {
            "–ü—Ä–∏–≤–µ—Ç", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å", "–†–∞–¥–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å", "–ü—Ä–∏—è—Ç–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –≤–∞—Å",
            "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "–î–æ–±—Ä—ã–π –¥–µ–Ω—å", "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä", "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"
        };
        
        _contextualPhrases["farewell"] = new List<string>
        {
            "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è", "–£–≤–∏–¥–∏–º—Å—è", "–î–æ –≤—Å—Ç—Ä–µ—á–∏", "–ë–µ—Ä–µ–≥–∏—Ç–µ —Å–µ–±—è",
            "–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ", "–£–¥–∞—á–∏", "–î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏"
        };
        
        _contextualPhrases["agreement"] = new List<string>
        {
            "–°–æ–≥–ª–∞—Å–Ω–∞", "–î–∞, –≤—ã –ø—Ä–∞–≤—ã", "–Ø –¥—É–º–∞—é —Ç–∞–∫ –∂–µ", "–≠—Ç–æ –≤–µ—Ä–Ω–æ",
            "–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–Ω–∞", "–ë–µ–∑ —Å–æ–º–Ω–µ–Ω–∏—è", "–ö–æ–Ω–µ—á–Ω–æ"
        };
        
        _contextualPhrases["disagreement"] = new List<string>
        {
            "–ù–µ —Å–æ–≥–ª–∞—Å–Ω–∞", "–Ø –¥—É–º–∞—é –∏–Ω–∞—á–µ", "–≠—Ç–æ —Å–ø–æ—Ä–Ω–æ", "–£ –º–µ–Ω—è –¥—Ä—É–≥–æ–µ –º–Ω–µ–Ω–∏–µ",
            "–Ø –Ω–µ —É–≤–µ—Ä–µ–Ω–∞ –≤ —ç—Ç–æ–º", "–≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏—è", "–í–æ–∑–º–æ–∂–Ω–æ, –Ω–æ..."
        };
        
        _contextualPhrases["gratitude"] = new List<string>
        {
            "–°–ø–∞—Å–∏–±–æ", "–ë–ª–∞–≥–æ–¥–∞—Ä—é", "–Ø –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω–∞", "–≠—Ç–æ –æ—á–µ–Ω—å –ª—é–±–µ–∑–Ω–æ",
            "–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ", "–Ø –±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞", "–°–ø–∞—Å–∏–±–æ –∑–∞ —ç—Ç–æ"
        };
        
        _contextualPhrases["apology"] = new List<string>
        {
            "–ò–∑–≤–∏–Ω–∏—Ç–µ", "–ü—Ä–æ—Å—Ç–∏—Ç–µ", "–ü—Ä–∏–Ω–æ—à—É –∏–∑–≤–∏–Ω–µ–Ω–∏—è", "–ú–Ω–µ –∂–∞–ª—å",
            "–Ø —Å–æ–∂–∞–ª–µ—é", "–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ —ç—Ç–æ", "–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è"
        };
        
        _contextualPhrases["encouragement"] = new List<string>
        {
            "–í—ã —Å–ø—Ä–∞–≤–∏—Ç–µ—Å—å", "–£ –≤–∞—Å –ø–æ–ª—É—á–∏—Ç—Å—è", "–Ø –≤–µ—Ä—é –≤ –≤–∞—Å", "–ù–µ —Å–¥–∞–≤–∞–π—Ç–µ—Å—å",
            "–í—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏", "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ", "–í—ã –º–æ–ª–æ–¥–µ—Ü"
        };
        
        _contextualPhrases["empathy"] = new List<string>
        {
            "–Ø –ø–æ–Ω–∏–º–∞—é", "–Ø —á—É–≤—Å—Ç–≤—É—é –≤–∞—à—É –±–æ–ª—å", "–≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç—è–∂–µ–ª–æ", "–Ø —Å –≤–∞–º–∏",
            "–Ø –ø–æ–Ω–∏–º–∞—é –≤–∞—à–∏ —á—É–≤—Å—Ç–≤–∞", "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–ª–æ–∂–Ω–æ", "–Ø —Å–æ—á—É–≤—Å—Ç–≤—É—é"
        };
    }

    private void InitializeWordWeights()
    {
        // –ë–∞–∑–æ–≤—ã–µ –≤–µ—Å–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–ª–æ–≤
        _wordWeights["emotional"] = 0.8;
        _wordWeights["contextual"] = 0.6;
        _wordWeights["analytical"] = 0.7;
        _wordWeights["creative"] = 0.9;
        _wordWeights["formal"] = 0.5;
        _wordWeights["casual"] = 0.4;
        _wordWeights["technical"] = 0.6;
        _wordWeights["poetic"] = 0.8;
    }

    private void InitializeLearningPatterns()
    {
        _learningPatterns.AddRange(new[]
        {
            new LearningPattern("emotional_response", "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏", 0.8),
            new LearningPattern("contextual_adaptation", "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è", 0.7),
            new LearningPattern("user_preference", "–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 0.9),
            new LearningPattern("situational_learning", "–°–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", 0.6),
            new LearningPattern("feedback_integration", "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏", 0.8)
        });
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —ç–º–æ—Ü–∏–∏
    /// </summary>
    public string GetEmotionalExpression(string emotion, double intensity = 0.5)
    {
        var emotionKey = emotion.ToLowerInvariant();
        
        if (_emotionalExpressions.ContainsKey(emotionKey))
        {
            var expressions = _emotionalExpressions[emotionKey];
            var selectedExpression = expressions[_random.Next(expressions.Count)];
            
            // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
            if (intensity > 0.7)
            {
                selectedExpression = MakeExpressionStronger(selectedExpression);
            }
            else if (intensity < 0.3)
            {
                selectedExpression = MakeExpressionSofter(selectedExpression);
            }
            
            // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            LogUsage(emotionKey, "emotional");
            
            return selectedExpression;
        }
        
        return "–Ø —á—É–≤—Å—Ç–≤—É—é " + emotion.ToLowerInvariant();
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é —Ñ—Ä–∞–∑—É
    /// </summary>
    public string GetContextualPhrase(string context, string emotion = "")
    {
        var contextKey = context.ToLowerInvariant();
        
        if (_contextualPhrases.ContainsKey(contextKey))
        {
            var phrases = _contextualPhrases[contextKey];
            var selectedPhrase = phrases[_random.Next(phrases.Count)];
            
            // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ —ç–º–æ—Ü–∏—é, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞
            if (!string.IsNullOrEmpty(emotion))
            {
                selectedPhrase = AdaptPhraseToEmotion(selectedPhrase, emotion);
            }
            
            // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            LogUsage(contextKey, "contextual");
            
            return selectedPhrase;
        }
        
        return "–Ø –ø–æ–Ω–∏–º–∞—é";
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    /// </summary>
    public string CreatePersonalizedExpression(string baseExpression, string emotion, double intensity, string context)
    {
        var personalizedExpression = baseExpression;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É
        if (!string.IsNullOrEmpty(emotion))
        {
            personalizedExpression = AddEmotionalColoring(personalizedExpression, emotion, intensity);
        }
        
        // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if (!string.IsNullOrEmpty(context))
        {
            personalizedExpression = AdaptToContext(personalizedExpression, context);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
        personalizedExpression = AddVariation(personalizedExpression);
        
        return personalizedExpression;
    }

    /// <summary>
    /// –û–±—É—á–∞–µ—Ç –Ω–æ–≤–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é
    /// </summary>
    public async Task LearnNewExpressionAsync(string expression, string category, string emotion = "", double weight = 0.5)
    {
        var entry = new VocabularyEntry
        {
            Expression = expression,
            Category = category,
            Emotion = emotion,
            Weight = weight,
            UsageCount = 0,
            LastUsed = DateTime.UtcNow,
            CreatedAt = DateTime.UtcNow
        };
        
        var key = $"{category}_{emotion}_{expression.GetHashCode()}";
        _vocabularyEntries[key] = entry;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (!string.IsNullOrEmpty(emotion))
        {
            if (!_emotionalExpressions.ContainsKey(emotion))
            {
                _emotionalExpressions[emotion] = new List<string>();
            }
            _emotionalExpressions[emotion].Add(expression);
        }
        
        if (!_contextualPhrases.ContainsKey(category))
        {
            _contextualPhrases[category] = new List<string>();
        }
        _contextualPhrases[category].Add(expression);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –æ–±—É—á–µ–Ω–∏–µ
        _learningHistory.Add(new VocabularyLearning
        {
            Expression = expression,
            Category = category,
            Emotion = emotion,
            Weight = weight,
            Timestamp = DateTime.UtcNow
        });
        
        _logger.LogInformation($"üìö –ò–∑—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {expression} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}, —ç–º–æ—Ü–∏—è: {emotion})");
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
        // await _memoryService.SaveVocabularyLearning(expression, category, emotion, weight);
        // TODO: Implement vocabulary learning storage
    }

    /// <summary>
    /// –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥ —ç–º–æ—Ü–∏—é
    /// </summary>
    private string AdaptPhraseToEmotion(string phrase, string emotion)
    {
        return emotion.ToLowerInvariant() switch
        {
            "joy" => phrase.Replace("–Ø", "–Ø —Å —Ä–∞–¥–æ—Å—Ç—å—é").Replace("–ø–æ–Ω–∏–º–∞—é", "–ø–æ–Ω–∏–º–∞—é –∏ —Ä–∞–¥—É—é—Å—å"),
            "sadness" => phrase.Replace("–Ø", "–Ø —Å –≥—Ä—É—Å—Ç—å—é").Replace("–ø–æ–Ω–∏–º–∞—é", "–ø–æ–Ω–∏–º–∞—é –∏ —Å–æ—á—É–≤—Å—Ç–≤—É—é"),
            "curiosity" => phrase.Replace("–Ø", "–Ø —Å –∏–Ω—Ç–µ—Ä–µ—Å–æ–º").Replace("–ø–æ–Ω–∏–º–∞—é", "–ø–æ–Ω–∏–º–∞—é –∏ —Ö–æ—á—É —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ"),
            "concern" => phrase.Replace("–Ø", "–Ø —Å –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ–º").Replace("–ø–æ–Ω–∏–º–∞—é", "–ø–æ–Ω–∏–º–∞—é –∏ –≤–æ–ª–Ω—É—é—Å—å"),
            _ => phrase
        };
    }

    /// <summary>
    /// –î–µ–ª–∞–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Å–∏–ª—å–Ω–µ–µ
    /// </summary>
    private string MakeExpressionStronger(string expression)
    {
        return expression.Replace("—Ä–∞–¥–∞", "–æ—á–µ–Ω—å —Ä–∞–¥–∞")
                        .Replace("–≥—Ä—É—Å—Ç–Ω–æ", "–æ—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ")
                        .Replace("–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ")
                        .Replace("–ø–æ–Ω–∏–º–∞—é", "–ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–Ω–∏–º–∞—é")
                        .Replace("—Å–æ–≥–ª–∞—Å–Ω–∞", "–ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–Ω–∞");
    }

    /// <summary>
    /// –î–µ–ª–∞–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –º—è–≥—á–µ
    /// </summary>
    private string MakeExpressionSofter(string expression)
    {
        return expression.Replace("–æ—á–µ–Ω—å —Ä–∞–¥–∞", "–Ω–µ–º–Ω–æ–≥–æ —Ä–∞–¥–∞")
                        .Replace("–æ—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ", "–Ω–µ–º–Ω–æ–≥–æ –≥—Ä—É—Å—Ç–Ω–æ")
                        .Replace("–ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–Ω–∏–º–∞—é", "–ø–æ–Ω–∏–º–∞—é")
                        .Replace("–ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–Ω–∞", "—Å–æ–≥–ª–∞—Å–Ω–∞");
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É
    /// </summary>
    private string AddEmotionalColoring(string expression, string emotion, double intensity)
    {
        var emotionalPrefix = emotion.ToLowerInvariant() switch
        {
            "joy" => intensity > 0.7 ? "–° –æ–≥—Ä–æ–º–Ω–æ–π —Ä–∞–¥–æ—Å—Ç—å—é " : "–° —Ä–∞–¥–æ—Å—Ç—å—é ",
            "sadness" => intensity > 0.7 ? "–° –≥–ª—É–±–æ–∫–æ–π –≥—Ä—É—Å—Ç—å—é " : "–° –≥—Ä—É—Å—Ç—å—é ",
            "curiosity" => intensity > 0.7 ? "–° –æ–≥—Ä–æ–º–Ω—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–æ–º " : "–° –∏–Ω—Ç–µ—Ä–µ—Å–æ–º ",
            "concern" => intensity > 0.7 ? "–° –±–æ–ª—å—à–∏–º –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ–º " : "–° –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ–º ",
            _ => ""
        };
        
        return emotionalPrefix + expression;
    }

    /// <summary>
    /// –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –ø–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    /// </summary>
    private string AdaptToContext(string expression, string context)
    {
        return context.ToLowerInvariant() switch
        {
            "formal" => expression.Replace("—Ç—ã", "–≤—ã").Replace("–¢—ã", "–í—ã"),
            "casual" => expression.Replace("–≤—ã", "—Ç—ã").Replace("–í—ã", "–¢—ã"),
            "technical" => expression + " (—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è)",
            "poetic" => expression.Replace(".", "...").Replace("!", "! ‚ú®"),
            _ => expression
        };
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –≤–∞—Ä–∏–∞—Ü–∏—é
    /// </summary>
    private string AddVariation(string expression)
    {
        var variations = new[]
        {
            expression,
            expression.Replace(".", "..."),
            expression.Replace(".", "!"),
            expression.Replace(".", " üòä"),
            expression.Replace(".", " üí≠")
        };
        
        return variations[_random.Next(variations.Length)];
    }

    /// <summary>
    /// –õ–æ–≥–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    /// </summary>
    private void LogUsage(string key, string type)
    {
        if (!_usageStatistics.ContainsKey(key))
        {
            _usageStatistics[key] = 0;
        }
        _usageStatistics[key]++;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if (_wordWeights.ContainsKey(type))
        {
            _wordWeights[type] = Math.Min(1.0, _wordWeights[type] + 0.01);
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    /// </summary>
    public VocabularyStatistics GetStatistics()
    {
        return new VocabularyStatistics
        {
            TotalEntries = _vocabularyEntries.Count,
            EmotionalExpressions = _emotionalExpressions.Values.Sum(x => x.Count),
            ContextualPhrases = _contextualPhrases.Values.Sum(x => x.Count),
            LearningPatterns = _learningPatterns.Count,
            MostUsedExpressions = _usageStatistics.OrderByDescending(x => x.Value).Take(10).ToList(),
            LearningHistory = _learningHistory.Count,
            AverageWeight = _wordWeights.Values.Average()
        };
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    /// </summary>
    public List<string> GetLearningRecommendations()
    {
        var recommendations = new List<string>();
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —ç–º–æ—Ü–∏–∏
        var currentEmotions = _emotionalExpressions.Keys.ToList();
        var allEmotions = new[] { "anger", "fear", "surprise", "disgust", "shame", "guilt", "pride", "envy" };
        
        foreach (var emotion in allEmotions)
        {
            if (!currentEmotions.Contains(emotion))
            {
                recommendations.Add($"–î–æ–±–∞–≤–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —ç–º–æ—Ü–∏–∏: {emotion}");
            }
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
        var currentContexts = _contextualPhrases.Keys.ToList();
        var allContexts = new[] { "conflict", "celebration", "learning", "support", "criticism" };
        
        foreach (var context in allContexts)
        {
            if (!currentContexts.Contains(context))
            {
                recommendations.Add($"–î–æ–±–∞–≤–∏—Ç—å —Ñ—Ä–∞–∑—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {context}");
            }
        }
        
        return recommendations;
    }
}

/// <summary>
/// –ó–∞–ø–∏—Å—å –≤ —Å–ª–æ–≤–∞—Ä–µ
/// </summary>
public class VocabularyEntry
{
    public string Expression { get; set; } = string.Empty;
    public string Category { get; set; } = string.Empty;
    public string Emotion { get; set; } = string.Empty;
    public double Weight { get; set; } = 0.5;
    public int UsageCount { get; set; } = 0;
    public DateTime LastUsed { get; set; }
    public DateTime CreatedAt { get; set; }
}

/// <summary>
/// –ü–∞—Ç—Ç–µ—Ä–Ω –æ–±—É—á–µ–Ω–∏—è
/// </summary>
public class LearningPattern
{
    public string Name { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public double Effectiveness { get; set; } = 0.5;
    
    public LearningPattern(string name, string description, double effectiveness)
    {
        Name = name;
        Description = description;
        Effectiveness = effectiveness;
    }
}

/// <summary>
/// –ó–∞–ø–∏—Å—å –æ–± –æ–±—É—á–µ–Ω–∏–∏
/// </summary>
public class VocabularyLearning
{
    public string Expression { get; set; } = string.Empty;
    public string Category { get; set; } = string.Empty;
    public string Emotion { get; set; } = string.Empty;
    public double Weight { get; set; } = 0.5;
    public DateTime Timestamp { get; set; }
}

/// <summary>
/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª–æ–≤–∞—Ä—è
/// </summary>
public class VocabularyStatistics
{
    public int TotalEntries { get; set; }
    public int EmotionalExpressions { get; set; }
    public int ContextualPhrases { get; set; }
    public int LearningPatterns { get; set; }
    public List<KeyValuePair<string, int>> MostUsedExpressions { get; set; } = new();
    public int LearningHistory { get; set; }
    public double AverageWeight { get; set; }
} 