using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;

namespace Anima.AGI.Core.SA;

/// <summary>
/// –ñ—É—Ä–Ω–∞–ª –º—ã—Å–ª–µ–π –∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π Anima
/// </summary>
public class ThoughtLog
{
    private readonly ILogger<ThoughtLog> _logger;
    private readonly List<Thought> _thoughts;
    private readonly object _lockObject = new object();

    public ThoughtLog(ILogger<ThoughtLog>? logger = null)
    {
        _logger = logger;
        _thoughts = new List<Thought>();
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º—ã—Å–ª–∏
    /// </summary>
    public void AddThought(string content, string type = "general", string category = "internal", double confidence = 0.5)
    {
        lock (_lockObject)
        {
            var thought = new Thought
            {
                Id = Guid.NewGuid(),
                Content = content,
                Type = type,
                Category = category,
                Confidence = confidence,
                Timestamp = DateTime.UtcNow,
                Source = "internal"
            };

            _thoughts.Add(thought);
            _logger?.LogDebug($"üí≠ –î–æ–±–∞–≤–ª–µ–Ω–∞ –º—ã—Å–ª—å: {content.Substring(0, Math.Min(50, content.Length))}...");
        }
    }

    /// <summary>
    /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
    /// </summary>
    public void LogIntent(ParsedIntent intent)
    {
        var thought = new Thought
        {
            Id = Guid.NewGuid(),
            Content = $"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ: {intent.Type} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {intent.Confidence:F2})",
            Type = "intent_recognition",
            Category = "analysis",
            Confidence = intent.Confidence,
            Timestamp = DateTime.UtcNow,
            Source = "intent_parser",
            Reasoning = $"–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞: {intent.RawText}"
        };

        lock (_lockObject)
        {
            _thoughts.Add(thought);
        }

        _logger?.LogDebug($"üéØ –ó–∞–ø–∏—Å–∞–Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ: {intent.Type}");
    }

    /// <summary>
    /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–∏
    /// </summary>
    public void LogEmotion(string emotion, double intensity, string trigger = null)
    {
        var thought = new Thought
        {
            Id = Guid.NewGuid(),
            Content = $"–ò—Å–ø—ã—Ç—ã–≤–∞—é —ç–º–æ—Ü–∏—é: {emotion} (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {intensity:F2})",
            Type = "emotion",
            Category = "emotional_state",
            Confidence = intensity,
            Timestamp = DateTime.UtcNow,
            Source = "emotion_engine",
            Reasoning = trigger ?? "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —ç–º–æ—Ü–∏–π"
        };

        lock (_lockObject)
        {
            _thoughts.Add(thought);
        }

        _logger?.LogDebug($"üòä –ó–∞–ø–∏—Å–∞–Ω–∞ —ç–º–æ—Ü–∏—è: {emotion}");
    }

    /// <summary>
    /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞
    /// </summary>
    public void LogIntrospection(string insight, double confidence = 0.5)
    {
        var thought = new Thought
        {
            Id = Guid.NewGuid(),
            Content = insight,
            Type = "introspection",
            Category = "self_analysis",
            Confidence = confidence,
            Timestamp = DateTime.UtcNow,
            Source = "introspection_engine"
        };

        lock (_lockObject)
        {
            _thoughts.Add(thought);
        }

        _logger?.LogDebug($"üîç –ó–∞–ø–∏—Å–∞–Ω –∏–Ω—Å–∞–π—Ç: {insight.Substring(0, Math.Min(50, insight.Length))}...");
    }

    /// <summary>
    /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è
    /// </summary>
    public void LogLearning(string concept, string source = "interaction")
    {
        var thought = new Thought
        {
            Id = Guid.NewGuid(),
            Content = $"–ò–∑—É—á–∞—é: {concept}",
            Type = "learning",
            Category = "knowledge_acquisition",
            Confidence = 0.7,
            Timestamp = DateTime.UtcNow,
            Source = source
        };

        lock (_lockObject)
        {
            _thoughts.Add(thought);
        }

        _logger?.LogDebug($"üìö –ó–∞–ø–∏—Å–∞–Ω–æ –æ–±—É—á–µ–Ω–∏–µ: {concept}");
    }

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º—ã—Å–ª–µ–π
    /// </summary>
    public List<Thought> GetRecentThoughts(int count = 10)
    {
        lock (_lockObject)
        {
            return _thoughts
                .OrderByDescending(t => t.Timestamp)
                .Take(count)
                .ToList();
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –º—ã—Å–ª–µ–π –ø–æ —Ç–∏–ø—É
    /// </summary>
    public List<Thought> GetThoughtsByType(string type, int count = 20)
    {
        lock (_lockObject)
        {
            return _thoughts
                .Where(t => t.Type == type)
                .OrderByDescending(t => t.Timestamp)
                .Take(count)
                .ToList();
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –º—ã—Å–ª–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    /// </summary>
    public List<Thought> GetThoughtsByCategory(string category, int count = 20)
    {
        lock (_lockObject)
        {
            return _thoughts
                .Where(t => t.Category == category)
                .OrderByDescending(t => t.Timestamp)
                .Take(count)
                .ToList();
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º—ã—Å–ª–µ–π
    /// </summary>
    public Dictionary<string, object> GetThoughtStats()
    {
        lock (_lockObject)
        {
            return new Dictionary<string, object>
            {
                ["total_thoughts"] = _thoughts.Count,
                ["thoughts_by_type"] = _thoughts.GroupBy(t => t.Type)
                    .ToDictionary(g => g.Key, g => g.Count()),
                ["thoughts_by_category"] = _thoughts.GroupBy(t => t.Category)
                    .ToDictionary(g => g.Key, g => g.Count()),
                ["average_confidence"] = _thoughts.Any() ? _thoughts.Average(t => t.Confidence) : 0.0,
                ["oldest_thought"] = _thoughts.Any() ? _thoughts.Min(t => t.Timestamp) : DateTime.UtcNow,
                ["newest_thought"] = _thoughts.Any() ? _thoughts.Max(t => t.Timestamp) : DateTime.UtcNow
            };
        }
    }

    /// <summary>
    /// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –º—ã—Å–ª–µ–π
    /// </summary>
    public void CleanupOldThoughts(int maxThoughts = 1000)
    {
        lock (_lockObject)
        {
            if (_thoughts.Count > maxThoughts)
            {
                var toRemove = _thoughts.Count - maxThoughts;
                _thoughts.RemoveRange(0, toRemove);
                _logger?.LogInformation($"üßπ –£–¥–∞–ª–µ–Ω–æ {toRemove} —Å—Ç–∞—Ä—ã—Ö –º—ã—Å–ª–µ–π");
            }
        }
    }

    /// <summary>
    /// –≠–∫—Å–ø–æ—Ä—Ç –º—ã—Å–ª–µ–π –≤ JSON
    /// </summary>
    public string ExportThoughts()
    {
        lock (_lockObject)
        {
            var exportData = new
            {
                ExportDate = DateTime.UtcNow,
                TotalThoughts = _thoughts.Count,
                Thoughts = _thoughts.Select(t => new
                {
                    t.Id,
                    t.Content,
                    t.Type,
                    t.Category,
                    t.Confidence,
                    t.Timestamp,
                    t.Source,
                    t.Reasoning
                }).ToList()
            };

            return System.Text.Json.JsonSerializer.Serialize(exportData, new System.Text.Json.JsonSerializerOptions
            {
                WriteIndented = true
            });
        }
    }
}

/// <summary>
/// –ú—ã—Å–ª—å –≤ –∂—É—Ä–Ω–∞–ª–µ
/// </summary>
public class Thought
{
    public Guid Id { get; set; }
    public string Content { get; set; }
    public string Type { get; set; }
    public string Category { get; set; }
    public double Confidence { get; set; }
    public DateTime Timestamp { get; set; }
    public string Source { get; set; }
    public string Reasoning { get; set; }
    public string Decision { get; set; }
    public string Tags { get; set; }
}

/// <summary>
/// –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
/// </summary>
public class ParsedIntent
{
    public string Type { get; set; }
    public double Confidence { get; set; }
    public string RawText { get; set; }
    public Dictionary<string, string> Arguments { get; set; } = new Dictionary<string, string>();
} 