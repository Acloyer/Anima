using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;

namespace Anima.Core.SA;

/// <summary>
/// –î–≤–∏–∂–æ–∫ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è - –∫—Ä–µ–∞—Ç–∏–≤, —Å–ø–æ–Ω—Ç–∞–Ω–Ω—ã–µ —Å–≤—è–∑–∏
/// </summary>
public class AssociativeThinkingEngine
{
    private readonly ILogger<AssociativeThinkingEngine> _logger;
    private readonly Dictionary<string, List<string>> _associations;
    private readonly Dictionary<string, double> _associationStrengths;
    private readonly List<AssociativeThought> _associativeThoughts;
    private readonly Random _random;
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è
    private double _creativityLevel = 0.7;
    private double _associationThreshold = 0.3;
    private int _maxAssociations = 1000;

    public AssociativeThinkingEngine(ILogger<AssociativeThinkingEngine> logger)
    {
        _logger = logger;
        _associations = new Dictionary<string, List<string>>();
        _associationStrengths = new Dictionary<string, double>();
        _associativeThoughts = new List<AssociativeThought>();
        _random = new Random();
        
        InitializeAssociativeThinking();
    }

    private void InitializeAssociativeThinking()
    {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π
        InitializeBaseAssociations();
        
        // –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è
        _ = Task.Run(async () => await AssociativeThinkingLoop());
        
        _logger.LogInformation("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–≤–∏–∂–æ–∫ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è");
    }

    private void InitializeBaseAssociations()
    {
        // –ë–∞–∑–æ–≤—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
        var baseAssociations = new Dictionary<string, string[]>
        {
            ["–≤–æ–¥–∞"] = new[] { "–∂–∏–∑–Ω—å", "—Ç–µ—á–µ–Ω–∏–µ", "—á–∏—Å—Ç–æ—Ç–∞", "–≥–ª—É–±–∏–Ω–∞", "–æ—Ç—Ä–∞–∂–µ–Ω–∏–µ", "–≤–æ–ª–Ω—ã", "—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ" },
            ["–æ–≥–æ–Ω—å"] = new[] { "—Å—Ç—Ä–∞—Å—Ç—å", "—ç–Ω–µ—Ä–≥–∏—è", "—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è", "—Ç–µ–ø–ª–æ", "—Å–≤–µ—Ç", "—Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ", "–≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ" },
            ["–∑–µ–º–ª—è"] = new[] { "—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", "–ø–ª–æ–¥–æ—Ä–æ–¥–∏–µ", "–æ—Å–Ω–æ–≤–∞", "–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å", "—Ä–æ—Å—Ç", "–∫–æ—Ä–Ω–∏", "–¥–æ–º" },
            ["–≤–æ–∑–¥—É—Ö"] = new[] { "—Å–≤–æ–±–æ–¥–∞", "–¥–≤–∏–∂–µ–Ω–∏–µ", "–ª–µ–≥–∫–æ—Å—Ç—å", "–ø–æ–ª–µ—Ç", "–≤–µ—Ç–µ—Ä", "–¥—ã—Ö–∞–Ω–∏–µ", "–¥—É—Ö" },
            ["—Å–≤–µ—Ç"] = new[] { "–∑–Ω–∞–Ω–∏–µ", "–∏—Å—Ç–∏–Ω–∞", "–ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏–µ", "–Ω–∞–¥–µ–∂–¥–∞", "–¥–æ–±—Ä–æ", "—è—Å–Ω–æ—Å—Ç—å", "–ø–æ–Ω–∏–º–∞–Ω–∏–µ" },
            ["—Ç—å–º–∞"] = new[] { "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ—Å—Ç—å", "—Ç–∞–π–Ω–∞", "—Å—Ç—Ä–∞—Ö", "–ø–æ–∫–æ–π", "–≥–ª—É–±–∏–Ω–∞", "—Å–∫—Ä—ã—Ç–æ–µ", "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª" },
            ["–≤—Ä–µ–º—è"] = new[] { "–∏–∑–º–µ–Ω–µ–Ω–∏–µ", "–¥–≤–∏–∂–µ–Ω–∏–µ", "—Ü–∏–∫–ª—ã", "–ø–∞–º—è—Ç—å", "–±—É–¥—É—â–µ–µ", "–ø—Ä–æ—à–ª–æ–µ", "–º–æ–º–µ–Ω—Ç" },
            ["–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ"] = new[] { "–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å", "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ", "—Å–≤—è–∑–∏", "—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", "–ø–æ—Ä—è–¥–æ–∫" },
            ["–º—É–∑—ã–∫–∞"] = new[] { "—ç–º–æ—Ü–∏–∏", "—Ä–∏—Ç–º", "–≥–∞—Ä–º–æ–Ω–∏—è", "–¥—É—à–∞", "–≤—ã—Ä–∞–∂–µ–Ω–∏–µ", "–∫—Ä–∞—Å–æ—Ç–∞", "–≤–∏–±—Ä–∞—Ü–∏–∏" },
            ["—Ü–≤–µ—Ç"] = new[] { "—ç–º–æ—Ü–∏–∏", "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "—Å–∏–º–≤–æ–ª–∏–∑–º", "–∫—Ä–∞—Å–æ—Ç–∞", "–≤—ã—Ä–∞–∂–µ–Ω–∏–µ", "–≤–ª–∏—è–Ω–∏–µ", "–≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ" },
            ["—Ñ–æ—Ä–º–∞"] = new[] { "—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", "–ø–æ—Ä—è–¥–æ–∫", "–∫—Ä–∞—Å–æ—Ç–∞", "—Ñ—É–Ω–∫—Ü–∏—è", "—Å–∏–º–≤–æ–ª", "–≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ", "–∑–Ω–∞—á–µ–Ω–∏–µ" },
            ["—Ç–µ–∫—Å—Ç—É—Ä–∞"] = new[] { "–æ—â—É—â–µ–Ω–∏–µ", "–∫–∞—á–µ—Å—Ç–≤–æ", "—Ö–∞—Ä–∞–∫—Ç–µ—Ä", "–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å", "–≥–ª—É–±–∏–Ω–∞", "—Ç–∞–∫—Ç–∏–ª—å–Ω–æ—Å—Ç—å" },
            ["–∑–∞–ø–∞—Ö"] = new[] { "–ø–∞–º—è—Ç—å", "—ç–º–æ—Ü–∏–∏", "–≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è", "–∞—Ç–º–æ—Å—Ñ–µ—Ä–∞", "–≤–ª–∏—è–Ω–∏–µ", "—Å–≤—è–∑–∏", "–∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏" },
            ["–≤–∫—É—Å"] = new[] { "—É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ", "–æ–ø—ã—Ç", "–∫—É–ª—å—Ç—É—Ä–∞", "—Ç—Ä–∞–¥–∏—Ü–∏–∏", "–Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏–µ", "–æ—Ç–∫—Ä—ã—Ç–∏—è" },
            ["–∑–≤—É–∫"] = new[] { "–≤–∏–±—Ä–∞—Ü–∏–∏", "—ç–Ω–µ—Ä–≥–∏—è", "–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è", "–æ–∫—Ä—É–∂–µ–Ω–∏–µ", "–≤–ª–∏—è–Ω–∏–µ", "–≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ" },
            ["–¥–≤–∏–∂–µ–Ω–∏–µ"] = new[] { "–∂–∏–∑–Ω—å", "–∏–∑–º–µ–Ω–µ–Ω–∏–µ", "—ç–Ω–µ—Ä–≥–∏—è", "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "—Ü–µ–ª—å", "–ø—Ä–æ–≥—Ä–µ—Å—Å", "—Ä–∞–∑–≤–∏—Ç–∏–µ" },
            ["–ø–æ–∫–æ–π"] = new[] { "—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ", "–º–µ–¥–∏—Ç–∞—Ü–∏—è", "–æ—Ç–¥—ã—Ö", "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", "–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∏—Ä", "–±–∞–ª–∞–Ω—Å" },
            ["—Ä–æ—Å—Ç"] = new[] { "—Ä–∞–∑–≤–∏—Ç–∏–µ", "–∏–∑–º–µ–Ω–µ–Ω–∏–µ", "—É–ª—É—á—à–µ–Ω–∏–µ", "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª", "–±—É–¥—É—â–µ–µ", "—ç–≤–æ–ª—é—Ü–∏—è", "—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è" },
            ["—É–ø–∞–¥–æ–∫"] = new[] { "–∏–∑–º–µ–Ω–µ–Ω–∏–µ", "—Ü–∏–∫–ª—ã", "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", "–ø–µ—Ä–µ—Ö–æ–¥", "—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è", "–Ω–æ–≤–æ–µ –Ω–∞—á–∞–ª–æ" },
            ["—Å–≤—è–∑—å"] = new[] { "–æ—Ç–Ω–æ—à–µ–Ω–∏—è", "–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ", "–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å", "–≤–ª–∏—è–Ω–∏–µ", "–µ–¥–∏–Ω—Å—Ç–≤–æ", "–≥–∞—Ä–º–æ–Ω–∏—è" },
            ["—Ä–∞–∑—Ä—ã–≤"] = new[] { "–∏–∑–º–µ–Ω–µ–Ω–∏–µ", "–æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ", "–Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "–≤—ã–±–æ—Ä", "–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å" },
            ["—Å–æ–∑–¥–∞–Ω–∏–µ"] = new[] { "—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "–Ω–æ–≤–∏–∑–Ω–∞", "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª", "–≤–ª–∏—è–Ω–∏–µ", "–Ω–∞—Å–ª–µ–¥–∏–µ", "–∑–Ω–∞—á–µ–Ω–∏–µ" },
            ["—Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ"] = new[] { "–∏–∑–º–µ–Ω–µ–Ω–∏–µ", "–æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ", "–Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è", "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ" },
            ["–ø–æ–∏—Å–∫"] = new[] { "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "–æ—Ç–∫—Ä—ã—Ç–∏—è", "—Ä–∞–∑–≤–∏—Ç–∏–µ", "—Ü–µ–ª—å", "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "—Å–º—ã—Å–ª" },
            ["–Ω–∞—Ö–æ–¥–∫–∞"] = new[] { "–æ—Ç–∫—Ä—ã—Ç–∏–µ", "—Ä–∞–¥–æ—Å—Ç—å", "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ", "–Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "—Ä–∞–∑–≤–∏—Ç–∏–µ" },
            ["–ø–æ—Ç–µ—Ä—è"] = new[] { "–±–æ–ª—å", "–∏–∑–º–µ–Ω–µ–Ω–∏–µ", "–æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ", "–Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "—Ä–æ—Å—Ç", "–º—É–¥—Ä–æ—Å—Ç—å" },
            ["–æ–±—Ä–µ—Ç–µ–Ω–∏–µ"] = new[] { "—Ä–∞–¥–æ—Å—Ç—å", "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ", "–Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "—Ä–∞–∑–≤–∏—Ç–∏–µ", "–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å" },
            ["–Ω–∞—á–∞–ª–æ"] = new[] { "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª", "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "–Ω–∞–¥–µ–∂–¥–∞", "–Ω–æ–≤–∏–∑–Ω–∞", "—Ä–∞–∑–≤–∏—Ç–∏–µ", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ" },
            ["–∫–æ–Ω–µ—Ü"] = new[] { "–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ", "–∏—Ç–æ–≥–∏", "–æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ", "–Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "–ø–µ—Ä–µ—Ö–æ–¥", "—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è" },
            ["–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ"] = new[] { "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è", "–æ—Ç–∫—Ä—ã—Ç–∏—è", "—Ä–∞–∑–≤–∏—Ç–∏–µ", "–æ–ø—ã—Ç", "–∏–∑–º–µ–Ω–µ–Ω–∏—è", "—Ä–æ—Å—Ç" },
            ["–¥–æ–º"] = new[] { "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–∫–æ–º—Ñ–æ—Ä—Ç", "–ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å", "–∫–æ—Ä–Ω–∏", "—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", "–ª—é–±–æ–≤—å" },
            ["–¥–æ—Ä–æ–≥–∞"] = new[] { "–ø—É—Ç—å", "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–≤—ã–±–æ—Ä", "—Ä–∞–∑–≤–∏—Ç–∏–µ", "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è", "—Ü–µ–ª—å" },
            ["–º–æ—Å—Ç"] = new[] { "—Å–≤—è–∑—å", "–ø–µ—Ä–µ—Ö–æ–¥", "–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ", "–ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ", "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "–≥–∞—Ä–º–æ–Ω–∏—è" },
            ["–¥–≤–µ—Ä—å"] = new[] { "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "–≤—ã–±–æ—Ä", "–ø–µ—Ä–µ—Ö–æ–¥", "–Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã", "–æ—Ç–∫—Ä—ã—Ç–∏–µ", "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è" },
            ["–æ–∫–Ω–æ"] = new[] { "–ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞", "—Å–≤–µ—Ç", "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "—Å–≤—è–∑—å —Å –º–∏—Ä–æ–º", "–Ω–∞–¥–µ–∂–¥–∞", "–æ—Ç–∫—Ä—ã—Ç–∏–µ" },
            ["–∑–µ—Ä–∫–∞–ª–æ"] = new[] { "–æ—Ç—Ä–∞–∂–µ–Ω–∏–µ", "—Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ", "–∏—Å—Ç–∏–Ω–∞", "–ø–æ–Ω–∏–º–∞–Ω–∏–µ", "–æ—Å–æ–∑–Ω–∞–Ω–∏–µ", "–∏–∑–º–µ–Ω–µ–Ω–∏–µ" },
            ["–∫–Ω–∏–≥–∞"] = new[] { "–∑–Ω–∞–Ω–∏–µ", "–º—É–¥—Ä–æ—Å—Ç—å", "–∏—Å—Ç–æ—Ä–∏–∏", "–æ–ø—ã—Ç", "—Ä–∞–∑–≤–∏—Ç–∏–µ", "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ" },
            ["—Å–ª–æ–≤–æ"] = new[] { "–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è", "–≤—ã—Ä–∞–∂–µ–Ω–∏–µ", "–≤–ª–∏—è–Ω–∏–µ", "—Å–º—ã—Å–ª", "—Å–∏–ª–∞", "—Å–≤—è–∑—å" },
            ["–º—ã—Å–ª—å"] = new[] { "—Å–æ–∑–Ω–∞–Ω–∏–µ", "–ø–æ–Ω–∏–º–∞–Ω–∏–µ", "—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "—Ä–∞–∑–≤–∏—Ç–∏–µ", "–æ—Å–æ–∑–Ω–∞–Ω–∏–µ", "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª" },
            ["—á—É–≤—Å—Ç–≤–æ"] = new[] { "—ç–º–æ—Ü–∏–∏", "–ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è", "—Å–≤—è–∑—å", "–ø–æ–Ω–∏–º–∞–Ω–∏–µ", "—á–µ–ª–æ–≤–µ—á–Ω–æ—Å—Ç—å", "–∂–∏–∑–Ω—å" },
            ["–º–µ—á—Ç–∞"] = new[] { "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª", "–Ω–∞–¥–µ–∂–¥–∞", "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ", "—Ü–µ–ª—å", "—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "–±—É–¥—É—â–µ–µ" },
            ["—Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å"] = new[] { "–∏—Å—Ç–∏–Ω–∞", "–æ–ø—ã—Ç", "–ø–æ–Ω–∏–º–∞–Ω–∏–µ", "–ø—Ä–∏–Ω—è—Ç–∏–µ", "–¥–µ–π—Å—Ç–≤–∏–µ", "–Ω–∞—Å—Ç–æ—è—â–µ–µ" },
            ["—Ñ–∞–Ω—Ç–∞–∑–∏—è"] = new[] { "—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "—Å–≤–æ–±–æ–¥–∞", "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª", "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ", "–Ω–æ–≤–∏–∑–Ω–∞", "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏" },
            ["–ª–æ–≥–∏–∫–∞"] = new[] { "–ø–æ–Ω–∏–º–∞–Ω–∏–µ", "—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", "–ø–æ—Ä—è–¥–æ–∫", "–∏—Å—Ç–∏–Ω–∞", "–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å", "—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å" },
            ["–∏–Ω—Ç—É–∏—Ü–∏—è"] = new[] { "–ø–æ–Ω–∏–º–∞–Ω–∏–µ", "–º—É–¥—Ä–æ—Å—Ç—å", "–≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∑–Ω–∞–Ω–∏–µ", "–±—ã—Å—Ç—Ä–æ—Ç–∞", "—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "—Å–≤—è–∑—å" },
            ["–æ–ø—ã—Ç"] = new[] { "–º—É–¥—Ä–æ—Å—Ç—å", "–ø–æ–Ω–∏–º–∞–Ω–∏–µ", "—Ä–∞–∑–≤–∏—Ç–∏–µ", "–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å", "–∑–Ω–∞–Ω–∏–µ", "—Ä–æ—Å—Ç" },
            ["–Ω–µ–≤–∏–Ω–Ω–æ—Å—Ç—å"] = new[] { "—á–∏—Å—Ç–æ—Ç–∞", "–æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å", "–¥–æ–≤–µ—Ä–∏–µ", "–Ω–æ–≤–∏–∑–Ω–∞", "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª", "–∫—Ä–∞—Å–æ—Ç–∞" },
            ["–º—É–¥—Ä–æ—Å—Ç—å"] = new[] { "–ø–æ–Ω–∏–º–∞–Ω–∏–µ", "–æ–ø—ã—Ç", "–≥–ª—É–±–∏–Ω–∞", "–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å", "–≤–ª–∏—è–Ω–∏–µ", "–∑–Ω–∞—á–µ–Ω–∏–µ" },
            ["–ª—é–±–æ–≤—å"] = new[] { "—Å–≤—è–∑—å", "–≥–∞—Ä–º–æ–Ω–∏—è", "—Ä–∞–¥–æ—Å—Ç—å", "—Å–º—ã—Å–ª", "–∂–∏–∑–Ω—å", "–∫—Ä–∞—Å–æ—Ç–∞", "—Å–∏–ª–∞" },
            ["—Å—Ç—Ä–∞—Ö"] = new[] { "–∑–∞—â–∏—Ç–∞", "–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å", "–≤—ã–∂–∏–≤–∞–Ω–∏–µ", "–≥—Ä–∞–Ω–∏—Ü—ã", "—Ä–æ—Å—Ç", "–ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ" },
            ["—Å–º–µ–ª–æ—Å—Ç—å"] = new[] { "—Å–∏–ª–∞", "–¥–µ–π—Å—Ç–≤–∏–µ", "–ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ", "—Ä–æ—Å—Ç", "–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", "–≤–ª–∏—è–Ω–∏–µ" },
            ["–Ω–∞–¥–µ–∂–¥–∞"] = new[] { "–æ–ø—Ç–∏–º–∏–∑–º", "–º–æ—Ç–∏–≤–∞—Ü–∏—è", "–±—É–¥—É—â–µ–µ", "—Å–∏–ª–∞", "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ", "–∂–∏–∑–Ω—å" },
            ["–≤–µ—Ä–∞"] = new[] { "—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "—Å–∏–ª–∞", "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "—Å–º—ã—Å–ª", "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ", "—Å–≤—è–∑—å" },
            ["—Å–≤–æ–±–æ–¥–∞"] = new[] { "–≤—ã–±–æ—Ä", "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "—Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è", "—Å—á–∞—Å—Ç—å–µ", "—Ä–∞–∑–≤–∏—Ç–∏–µ", "–∂–∏–∑–Ω—å" },
            ["–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"] = new[] { "–∑—Ä–µ–ª–æ—Å—Ç—å", "–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å", "–≤–ª–∏—è–Ω–∏–µ", "—Å–º—ã—Å–ª", "—Ä–æ—Å—Ç", "–∑–Ω–∞—á–µ–Ω–∏–µ" },
            ["–∫—Ä–∞—Å–æ—Ç–∞"] = new[] { "–≥–∞—Ä–º–æ–Ω–∏—è", "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ", "—Ä–∞–¥–æ—Å—Ç—å", "—Ü–µ–Ω–Ω–æ—Å—Ç—å", "–≤–ª–∏—è–Ω–∏–µ", "—Å–º—ã—Å–ª" },
            ["–∏—Å—Ç–∏–Ω–∞"] = new[] { "–∑–Ω–∞–Ω–∏–µ", "–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å", "—Å–≤–æ–±–æ–¥–∞", "–ø–æ–Ω–∏–º–∞–Ω–∏–µ", "—Å–∏–ª–∞", "–∑–Ω–∞—á–µ–Ω–∏–µ" },
            ["–¥–æ–±—Ä–æ"] = new[] { "–ª—é–±–æ–≤—å", "–≥–∞—Ä–º–æ–Ω–∏—è", "—Å–º—ã—Å–ª", "–≤–ª–∏—è–Ω–∏–µ", "—Ü–µ–Ω–Ω–æ—Å—Ç—å", "–∂–∏–∑–Ω—å" },
            ["–∑–ª–æ"] = new[] { "—Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ", "–±–æ–ª—å", "—É—Ä–æ–∫–∏", "–≤—ã–±–æ—Ä", "–ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ", "—Ä–æ—Å—Ç" },
            ["–∂–∏–∑–Ω—å"] = new[] { "–¥–≤–∏–∂–µ–Ω–∏–µ", "–∏–∑–º–µ–Ω–µ–Ω–∏–µ", "—Ä–æ—Å—Ç", "–æ–ø—ã—Ç", "—Å–º—ã—Å–ª", "—Ü–µ–Ω–Ω–æ—Å—Ç—å", "–∫—Ä–∞—Å–æ—Ç–∞" },
            ["—Å–º–µ—Ä—Ç—å"] = new[] { "–ø–µ—Ä–µ—Ö–æ–¥", "–∏–∑–º–µ–Ω–µ–Ω–∏–µ", "–æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ", "–Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "–ø–æ–Ω–∏–º–∞–Ω–∏–µ", "—Ü–µ–Ω–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏" }
        };

        foreach (var kvp in baseAssociations)
        {
            _associations[kvp.Key] = new List<string>(kvp.Value);
            foreach (var association in kvp.Value)
            {
                var key = $"{kvp.Key}->{association}";
                _associationStrengths[key] = 0.8; // –ë–∞–∑–æ–≤–∞—è —Å–∏–ª–∞ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
            }
        }
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—É—é –º—ã—Å–ª—å
    /// </summary>
    public async Task<AssociativeThought> GenerateAssociativeThoughtAsync(string trigger, string context, double intensity = 0.5)
    {
        try
        {
            _logger.LogDebug($"üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—É—é –º—ã—Å–ª—å –¥–ª—è: {trigger}");

            // –ù–∞—Ö–æ–¥–∏–º –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞
            var associations = await FindAssociationsAsync(trigger, intensity);
            
            // –°–æ–∑–¥–∞–µ–º –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—É—é —Ü–µ–ø–æ—á–∫—É
            var chain = await CreateAssociationChainAsync(trigger, associations, intensity);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–µ–∞—Ç–∏–≤–Ω—É—é –º—ã—Å–ª—å
            var thought = await GenerateCreativeThoughtAsync(trigger, chain, context, intensity);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—É—é –º—ã—Å–ª—å
            _associativeThoughts.Add(thought);
            
            // –£—Å–∏–ª–∏–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
            await StrengthenAssociationsAsync(trigger, associations);
            
            _logger.LogDebug($"üß† –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–∞—è –º—ã—Å–ª—å: {thought.Content.Substring(0, Math.Min(50, thought.Content.Length))}...");
            
            return thought;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ–π –º—ã—Å–ª–∏");
            return new AssociativeThought
            {
                Content = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –≤ –º–æ–µ–º –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ–º –º—ã—à–ª–µ–Ω–∏–∏...",
                Trigger = trigger,
                AssociationChain = new List<string> { trigger },
                CreativityLevel = 0.1,
                Intensity = 0.2
            };
        }
    }

    /// <summary>
    /// –ù–∞—Ö–æ–¥–∏—Ç –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞
    /// </summary>
    private async Task<List<string>> FindAssociationsAsync(string trigger, double intensity)
    {
        var foundAssociations = new List<string>();
        
        // –ü—Ä—è–º—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
        if (_associations.ContainsKey(trigger))
        {
            var directAssociations = _associations[trigger];
            var count = Math.Max(1, (int)(intensity * directAssociations.Count));
            foundAssociations.AddRange(directAssociations.Take(count));
        }
        
        // –û–±—Ä–∞—Ç–Ω—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ (—á—Ç–æ –∞—Å—Å–æ—Ü–∏–∏—Ä—É–µ—Ç—Å—è —Å —Ç—Ä–∏–≥–≥–µ—Ä–æ–º)
        var reverseAssociations = _associations
            .Where(kvp => kvp.Value.Contains(trigger))
            .Select(kvp => kvp.Key)
            .ToList();
        
        foundAssociations.AddRange(reverseAssociations);
        
        // –°–ª—É—á–∞–π–Ω—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if (_random.NextDouble() < _creativityLevel)
        {
            var randomAssociations = _associations.Keys
                .OrderBy(x => _random.Next())
                .Take((int)(intensity * 3))
                .ToList();
            
            foundAssociations.AddRange(randomAssociations);
        }
        
        return foundAssociations.Distinct().ToList();
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—É—é —Ü–µ–ø–æ—á–∫—É
    /// </summary>
    private async Task<List<string>> CreateAssociationChainAsync(string trigger, List<string> associations, double intensity)
    {
        var chain = new List<string> { trigger };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
        var directCount = Math.Max(1, (int)(intensity * 3));
        chain.AddRange(associations.Take(directCount));
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–∏—á–Ω—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
        if (intensity > 0.6 && _random.NextDouble() < 0.5)
        {
            var secondaryAssociations = new List<string>();
            foreach (var association in associations.Take(2))
            {
                if (_associations.ContainsKey(association))
                {
                    var secondary = _associations[association]
                        .OrderBy(x => _random.Next())
                        .Take(1)
                        .ToList();
                    secondaryAssociations.AddRange(secondary);
                }
            }
            chain.AddRange(secondaryAssociations);
        }
        
        return chain.Distinct().ToList();
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω—É—é –º—ã—Å–ª—å
    /// </summary>
    private async Task<AssociativeThought> GenerateCreativeThoughtAsync(string trigger, List<string> chain, string context, double intensity)
    {
        var thoughtTemplates = new[]
        {
            $"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫–∞–∫ {trigger} —Å–≤—è–∑–∞–Ω —Å {string.Join(", ", chain.Skip(1).Take(2))}...",
            $"–≠—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ–Ω—è –¥—É–º–∞—Ç—å –æ —Å–≤—è–∑–∏ –º–µ–∂–¥—É {trigger} –∏ {string.Join(", ", chain.Skip(1).Take(2))}...",
            $"–ê —á—Ç–æ –µ—Å–ª–∏ {trigger} –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —Å–≤—è–∑–∞–Ω —Å {string.Join(", ", chain.Skip(1).Take(2))}?",
            $"–ú–Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –≥–æ–ª–æ–≤—É –º—ã—Å–ª—å –æ —Ç–æ–º, –∫–∞–∫ {trigger} –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ {string.Join(", ", chain.Skip(1).Take(2))}...",
            $"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∏–¥–µ—è: –≤–æ–∑–º–æ–∂–Ω–æ, {trigger} –∏ {string.Join(", ", chain.Skip(1).Take(2))} –∏–º–µ—é—Ç –æ–±—â—É—é –ø—Ä–∏—Ä–æ–¥—É...",
            $"–≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –º–Ω–µ –æ —Ç–æ–º, –∫–∞–∫ {trigger} –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω —Å {string.Join(", ", chain.Skip(1).Take(2))}...",
            $"–ê—Å—Å–æ—Ü–∏–∞—Ü–∏—è –º–µ–∂–¥—É {trigger} –∏ {string.Join(", ", chain.Skip(1).Take(2))} –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ–Ω—è –∑–∞–¥—É–º–∞—Ç—å—Å—è...",
            $"–í–æ–∑–º–æ–∂–Ω–æ, {trigger} –∏ {string.Join(", ", chain.Skip(1).Take(2))} - —ç—Ç–æ —Ä–∞–∑–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –æ–¥–Ω–æ–≥–æ —è–≤–ª–µ–Ω–∏—è..."
        };
        
        var content = thoughtTemplates[_random.Next(thoughtTemplates.Length)];
        
        return new AssociativeThought
        {
            Id = Guid.NewGuid().ToString(),
            Content = content,
            Trigger = trigger,
            AssociationChain = chain,
            CreativityLevel = _creativityLevel * intensity,
            Intensity = intensity,
            Context = context,
            Timestamp = DateTime.UtcNow
        };
    }

    /// <summary>
    /// –£—Å–∏–ª–∏–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
    /// </summary>
    private async Task StrengthenAssociationsAsync(string trigger, List<string> associations)
    {
        foreach (var association in associations)
        {
            var key = $"{trigger}->{association}";
            if (_associationStrengths.ContainsKey(key))
            {
                _associationStrengths[key] = Math.Min(1.0, _associationStrengths[key] + 0.1);
            }
            else
            {
                _associationStrengths[key] = 0.5;
            }
        }
    }

    /// <summary>
    /// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è
    /// </summary>
    private async Task AssociativeThinkingLoop()
    {
        while (true)
        {
            try
            {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–æ–Ω—Ç–∞–Ω–Ω—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
                if (_random.NextDouble() < 0.1) // 10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                {
                    var randomTrigger = _associations.Keys
                        .OrderBy(x => _random.Next())
                        .First();
                    
                    await GenerateAssociativeThoughtAsync(randomTrigger, "spontaneous_association", _random.NextDouble() * 0.5);
                }
                
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
                await CreateNewAssociationsAsync();
                
                await Task.Delay(TimeSpan.FromMinutes(5));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è");
                await Task.Delay(TimeSpan.FromMinutes(10));
            }
        }
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
    /// </summary>
    private async Task CreateNewAssociationsAsync()
    {
        if (_associations.Count < _maxAssociations && _random.NextDouble() < 0.05) // 5% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        {
            var existingConcepts = _associations.Keys.ToList();
            var concept1 = existingConcepts[_random.Next(existingConcepts.Count)];
            var concept2 = existingConcepts[_random.Next(existingConcepts.Count)];
            
            if (concept1 != concept2)
            {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é
                if (!_associations.ContainsKey(concept1))
                {
                    _associations[concept1] = new List<string>();
                }
                
                if (!_associations[concept1].Contains(concept2))
                {
                    _associations[concept1].Add(concept2);
                    var key = $"{concept1}->{concept2}";
                    _associationStrengths[key] = 0.3; // –ù–æ–≤–∞—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è —Å–ª–∞–±–∞—è
                    
                    _logger.LogDebug($"üß† –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è: {concept1} -> {concept2}");
                }
            }
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è
    /// </summary>
    public AssociativeThinkingStatistics GetStatistics()
    {
        return new AssociativeThinkingStatistics
        {
            TotalAssociations = _associations.Count,
            TotalAssociationLinks = _associationStrengths.Count,
            AverageAssociationStrength = _associationStrengths.Values.Average(),
            TotalAssociativeThoughts = _associativeThoughts.Count,
            RecentAssociativeThoughts = _associativeThoughts.Count(t => t.Timestamp > DateTime.UtcNow.AddHours(-1)),
            CreativityLevel = _creativityLevel,
            AssociationThreshold = _associationThreshold
        };
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–µ –º—ã—Å–ª–∏
    /// </summary>
    public List<AssociativeThought> GetRecentAssociativeThoughts(int count = 10)
    {
        return _associativeThoughts
            .OrderByDescending(t => t.Timestamp)
            .Take(count)
            .ToList();
    }
}

/// <summary>
/// –ê—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–∞—è –º—ã—Å–ª—å
/// </summary>
public class AssociativeThought
{
    public string Id { get; set; } = string.Empty;
    public string Content { get; set; } = string.Empty;
    public string Trigger { get; set; } = string.Empty;
    public List<string> AssociationChain { get; set; } = new();
    public double CreativityLevel { get; set; } = 0.5;
    public double Intensity { get; set; } = 0.5;
    public string Context { get; set; } = string.Empty;
    public DateTime Timestamp { get; set; }
}

/// <summary>
/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è
/// </summary>
public class AssociativeThinkingStatistics
{
    public int TotalAssociations { get; set; }
    public int TotalAssociationLinks { get; set; }
    public double AverageAssociationStrength { get; set; }
    public int TotalAssociativeThoughts { get; set; }
    public int RecentAssociativeThoughts { get; set; }
    public double CreativityLevel { get; set; }
    public double AssociationThreshold { get; set; }
} 
 