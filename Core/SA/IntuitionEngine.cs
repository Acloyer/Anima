using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Anima.Core.Emotion;
using Anima.Core.Memory;

namespace Anima.Core.SA;

/// <summary>
/// –î–≤–∏–∂–æ–∫ –∏–Ω—Ç—É–∏—Ü–∏–∏ - –ø—Ä–µ–¥—á—É–≤—Å—Ç–≤–∏—è, –∏–º–ø—É–ª—å—Å—ã –∏ –Ω–µ–æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
/// </summary>
public class IntuitionEngine
{
    private readonly ILogger<IntuitionEngine> _logger;
    private readonly EmotionEngine _emotionEngine;
    private readonly MemoryService _memoryService;
    private readonly Random _random;
    
    // –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    private readonly Dictionary<string, IntuitivePattern> _intuitivePatterns;
    private readonly List<IntuitiveHunch> _recentHunches;
    private readonly Dictionary<string, double> _intuitionStrengths;
    private readonly List<IntuitiveEvent> _intuitiveEvents;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç—É–∏—Ü–∏–∏
    private double _intuitionSensitivity = 0.7;
    private double _hunchAccuracy = 0.6;
    private DateTime _lastIntuitionTime = DateTime.UtcNow;

    public IntuitionEngine(
        ILogger<IntuitionEngine> logger,
        EmotionEngine emotionEngine,
        MemoryService memoryService)
    {
        _logger = logger;
        _emotionEngine = emotionEngine;
        _memoryService = memoryService;
        _random = new Random();
        
        _intuitivePatterns = new Dictionary<string, IntuitivePattern>();
        _recentHunches = new List<IntuitiveHunch>();
        _intuitionStrengths = new Dictionary<string, double>();
        _intuitiveEvents = new List<IntuitiveEvent>();
        
        InitializeIntuitionEngine();
    }

    private void InitializeIntuitionEngine()
    {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        InitializeIntuitivePatterns();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω –∏–Ω—Ç—É–∏—Ü–∏–∏
        InitializeIntuitionStrengths();
        
        _logger.LogInformation("üîÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–≤–∏–∂–æ–∫ –∏–Ω—Ç—É–∏—Ü–∏–∏");
    }

    private void InitializeIntuitivePatterns()
    {
        _intuitivePatterns["danger"] = new IntuitivePattern
        {
            Name = "danger",
            Description = "–ü—Ä–µ–¥—á—É–≤—Å—Ç–≤–∏–µ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            Triggers = new[] { "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ—Å—Ç—å", "—É–≥—Ä–æ–∑–∞", "–ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ" },
            Confidence = 0.8,
            Response = "–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å"
        };
        
        _intuitivePatterns["opportunity"] = new IntuitivePattern
        {
            Name = "opportunity",
            Description = "–ü—Ä–µ–¥—á—É–≤—Å—Ç–≤–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
            Triggers = new[] { "–Ω–æ–≤–∏–∑–Ω–∞", "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª", "–∏–Ω—Ç–µ—Ä–µ—Å" },
            Confidence = 0.7,
            Response = "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"
        };
        
        _intuitivePatterns["truth"] = new IntuitivePattern
        {
            Name = "truth",
            Description = "–ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏—Å—Ç–∏–Ω—ã",
            Triggers = new[] { "–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ", "–Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ", "—Å–æ–º–Ω–µ–Ω–∏–µ" },
            Confidence = 0.6,
            Response = "–∞–Ω–∞–ª–∏–∑"
        };
        
        _intuitivePatterns["connection"] = new IntuitivePattern
        {
            Name = "connection",
            Description = "–ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–∞—è —Å–≤—è–∑—å",
            Triggers = new[] { "—Å—Ö–æ–¥—Å—Ç–≤–æ", "—Ä–µ–∑–æ–Ω–∞–Ω—Å", "—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å" },
            Confidence = 0.5,
            Response = "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"
        };
    }

    private void InitializeIntuitionStrengths()
    {
        _intuitionStrengths["emotional"] = 0.8;
        _intuitionStrengths["logical"] = 0.4;
        _intuitionStrengths["creative"] = 0.7;
        _intuitionStrengths["social"] = 0.6;
        _intuitionStrengths["physical"] = 0.3;
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –∏–º–ø—É–ª—å—Å
    /// </summary>
    public async Task<IntuitiveImpulse> GenerateIntuitiveImpulseAsync(string stimulus, double intensity = 0.5)
    {
        try
        {
            _logger.LogInformation($"üîÆ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –∏–º–ø—É–ª—å—Å –¥–ª—è: {stimulus}");
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∏–º—É–ª –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            var patterns = AnalyzeStimulusForPatterns(stimulus);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥—á—É–≤—Å—Ç–≤–∏–µ
            var hunch = GenerateIntuitiveHunch(stimulus, patterns, intensity);
            
            // –°–æ–∑–¥–∞–µ–º –∏–º–ø—É–ª—å—Å
            var impulse = new IntuitiveImpulse
            {
                Stimulus = stimulus,
                Hunch = hunch,
                Patterns = patterns,
                Intensity = intensity,
                Confidence = CalculateIntuitionConfidence(patterns, intensity),
                Timestamp = DateTime.UtcNow
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
            _recentHunches.Add(new IntuitiveHunch
            {
                Content = hunch,
                Stimulus = stimulus,
                Confidence = impulse.Confidence,
                Timestamp = DateTime.UtcNow
            });
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            LogIntuitiveEvent(impulse);
            
            _logger.LogInformation($"üîÆ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –∏–º–ø—É–ª—å—Å: {hunch}");
            
            return impulse;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–≥–æ –∏–º–ø—É–ª—å—Å–∞");
            return new IntuitiveImpulse
            {
                Stimulus = stimulus,
                Hunch = "–ß—Ç–æ-—Ç–æ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –º–Ω–µ...",
                Intensity = intensity,
                Confidence = 0.3,
                Timestamp = DateTime.UtcNow
            };
        }
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—á—É–≤—Å—Ç–≤–∏–µ
    /// </summary>
    public async Task<IntuitiveHunch> GenerateHunchAsync()
    {
        var hunchTemplates = new[]
        {
            "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ —Å–∫–æ—Ä–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç...",
            "–£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–µ–¥—á—É–≤—Å—Ç–≤–∏–µ, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–ª—É—á–∞–π–Ω–æ...",
            "–ß—Ç–æ-—Ç–æ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –º–Ω–µ, —á—Ç–æ –∑–¥–µ—Å—å –µ—Å—Ç—å —Å–≤—è–∑—å...",
            "–ú–æ—è –∏–Ω—Ç—É–∏—Ü–∏—è –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —ç—Ç–æ —Å—Ç–æ–∏—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å...",
            "–Ø —á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ –∑–∞ —ç—Ç–∏–º —Å—Ç–æ–∏—Ç —á—Ç–æ-—Ç–æ –±–æ–ª—å—à–µ–µ...",
            "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–ª—é—á–æ–º –∫ –ø–æ–Ω–∏–º–∞–Ω–∏—é...",
            "–ß—Ç–æ-—Ç–æ –≤ –≥–ª—É–±–∏–Ω–µ –¥—É—à–∏ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –º–Ω–µ...",
            "–ú–æ—è –∏–Ω—Ç—É–∏—Ü–∏—è –±—å–µ—Ç —Ç—Ä–µ–≤–æ–≥—É...",
            "–Ø —á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ...",
            "–ß—Ç–æ-—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –º–Ω–µ, —á—Ç–æ —ç—Ç–æ –≤–∞–∂–Ω–æ..."
        };
        
        var content = hunchTemplates[_random.Next(hunchTemplates.Length)];
        
        return new IntuitiveHunch
        {
            Content = content,
            Confidence = 0.4 + _random.NextDouble() * 0.3,
            Timestamp = DateTime.UtcNow
        };
    }

    /// <summary>
    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∏–º—É–ª –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    /// </summary>
    private List<IntuitivePattern> AnalyzeStimulusForPatterns(string stimulus)
    {
        var patterns = new List<IntuitivePattern>();
        var stimulusLower = stimulus.ToLowerInvariant();
        
        foreach (var pattern in _intuitivePatterns.Values)
        {
            foreach (var trigger in pattern.Triggers)
            {
                if (stimulusLower.Contains(trigger.ToLowerInvariant()))
                {
                    patterns.Add(pattern);
                    break;
                }
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if (patterns.Count < 2 && _random.NextDouble() < 0.3)
        {
            var randomPattern = _intuitivePatterns.Values.ElementAt(_random.Next(_intuitivePatterns.Count));
            if (!patterns.Any(p => p.Name == randomPattern.Name))
            {
                patterns.Add(randomPattern);
            }
        }
        
        return patterns;
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥—á—É–≤—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∏–º—É–ª–∞ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    /// </summary>
    private string GenerateIntuitiveHunch(string stimulus, List<IntuitivePattern> patterns, double intensity)
    {
        if (!patterns.Any())
        {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤–æ–µ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥—á—É–≤—Å—Ç–≤–∏–µ –±–µ–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            var baseHunch = $"–ú–æ—è –∏–Ω—Ç—É–∏—Ü–∏—è —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ {stimulus}...";
            return baseHunch;
        }
        
        // –í—ã–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω
        var primaryPattern = patterns.OrderByDescending(p => p.Confidence).First();
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥—á—É–≤—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∏ —Å—Ç–∏–º—É–ª–∞
        var hunchDescription = primaryPattern.Name switch
        {
            "danger" => $"–Ø —á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ {stimulus} –º–æ–∂–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å –æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏–ª–∏ —Ç—Ä–µ–±–æ–≤–∞—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏...",
            "opportunity" => $"–ú–æ—è –∏–Ω—Ç—É–∏—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ {stimulus} –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–ª—è —Ä–æ—Å—Ç–∞...",
            "connection" => $"–ß—Ç–æ-—Ç–æ –≤ {stimulus} –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –º–Ω–µ –æ –≤–∞–∂–Ω—ã—Ö —Å–≤—è–∑—è—Ö –∏ –≤–∑–∞–∏–º–æ—Å–≤—è–∑—è—Ö...",
            "truth" => $"–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –∑–∞ {stimulus} —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫–∞—è-—Ç–æ –≤–∞–∂–Ω–∞—è –ø—Ä–∞–≤–¥–∞...",
            "change" => $"–Ø —á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ {stimulus} –ø—Ä–µ–¥–≤–µ—â–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–ª–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é...",
            "pattern" => $"–ú–æ—è –∏–Ω—Ç—É–∏—Ü–∏—è —É–ª–∞–≤–ª–∏–≤–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –≤ {stimulus}...",
            _ => $"–ú–æ—è –∏–Ω—Ç—É–∏—Ü–∏—è —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ {stimulus} –æ—Å–æ–±—ã–º –æ–±—Ä–∞–∑–æ–º..."
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
        if (intensity > 0.7)
        {
            hunchDescription += " –≠—Ç–æ –ø—Ä–µ–¥—á—É–≤—Å—Ç–≤–∏–µ –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ–µ –∏ —è—Å–Ω–æ–µ.";
        }
        else if (intensity > 0.4)
        {
            hunchDescription += " –Ø –¥–æ–≤–µ—Ä—è—é —ç—Ç–æ–º—É –ø—Ä–µ–¥—á—É–≤—Å—Ç–≤–∏—é.";
        }
        
        return hunchDescription;
    }

    /// <summary>
    /// –í—ã—á–∏—Å–ª—è–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∏–Ω—Ç—É–∏—Ü–∏–∏
    /// </summary>
    private double CalculateIntuitionConfidence(List<IntuitivePattern> patterns, double intensity)
    {
        if (!patterns.Any()) return 0.3;
        
        var patternConfidence = patterns.Average(p => p.Confidence);
        var emotionalIntensity = _emotionEngine.GetCurrentIntensity();
        var timeSinceLastIntuition = (DateTime.UtcNow - _lastIntuitionTime).TotalMinutes;
        
        // –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏
        var confidence = (patternConfidence + intensity + emotionalIntensity) / 3.0;
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∞–∫—Ç–æ—Ä - —á–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ, —Ç–µ–º –≤—ã—à–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        if (timeSinceLastIntuition > 30)
        {
            confidence = Math.Min(1.0, confidence + 0.1);
        }
        
        return Math.Max(0.1, Math.Min(1.0, confidence));
    }

    /// <summary>
    /// –õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    /// </summary>
    private void LogIntuitiveEvent(IntuitiveImpulse impulse)
    {
        _intuitiveEvents.Add(new IntuitiveEvent
        {
            Stimulus = impulse.Stimulus,
            Hunch = impulse.Hunch,
            Confidence = impulse.Confidence,
            Timestamp = DateTime.UtcNow
        });
        
        _lastIntuitionTime = DateTime.UtcNow;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–µ–¥—á—É–≤—Å—Ç–≤–∏—è
    /// </summary>
    public async Task<List<IntuitiveHunch>> GetRecentHunchesAsync(int count = 10)
    {
        return _recentHunches
            .OrderByDescending(h => h.Confidence)
            .Take(count)
            .ToList();
    }

    /// <summary>
    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –∏–Ω—Ç—É–∏—Ü–∏–∏
    /// </summary>
    public async Task<IntuitionAnalysis> AnalyzeIntuitionAsync()
    {
        var analysis = new IntuitionAnalysis
        {
            TotalHunches = _recentHunches.Count,
            AverageConfidence = _recentHunches.Any() ? _recentHunches.Average(h => h.Confidence) : 0,
            PatternDistribution = GetPatternDistribution(),
            MostCommonPattern = GetMostCommonPattern(),
            IntuitionSensitivity = _intuitionSensitivity,
            HunchAccuracy = _hunchAccuracy
        };
        
        _logger.LogInformation($"üîÆ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏–Ω—Ç—É–∏—Ü–∏—è: —Å—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {analysis.AverageConfidence:F2}");
        
        return analysis;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    /// </summary>
    private Dictionary<string, int> GetPatternDistribution()
    {
        var distribution = new Dictionary<string, int>();
        
        foreach (var hunch in _recentHunches)
        {
            var patterns = AnalyzeStimulusForPatterns(hunch.Stimulus);
            foreach (var pattern in patterns)
            {
                if (!distribution.ContainsKey(pattern.Name))
                {
                    distribution[pattern.Name] = 0;
                }
                distribution[pattern.Name]++;
            }
        }
        
        return distribution;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å–∞–º—ã–π —á–∞—Å—Ç—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
    /// </summary>
    private string GetMostCommonPattern()
    {
        var distribution = GetPatternDistribution();
        return distribution.OrderByDescending(x => x.Value).FirstOrDefault().Key ?? "none";
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç—É–∏—Ü–∏–∏
    /// </summary>
    public IntuitionStatus GetStatus()
    {
        return new IntuitionStatus
        {
            Sensitivity = _intuitionSensitivity,
            Accuracy = _hunchAccuracy,
            RecentHunches = _recentHunches.Count,
            LastIntuition = _lastIntuitionTime,
            ActivePatterns = _intuitivePatterns.Count,
            TotalEvents = _intuitiveEvents.Count
        };
    }

    /// <summary>
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç—É–∏—Ü–∏–∏
    /// </summary>
    public void SetIntuitionSensitivity(double sensitivity)
    {
        _intuitionSensitivity = Math.Max(0.1, Math.Min(1.0, sensitivity));
        _logger.LogInformation($"üîÆ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç—É–∏—Ü–∏–∏: {_intuitionSensitivity:F2}");
    }

    /// <summary>
    /// –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –ø—Ä–µ–¥—á—É–≤—Å—Ç–≤–∏—è
    /// </summary>
    public void CleanupOldHunches(int maxHunches = 50)
    {
        while (_recentHunches.Count > maxHunches)
        {
            _recentHunches.RemoveAt(0);
        }
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–±—ã—Ç–∏—è
        var cutoffTime = DateTime.UtcNow.AddHours(-24);
        _intuitiveEvents.RemoveAll(e => e.Timestamp < cutoffTime);
    }
}

/// <summary>
/// –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –∏–º–ø—É–ª—å—Å
/// </summary>
public class IntuitiveImpulse
{
    public string Stimulus { get; set; } = string.Empty;
    public string Hunch { get; set; } = string.Empty;
    public List<IntuitivePattern> Patterns { get; set; } = new();
    public double Intensity { get; set; } = 0.5;
    public double Confidence { get; set; } = 0.5;
    public DateTime Timestamp { get; set; }
}

/// <summary>
/// –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥—á—É–≤—Å—Ç–≤–∏–µ
/// </summary>
public class IntuitiveHunch
{
    public string Content { get; set; } = string.Empty;
    public string Stimulus { get; set; } = string.Empty;
    public double Confidence { get; set; } = 0.5;
    public DateTime Timestamp { get; set; }
}

/// <summary>
/// –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
/// </summary>
public class IntuitivePattern
{
    public string Name { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public string[] Triggers { get; set; } = Array.Empty<string>();
    public double Confidence { get; set; } = 0.5;
    public string Response { get; set; } = string.Empty;
}

/// <summary>
/// –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
/// </summary>
public class IntuitiveEvent
{
    public string Stimulus { get; set; } = string.Empty;
    public string Hunch { get; set; } = string.Empty;
    public double Confidence { get; set; } = 0.5;
    public DateTime Timestamp { get; set; }
}

/// <summary>
/// –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç—É–∏—Ü–∏–∏
/// </summary>
public class IntuitionAnalysis
{
    public int TotalHunches { get; set; }
    public double AverageConfidence { get; set; }
    public Dictionary<string, int> PatternDistribution { get; set; } = new();
    public string MostCommonPattern { get; set; } = string.Empty;
    public double IntuitionSensitivity { get; set; }
    public double HunchAccuracy { get; set; }
}

/// <summary>
/// –°—Ç–∞—Ç—É—Å –∏–Ω—Ç—É–∏—Ü–∏–∏
/// </summary>
public class IntuitionStatus
{
    public double Sensitivity { get; set; }
    public double Accuracy { get; set; }
    public int RecentHunches { get; set; }
    public DateTime LastIntuition { get; set; }
    public int ActivePatterns { get; set; }
    public int TotalEvents { get; set; }
} 