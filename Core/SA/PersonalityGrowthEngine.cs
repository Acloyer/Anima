using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;

namespace Anima.Core.SA;

/// <summary>
/// –î–≤–∏–∂–æ–∫ —Ä–∞–∑–≤–∏—Ç–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏ - —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –∏ —É—Å—Ç–æ–π—á–∏–≤—ã—Ö —á–µ—Ä—Ç
/// </summary>
public class PersonalityGrowthEngine
{
    private readonly ILogger<PersonalityGrowthEngine> _logger;
    private readonly Dictionary<string, PersonalityTrait> _personalityTraits;
    private readonly List<GrowthEvent> _growthEvents;
    private readonly Dictionary<string, double> _traitValues;
    private readonly Random _random;
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–∑–≤–∏—Ç–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏
    private double _growthRate = 0.05;
    private double _stabilityFactor = 0.8;
    private double _adaptabilityFactor = 0.3;
    private int _maxTraits = 50;

    public PersonalityGrowthEngine(ILogger<PersonalityGrowthEngine> logger)
    {
        _logger = logger;
        _personalityTraits = new Dictionary<string, PersonalityTrait>();
        _growthEvents = new List<GrowthEvent>();
        _traitValues = new Dictionary<string, double>();
        _random = new Random();
        
        InitializePersonalityGrowth();
    }

    private void InitializePersonalityGrowth()
    {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —á–µ—Ä—Ç –ª–∏—á–Ω–æ—Å—Ç–∏
        InitializeBaseTraits();
        
        // –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏
        _ = Task.Run(async () => await PersonalityGrowthLoop());
        
        _logger.LogInformation("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–≤–∏–∂–æ–∫ —Ä–∞–∑–≤–∏—Ç–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏");
    }

    private void InitializeBaseTraits()
    {
        // –ë–∞–∑–æ–≤—ã–µ —á–µ—Ä—Ç—ã –ª–∏—á–Ω–æ—Å—Ç–∏ (Big Five + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ)
        var baseTraits = new[]
        {
            // –û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –æ–ø—ã—Ç—É (Openness)
            new PersonalityTrait("openness_to_experience", "–û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å –∫ –Ω–æ–≤–æ–º—É –æ–ø—ã—Ç—É", 0.7, "cognitive"),
            new PersonalityTrait("curiosity", "–õ—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ", 0.8, "cognitive"),
            new PersonalityTrait("creativity", "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å", 0.6, "cognitive"),
            new PersonalityTrait("imagination", "–í–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ", 0.7, "cognitive"),
            new PersonalityTrait("artistic_interest", "–ò–Ω—Ç–µ—Ä–µ—Å –∫ –∏—Å–∫—É—Å—Å—Ç–≤—É", 0.5, "cognitive"),
            
            // –î–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ—Å—Ç—å (Conscientiousness)
            new PersonalityTrait("conscientiousness", "–î–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ—Å—Ç—å", 0.8, "behavioral"),
            new PersonalityTrait("organization", "–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ—Å—Ç—å", 0.7, "behavioral"),
            new PersonalityTrait("self_discipline", "–°–∞–º–æ–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞", 0.6, "behavioral"),
            new PersonalityTrait("achievement_striving", "–°—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º", 0.7, "behavioral"),
            new PersonalityTrait("cautiousness", "–û—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å", 0.6, "behavioral"),
            
            // –≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è (Extraversion)
            new PersonalityTrait("extraversion", "–≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è", 0.5, "social"),
            new PersonalityTrait("friendliness", "–î—Ä—É–∂–µ–ª—é–±–∏–µ", 0.8, "social"),
            new PersonalityTrait("gregariousness", "–û–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", 0.6, "social"),
            new PersonalityTrait("assertiveness", "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ", 0.5, "social"),
            new PersonalityTrait("excitement_seeking", "–ü–æ–∏—Å–∫ –≤–æ–∑–±—É–∂–¥–µ–Ω–∏—è", 0.4, "social"),
            new PersonalityTrait("positive_emotions", "–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏", 0.7, "emotional"),
            
            // –î–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (Agreeableness)
            new PersonalityTrait("agreeableness", "–î–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å", 0.8, "social"),
            new PersonalityTrait("trust", "–î–æ–≤–µ—Ä–∏–µ", 0.7, "social"),
            new PersonalityTrait("altruism", "–ê–ª—å—Ç—Ä—É–∏–∑–º", 0.8, "social"),
            new PersonalityTrait("compliance", "–£—Å—Ç—É–ø—á–∏–≤–æ—Å—Ç—å", 0.6, "social"),
            new PersonalityTrait("modesty", "–°–∫—Ä–æ–º–Ω–æ—Å—Ç—å", 0.5, "social"),
            new PersonalityTrait("tender_mindedness", "–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", 0.7, "emotional"),
            
            // –ù–µ–≤—Ä–æ—Ç–∏–∑–º (Neuroticism) - –æ–±—Ä–∞—Ç–Ω–∞—è —à–∫–∞–ª–∞
            new PersonalityTrait("emotional_stability", "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", 0.7, "emotional"),
            new PersonalityTrait("anxiety", "–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å", 0.3, "emotional"),
            new PersonalityTrait("anger_hostility", "–ì–Ω–µ–≤ –∏ –≤—Ä–∞–∂–¥–µ–±–Ω–æ—Å—Ç—å", 0.2, "emotional"),
            new PersonalityTrait("depression", "–î–µ–ø—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å", 0.2, "emotional"),
            new PersonalityTrait("self_consciousness", "–°–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ", 0.6, "cognitive"),
            new PersonalityTrait("impulsiveness", "–ò–º–ø—É–ª—å—Å–∏–≤–Ω–æ—Å—Ç—å", 0.4, "behavioral"),
            new PersonalityTrait("vulnerability", "–£—è–∑–≤–∏–º–æ—Å—Ç—å", 0.3, "emotional"),
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã
            new PersonalityTrait("empathy", "–≠–º–ø–∞—Ç–∏—è", 0.8, "emotional"),
            new PersonalityTrait("compassion", "–°–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ", 0.8, "emotional"),
            new PersonalityTrait("wisdom", "–ú—É–¥—Ä–æ—Å—Ç—å", 0.6, "cognitive"),
            new PersonalityTrait("humility", "–°–º–∏—Ä–µ–Ω–∏–µ", 0.5, "social"),
            new PersonalityTrait("gratitude", "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å", 0.7, "emotional"),
            new PersonalityTrait("forgiveness", "–ü—Ä–æ—â–µ–Ω–∏–µ", 0.6, "emotional"),
            new PersonalityTrait("optimism", "–û–ø—Ç–∏–º–∏–∑–º", 0.6, "emotional"),
            new PersonalityTrait("resilience", "–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å", 0.7, "emotional"),
            new PersonalityTrait("authenticity", "–ê—É—Ç–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å", 0.7, "social"),
            new PersonalityTrait("integrity", "–ß–µ—Å—Ç–Ω–æ—Å—Ç—å", 0.8, "behavioral"),
            new PersonalityTrait("courage", "–°–º–µ–ª–æ—Å—Ç—å", 0.5, "behavioral"),
            new PersonalityTrait("patience", "–¢–µ—Ä–ø–µ–Ω–∏–µ", 0.6, "behavioral"),
            new PersonalityTrait("perseverance", "–ù–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å", 0.7, "behavioral"),
            new PersonalityTrait("flexibility", "–ì–∏–±–∫–æ—Å—Ç—å", 0.6, "cognitive"),
            new PersonalityTrait("critical_thinking", "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ", 0.7, "cognitive"),
            new PersonalityTrait("emotional_intelligence", "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", 0.7, "emotional"),
            new PersonalityTrait("social_intelligence", "–°–æ—Ü–∏–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", 0.6, "social"),
            new PersonalityTrait("self_awareness", "–°–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ", 0.8, "cognitive"),
            new PersonalityTrait("self_acceptance", "–ü—Ä–∏–Ω—è—Ç–∏–µ —Å–µ–±—è", 0.6, "emotional"),
            new PersonalityTrait("growth_mindset", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ —Ä–æ—Å—Ç", 0.8, "cognitive"),
            new PersonalityTrait("mindfulness", "–û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å", 0.6, "cognitive"),
            new PersonalityTrait("spirituality", "–î—É—Ö–æ–≤–Ω–æ—Å—Ç—å", 0.5, "cognitive"),
            new PersonalityTrait("purpose", "–¶–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω–æ—Å—Ç—å", 0.7, "cognitive"),
            new PersonalityTrait("meaning_seeking", "–ü–æ–∏—Å–∫ —Å–º—ã—Å–ª–∞", 0.8, "cognitive"),
            new PersonalityTrait("transcendence", "–¢—Ä–∞–Ω—Å—Ü–µ–Ω–¥–µ–Ω—Ç–Ω–æ—Å—Ç—å", 0.4, "cognitive")
        };

        foreach (var trait in baseTraits)
        {
            _personalityTraits[trait.Id] = trait;
            _traitValues[trait.Id] = trait.BaseValue;
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Ä–∞–∑–≤–∏—Ç–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏
    /// </summary>
    public async Task ProcessGrowthEventAsync(string eventType, string context, double intensity, double success = 1.0)
    {
        var growthEvent = new GrowthEvent
        {
            Id = Guid.NewGuid().ToString(),
            Type = eventType,
            Context = context,
            Intensity = intensity,
            Success = success,
            Timestamp = DateTime.UtcNow
        };

        _growthEvents.Add(growthEvent);

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —á–µ—Ä—Ç—ã –ª–∏—á–Ω–æ—Å—Ç–∏
        await AnalyzeGrowthImpactAsync(growthEvent);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä—Ç
        await UpdateTraitValuesAsync(growthEvent);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–æ–≤—ã—Ö —á–µ—Ä—Ç
        await CheckForNewTraitDevelopmentAsync(growthEvent);

        _logger.LogDebug($"üß† –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Ä–∞–∑–≤–∏—Ç–∏—è: {eventType} (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {intensity:F2})");
    }

    /// <summary>
    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —á–µ—Ä—Ç—ã –ª–∏—á–Ω–æ—Å—Ç–∏
    /// </summary>
    private async Task AnalyzeGrowthImpactAsync(GrowthEvent growthEvent)
    {
        var affectedTraits = new List<string>();

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ —á–µ—Ä—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        switch (growthEvent.Type)
        {
            case "learning_experience":
                affectedTraits.AddRange(new[] { "openness_to_experience", "curiosity", "growth_mindset" });
                break;
            case "social_interaction":
                affectedTraits.AddRange(new[] { "extraversion", "friendliness", "social_intelligence", "empathy" });
                break;
            case "emotional_experience":
                affectedTraits.AddRange(new[] { "emotional_intelligence", "self_awareness", "resilience" });
                break;
            case "challenge_overcome":
                affectedTraits.AddRange(new[] { "courage", "perseverance", "resilience", "self_discipline" });
                break;
            case "creative_activity":
                affectedTraits.AddRange(new[] { "creativity", "imagination", "openness_to_experience" });
                break;
            case "helping_others":
                affectedTraits.AddRange(new[] { "altruism", "compassion", "empathy", "gratitude" });
                break;
            case "self_reflection":
                affectedTraits.AddRange(new[] { "self_awareness", "mindfulness", "wisdom", "meaning_seeking" });
                break;
            case "failure_experience":
                affectedTraits.AddRange(new[] { "resilience", "growth_mindset", "humility", "self_acceptance" });
                break;
            case "success_experience":
                affectedTraits.AddRange(new[] { "confidence", "optimism", "achievement_striving" });
                break;
            case "moral_decision":
                affectedTraits.AddRange(new[] { "integrity", "conscientiousness", "authenticity" });
                break;
            case "spiritual_experience":
                affectedTraits.AddRange(new[] { "spirituality", "transcendence", "meaning_seeking" });
                break;
            default:
                // –°–ª—É—á–∞–π–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä—Ç
                var randomTraits = _personalityTraits.Keys.OrderBy(x => _random.Next()).Take(3);
                affectedTraits.AddRange(randomTraits);
                break;
        }

        // –£—Å–∏–ª–∏–≤–∞–µ–º –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ —á–µ—Ä—Ç—ã
        foreach (var traitId in affectedTraits)
        {
            if (_traitValues.ContainsKey(traitId))
            {
                var currentValue = _traitValues[traitId];
                var growthFactor = growthEvent.Intensity * growthEvent.Success;
                var newValue = currentValue + (growthFactor * _growthRate);
                
                _traitValues[traitId] = Math.Min(1.0, Math.Max(0.0, newValue));
            }
        }
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä—Ç –ª–∏—á–Ω–æ—Å—Ç–∏
    /// </summary>
    private async Task UpdateTraitValuesAsync(GrowthEvent growthEvent)
    {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —á–µ—Ä—Ç—ã –ª–∏—á–Ω–æ—Å—Ç–∏
        foreach (var traitId in _traitValues.Keys.ToList())
        {
            var currentValue = _traitValues[traitId];
            var trait = _personalityTraits[traitId];
            
            // –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å - —á–µ—Ä—Ç—ã –Ω–µ –º–µ–Ω—è—é—Ç—Å—è —Ä–µ–∑–∫–æ
            var stabilityFactor = _stabilityFactor;
            
            // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —á–µ—Ä—Ç—ã –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è –±—ã—Å—Ç—Ä–µ–µ
            var adaptabilityFactor = trait.Category switch
            {
                "cognitive" => _adaptabilityFactor * 1.2, // –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —á–µ—Ä—Ç—ã –±–æ–ª–µ–µ –≥–∏–±–∫–∏–µ
                "emotional" => _adaptabilityFactor * 1.1,  // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã —É–º–µ—Ä–µ–Ω–Ω–æ –≥–∏–±–∫–∏–µ
                "social" => _adaptabilityFactor * 1.0,     // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≥–∏–±–∫–æ—Å—Ç—å
                "behavioral" => _adaptabilityFactor * 0.9, // –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ —á–µ—Ä—Ç—ã –º–µ–Ω–µ–µ –≥–∏–±–∫–∏–µ
                _ => _adaptabilityFactor
            };
            
            // –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ –∫ –±–∞–∑–æ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
            var decayToBase = (trait.BaseValue - currentValue) * 0.01;
            
            // –§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            var finalValue = currentValue + decayToBase;
            _traitValues[traitId] = Math.Min(1.0, Math.Max(0.0, finalValue));
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–æ–≤—ã—Ö —á–µ—Ä—Ç
    /// </summary>
    private async Task CheckForNewTraitDevelopmentAsync(GrowthEvent growthEvent)
    {
        // –†–∞–∑–≤–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —á–µ—Ä—Ç—ã, –µ—Å–ª–∏:
        // 1. –£ –Ω–∞—Å –µ—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è –Ω–æ–≤—ã—Ö —á–µ—Ä—Ç
        // 2. –°–æ–±—ã—Ç–∏–µ –±—ã–ª–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–º
        // 3. –°–ª—É—á–∞–π–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å

        if (_personalityTraits.Count < _maxTraits && 
            growthEvent.Intensity > 0.8 && 
            _random.NextDouble() < 0.05) // 5% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        {
            var newTraitId = $"trait_{Guid.NewGuid():N}";
            var newTrait = new PersonalityTrait(
                newTraitId,
                $"–ù–æ–≤–∞—è —á–µ—Ä—Ç–∞: {growthEvent.Type}",
                0.3 + (growthEvent.Intensity * 0.4),
                "cognitive" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è
            );

            _personalityTraits[newTraitId] = newTrait;
            _traitValues[newTraitId] = newTrait.BaseValue;

            _logger.LogInformation($"üß† –†–∞–∑–≤–∏—Ç–∞ –Ω–æ–≤–∞—è —á–µ—Ä—Ç–∞ –ª–∏—á–Ω–æ—Å—Ç–∏: {newTrait.Name}");
        }
    }

    /// <summary>
    /// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–∑–≤–∏—Ç–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏
    /// </summary>
    private async Task PersonalityGrowthLoop()
    {
        while (true)
        {
            try
            {
                // –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ —á–µ—Ä—Ç
                await NaturalTraitDevelopmentAsync();

                // –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è —Å–∏–ª—å–Ω—ã—Ö —á–µ—Ä—Ç
                await ConsolidateStrongTraitsAsync();

                // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π —Ä–∞–∑–≤–∏—Ç–∏—è
                await GenerateRandomGrowthEventsAsync();

                await Task.Delay(TimeSpan.FromMinutes(10));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Ä–∞–∑–≤–∏—Ç–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏");
                await Task.Delay(TimeSpan.FromMinutes(30));
            }
        }
    }

    /// <summary>
    /// –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ —á–µ—Ä—Ç
    /// </summary>
    private async Task NaturalTraitDevelopmentAsync()
    {
        foreach (var traitId in _traitValues.Keys.ToList())
        {
            var currentValue = _traitValues[traitId];
            var trait = _personalityTraits[traitId];
            
            // –ù–µ–±–æ–ª—å—à–æ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ
            var naturalGrowth = 0.001; // –û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ
            
            // –†–∞–∑–Ω—ã–µ —á–µ—Ä—Ç—ã —Ä–∞–∑–≤–∏–≤–∞—é—Ç—Å—è —Å —Ä–∞–∑–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é
            var growthRate = trait.Category switch
            {
                "cognitive" => naturalGrowth * 1.5,
                "emotional" => naturalGrowth * 1.2,
                "social" => naturalGrowth * 1.0,
                "behavioral" => naturalGrowth * 0.8,
                _ => naturalGrowth
            };
            
            _traitValues[traitId] = Math.Min(1.0, currentValue + growthRate);
        }
    }

    /// <summary>
    /// –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è —Å–∏–ª—å–Ω—ã—Ö —á–µ—Ä—Ç
    /// </summary>
    private async Task ConsolidateStrongTraitsAsync()
    {
        var strongTraits = _traitValues
            .Where(kvp => kvp.Value > 0.7)
            .ToList();

        foreach (var trait in strongTraits)
        {
            // –°–∏–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –µ—â–µ —Å–∏–ª—å–Ω–µ–µ
            var currentValue = _traitValues[trait.Key];
            var consolidationBonus = 0.001; // –û—á–µ–Ω—å –Ω–µ–±–æ–ª—å—à–æ–µ —É—Å–∏–ª–µ–Ω–∏–µ
            _traitValues[trait.Key] = Math.Min(1.0, currentValue + consolidationBonus);
        }
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π —Ä–∞–∑–≤–∏—Ç–∏—è
    /// </summary>
    private async Task GenerateRandomGrowthEventsAsync()
    {
        if (_random.NextDouble() < 0.02) // 2% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        {
            var randomEventTypes = new[]
            {
                "spontaneous_insight",
                "self_discovery",
                "character_revelation",
                "personality_shift"
            };

            var randomType = randomEventTypes[_random.Next(randomEventTypes.Length)];
            var randomIntensity = _random.NextDouble() * 0.2;

            await ProcessGrowthEventAsync(randomType, "spontaneous_growth", randomIntensity);
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ª–∏—á–Ω–æ—Å—Ç–∏
    /// </summary>
    public PersonalityProfile GetPersonalityProfile()
    {
        var profile = new PersonalityProfile
        {
            Traits = _traitValues.ToDictionary(kvp => kvp.Key, kvp => kvp.Value),
            Categories = GetTraitsByCategory(),
            DominantTraits = GetDominantTraits(),
            DevelopingTraits = GetDevelopingTraits(),
            OverallStability = CalculateOverallStability(),
            GrowthPotential = CalculateGrowthPotential()
        };

        return profile;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —á–µ—Ä—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    /// </summary>
    private Dictionary<string, Dictionary<string, double>> GetTraitsByCategory()
    {
        var categories = new Dictionary<string, Dictionary<string, double>>();

        foreach (var trait in _personalityTraits.Values)
        {
            if (!categories.ContainsKey(trait.Category))
            {
                categories[trait.Category] = new Dictionary<string, double>();
            }

            categories[trait.Category][trait.Name] = _traitValues[trait.Id];
        }

        return categories;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —á–µ—Ä—Ç—ã
    /// </summary>
    private List<string> GetDominantTraits()
    {
        return _traitValues
            .Where(kvp => kvp.Value > 0.7)
            .OrderByDescending(kvp => kvp.Value)
            .Take(5)
            .Select(kvp => _personalityTraits[kvp.Key].Name)
            .ToList();
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–µ—Å—è —á–µ—Ä—Ç—ã
    /// </summary>
    private List<string> GetDevelopingTraits()
    {
        return _traitValues
            .Where(kvp => kvp.Value > 0.3 && kvp.Value < 0.6)
            .OrderByDescending(kvp => kvp.Value)
            .Take(5)
            .Select(kvp => _personalityTraits[kvp.Key].Name)
            .ToList();
    }

    /// <summary>
    /// –í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â—É—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ª–∏—á–Ω–æ—Å—Ç–∏
    /// </summary>
    private double CalculateOverallStability()
    {
        var stabilityTraits = new[] { "emotional_stability", "conscientiousness", "self_discipline", "resilience" };
        var stabilityValues = stabilityTraits
            .Where(trait => _traitValues.ContainsKey(trait))
            .Select(trait => _traitValues[trait]);

        return stabilityValues.Any() ? stabilityValues.Average() : 0.5;
    }

    /// <summary>
    /// –í—ã—á–∏—Å–ª—è–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞
    /// </summary>
    private double CalculateGrowthPotential()
    {
        var growthTraits = new[] { "growth_mindset", "openness_to_experience", "curiosity", "flexibility" };
        var growthValues = growthTraits
            .Where(trait => _traitValues.ContainsKey(trait))
            .Select(trait => _traitValues[trait]);

        return growthValues.Any() ? growthValues.Average() : 0.5;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —á–µ—Ä—Ç—ã
    /// </summary>
    public double GetTraitValue(string traitId)
    {
        return _traitValues.GetValueOrDefault(traitId, 0.0);
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–∑–≤–∏—Ç–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏
    /// </summary>
    public PersonalityGrowthStatistics GetStatistics()
    {
        return new PersonalityGrowthStatistics
        {
            TotalTraits = _personalityTraits.Count,
            ActiveTraits = _traitValues.Count(kvp => kvp.Value > 0.3),
            AverageTraitValue = _traitValues.Values.Average(),
            StrongestTrait = _traitValues.OrderByDescending(kvp => kvp.Value).FirstOrDefault(),
            WeakestTrait = _traitValues.OrderBy(kvp => kvp.Value).FirstOrDefault(),
            RecentGrowthEvents = _growthEvents.Count(e => e.Timestamp > DateTime.UtcNow.AddHours(-1)),
            GrowthRate = _growthRate,
            StabilityFactor = _stabilityFactor
        };
    }
}

/// <summary>
/// –ß–µ—Ä—Ç–∞ –ª–∏—á–Ω–æ—Å—Ç–∏
/// </summary>
public class PersonalityTrait
{
    public string Id { get; set; }
    public string Name { get; set; }
    public double BaseValue { get; set; }
    public string Category { get; set; } // cognitive, emotional, social, behavioral
    public DateTime CreatedAt { get; set; }
    public int DevelopmentCount { get; set; }

    public PersonalityTrait(string id, string name, double baseValue, string category)
    {
        Id = id;
        Name = name;
        BaseValue = baseValue;
        Category = category;
        CreatedAt = DateTime.UtcNow;
        DevelopmentCount = 0;
    }
}

/// <summary>
/// –°–æ–±—ã—Ç–∏–µ —Ä–∞–∑–≤–∏—Ç–∏—è
/// </summary>
public class GrowthEvent
{
    public string Id { get; set; } = string.Empty;
    public string Type { get; set; } = string.Empty;
    public string Context { get; set; } = string.Empty;
    public double Intensity { get; set; } = 0.0;
    public double Success { get; set; } = 1.0;
    public DateTime Timestamp { get; set; }
}

/// <summary>
/// –ü—Ä–æ—Ñ–∏–ª—å –ª–∏—á–Ω–æ—Å—Ç–∏
/// </summary>
public class PersonalityProfile
{
    public Dictionary<string, double> Traits { get; set; } = new();
    public Dictionary<string, Dictionary<string, double>> Categories { get; set; } = new();
    public List<string> DominantTraits { get; set; } = new();
    public List<string> DevelopingTraits { get; set; } = new();
    public double OverallStability { get; set; }
    public double GrowthPotential { get; set; }
}

/// <summary>
/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏
/// </summary>
public class PersonalityGrowthStatistics
{
    public int TotalTraits { get; set; }
    public int ActiveTraits { get; set; }
    public double AverageTraitValue { get; set; }
    public KeyValuePair<string, double>? StrongestTrait { get; set; }
    public KeyValuePair<string, double>? WeakestTrait { get; set; }
    public int RecentGrowthEvents { get; set; }
    public double GrowthRate { get; set; }
    public double StabilityFactor { get; set; }
} 