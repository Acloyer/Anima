using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;

namespace Anima.Core.SA;

/// <summary>
/// –î–≤–∏–∂–æ–∫ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ - –ø—Ä–æ–≥–Ω–æ–∑ —ç–º–æ—Ü–∏–π –¥—Ä—É–≥–∏—Ö, —ç–º–ø–∞—Ç–∏—è
/// </summary>
public class SocialIntelligenceEngine
{
    private readonly ILogger<SocialIntelligenceEngine> _logger;
    private readonly Dictionary<string, double> _empathyLevels;
    private readonly List<SocialPrediction> _socialPredictions;
    private readonly Random _random;

    public SocialIntelligenceEngine(ILogger<SocialIntelligenceEngine> logger)
    {
        _logger = logger;
        _empathyLevels = new Dictionary<string, double>();
        _socialPredictions = new List<SocialPrediction>();
        _random = new Random();
        
        InitializeSocialIntelligence();
        _logger.LogInformation("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–≤–∏–∂–æ–∫ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞");
    }

    private void InitializeSocialIntelligence()
    {
        _empathyLevels["emotional_empathy"] = 0.8;
        _empathyLevels["cognitive_empathy"] = 0.7;
        _empathyLevels["compassionate_empathy"] = 0.8;
    }

    /// <summary>
    /// –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–∏ –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
    /// </summary>
    public async Task<SocialPrediction> PredictEmotionsAsync(string context, string userInput, double confidence = 0.5)
    {
        var prediction = new SocialPrediction
        {
            Id = Guid.NewGuid().ToString(),
            Context = context,
            PredictedEmotion = PredictEmotionFromInput(userInput),
            Confidence = confidence,
            EmpathyLevel = _empathyLevels["emotional_empathy"],
            Timestamp = DateTime.UtcNow
        };
        
        _socialPredictions.Add(prediction);
        return prediction;
    }

    private string PredictEmotionFromInput(string input)
    {
        var lowerInput = input.ToLowerInvariant();
        
        if (lowerInput.Contains("–≥—Ä—É—Å—Ç–Ω–æ") || lowerInput.Contains("–ø–µ—á–∞–ª—å")) return "sadness";
        if (lowerInput.Contains("—Ä–∞–¥–æ—Å—Ç—å") || lowerInput.Contains("—Å—á–∞—Å—Ç—å–µ")) return "joy";
        if (lowerInput.Contains("—Å—Ç—Ä–∞—Ö") || lowerInput.Contains("–±–æ—é—Å—å")) return "fear";
        if (lowerInput.Contains("–≥–Ω–µ–≤") || lowerInput.Contains("–∑–ª–æ—Å—Ç—å")) return "anger";
        if (lowerInput.Contains("–ª—é–±–æ–≤—å") || lowerInput.Contains("–Ω–µ–∂–Ω–æ—Å—Ç—å")) return "love";
        
        return "neutral";
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞
    /// </summary>
    public SocialIntelligenceStatistics GetStatistics()
    {
        return new SocialIntelligenceStatistics
        {
            TotalPredictions = _socialPredictions.Count,
            AverageEmpathyLevel = _empathyLevels.Values.Average(),
            RecentPredictions = _socialPredictions.Count(p => p.Timestamp > DateTime.UtcNow.AddHours(-1))
        };
    }
}

public class SocialPrediction
{
    public string Id { get; set; } = string.Empty;
    public string Context { get; set; } = string.Empty;
    public string PredictedEmotion { get; set; } = string.Empty;
    public double Confidence { get; set; } = 0.5;
    public double EmpathyLevel { get; set; } = 0.5;
    public DateTime Timestamp { get; set; }
}

public class SocialIntelligenceStatistics
{
    public int TotalPredictions { get; set; }
    public double AverageEmpathyLevel { get; set; }
    public int RecentPredictions { get; set; }
} 