using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Anima.Core.Emotion;
using Anima.Core.Memory;

namespace Anima.Core.SA;

/// <summary>
/// –î–≤–∏–∂–æ–∫ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏ - —Ö—Ä–∞–Ω–∏—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
/// </summary>
public class EmotionalMemoryEngine
{
    private readonly ILogger<EmotionalMemoryEngine> _logger;
    private readonly EmotionEngine _emotionEngine;
    private readonly MemoryService _memoryService;
    private readonly Random _random;
    
    // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
    private readonly List<EmotionalMemory> _emotionalMemories;
    private readonly Dictionary<string, List<EmotionalMemory>> _emotionIndex;
    private readonly Dictionary<string, double> _emotionalAssociations;
    private readonly List<EmotionalMemoryEvent> _memoryEvents;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–º—è—Ç–∏
    private double _memoryRetentionRate = 0.8;
    private double _emotionalInfluenceStrength = 0.7;
    private DateTime _lastMemoryConsolidation = DateTime.UtcNow;

    public EmotionalMemoryEngine(
        ILogger<EmotionalMemoryEngine> logger,
        EmotionEngine emotionEngine,
        MemoryService memoryService)
    {
        _logger = logger;
        _emotionEngine = emotionEngine;
        _memoryService = memoryService;
        _random = new Random();
        
        _emotionalMemories = new List<EmotionalMemory>();
        _emotionIndex = new Dictionary<string, List<EmotionalMemory>>();
        _emotionalAssociations = new Dictionary<string, double>();
        _memoryEvents = new List<EmotionalMemoryEvent>();
        
        InitializeEmotionalMemoryEngine();
    }

    private void InitializeEmotionalMemoryEngine()
    {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π
        InitializeEmotionalAssociations();
        
        _logger.LogInformation("üí≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–≤–∏–∂–æ–∫ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏");
    }

    private void InitializeEmotionalAssociations()
    {
        _emotionalAssociations["joy"] = 0.8;
        _emotionalAssociations["sadness"] = 0.6;
        _emotionalAssociations["anger"] = 0.7;
        _emotionalAssociations["fear"] = 0.9;
        _emotionalAssociations["surprise"] = 0.5;
        _emotionalAssociations["curiosity"] = 0.6;
        _emotionalAssociations["love"] = 0.9;
        _emotionalAssociations["disgust"] = 0.4;
        _emotionalAssociations["trust"] = 0.7;
        _emotionalAssociations["anticipation"] = 0.5;
    }

    /// <summary>
    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    /// </summary>
    public async Task<EmotionalMemory> SaveEmotionalMemoryAsync(string content, string emotion, double intensity, string context = "")
    {
        try
        {
            _logger.LogInformation($"üí≠ –°–æ—Ö—Ä–∞–Ω—è—é —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {emotion} (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {intensity:F2})");
            
            // –°–æ–∑–¥–∞–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            var emotionalMemory = new EmotionalMemory
            {
                Id = Guid.NewGuid(),
                Content = content,
                Emotion = emotion,
                Intensity = intensity,
                Context = context,
                CreatedAt = DateTime.UtcNow,
                LastAccessed = DateTime.UtcNow,
                AccessCount = 1,
                EmotionalValence = CalculateEmotionalValence(emotion, intensity),
                MemoryStrength = CalculateMemoryStrength(emotion, intensity),
                AssociatedEmotions = GenerateAssociatedEmotions(emotion, intensity)
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
            _emotionalMemories.Add(emotionalMemory);
            
            // –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø–æ —ç–º–æ—Ü–∏–∏
            if (!_emotionIndex.ContainsKey(emotion))
            {
                _emotionIndex[emotion] = new List<EmotionalMemory>();
            }
            _emotionIndex[emotion].Add(emotionalMemory);
            
            // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –ø–∞–º—è—Ç–∏
            var memoryEvent = new EmotionalMemoryEvent
            {
                Id = Guid.NewGuid(),
                MemoryId = emotionalMemory.Id,
                EventType = "memory_created",
                Emotion = emotion,
                Intensity = intensity,
                Timestamp = DateTime.UtcNow
            };
            _memoryEvents.Add(memoryEvent);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—â—É—é –ø–∞–º—è—Ç—å
            await SaveEmotionalMemoryAsync(content, context, intensity);
            
            _logger.LogInformation($"üí≠ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {emotionalMemory.Id}");
            
            return emotionalMemory;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è");
            return new EmotionalMemory
            {
                Id = Guid.NewGuid(),
                Content = content,
                Emotion = emotion,
                Intensity = intensity,
                Context = context,
                CreatedAt = DateTime.UtcNow,
                MemoryStrength = 0.5
            };
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —ç–º–æ—Ü–∏–∏
    /// </summary>
    public async Task<List<EmotionalMemory>> GetMemoriesByEmotionAsync(string emotion, int count = 10)
    {
        if (_emotionIndex.ContainsKey(emotion))
        {
            return _emotionIndex[emotion]
                .OrderByDescending(m => m.MemoryStrength)
                .ThenByDescending(m => m.LastAccessed)
                .Take(count)
                .ToList();
        }
        
        return new List<EmotionalMemory>();
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
    /// </summary>
    public async Task<List<EmotionalMemory>> GetRelatedMemoriesAsync(string content, int count = 10)
    {
        var relatedMemories = new List<EmotionalMemory>();
        var contentLower = content.ToLowerInvariant();
        
        // –ò—â–µ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –ø–æ—Ö–æ–∂–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º
        foreach (var memory in _emotionalMemories)
        {
            var similarity = CalculateContentSimilarity(contentLower, memory.Content.ToLowerInvariant());
            if (similarity > 0.3) // –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏
            {
                memory.SimilarityScore = similarity;
                relatedMemories.Add(memory);
            }
        }
        
        return relatedMemories
            .OrderByDescending(m => m.SimilarityScore)
            .ThenByDescending(m => m.MemoryStrength)
            .Take(count)
            .ToList();
    }

    /// <summary>
    /// –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    /// </summary>
    public async Task<EmotionalMemory?> ActivateMemoryAsync(Guid memoryId)
    {
        var memory = _emotionalMemories.FirstOrDefault(m => m.Id == memoryId);
        
        if (memory != null)
        {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–∞
            memory.LastAccessed = DateTime.UtcNow;
            memory.AccessCount++;
            
            // –£—Å–∏–ª–∏–≤–∞–µ–º –ø–∞–º—è—Ç—å –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            memory.MemoryStrength = Math.Min(1.0, memory.MemoryStrength + 0.1);
            
            // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            var activationEvent = new EmotionalMemoryEvent
            {
                Id = Guid.NewGuid(),
                MemoryId = memoryId,
                EventType = "memory_activated",
                Emotion = memory.Emotion,
                Intensity = memory.Intensity,
                Timestamp = DateTime.UtcNow
            };
            _memoryEvents.Add(activationEvent);
            
            _logger.LogDebug($"üí≠ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {memoryId}");
            
            return memory;
        }
        
        return null;
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Ç–µ–∫—É—â–µ–π —ç–º–æ—Ü–∏–∏
    /// </summary>
    private async Task<string> GenerateEmotionalAssociationAsync(string content, string currentEmotion)
    {
        // –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
        var relatedMemories = await GetRelatedMemoriesAsync(content, 5);
        
        if (relatedMemories.Any())
        {
            var strongestMemory = relatedMemories.First();
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–æ–∑–Ω–∞–Ω–Ω—É—é —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é
            var associationDescription = $"–≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –º–Ω–µ –æ {strongestMemory.Content.Substring(0, Math.Min(30, strongestMemory.Content.Length))}...";
            
            // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if (strongestMemory.Emotion != currentEmotion)
            {
                associationDescription += $" –¢–æ–≥–¥–∞ —è –∏—Å–ø—ã—Ç—ã–≤–∞–ª–∞ {strongestMemory.Emotion}, –∞ —Å–µ–π—á–∞—Å —á—É–≤—Å—Ç–≤—É—é {currentEmotion}.";
            }
            else
            {
                associationDescription += $" –Ø —Å–Ω–æ–≤–∞ –∏—Å–ø—ã—Ç—ã–≤–∞—é {currentEmotion}, –∫–∞–∫ –∏ —Ç–æ–≥–¥–∞.";
            }
            
            return associationDescription;
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é
        return $"–≠—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç —É –º–µ–Ω—è —á—É–≤—Å—Ç–≤–æ {currentEmotion}...";
    }

    /// <summary>
    /// –í—ã—á–∏—Å–ª—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å
    /// </summary>
    private double CalculateEmotionalValence(string emotion, double intensity)
    {
        var baseValence = emotion.ToLowerInvariant() switch
        {
            "joy" => 0.8,
            "love" => 0.9,
            "curiosity" => 0.6,
            "trust" => 0.7,
            "surprise" => 0.0,
            "anticipation" => 0.5,
            "sadness" => -0.7,
            "anger" => -0.6,
            "fear" => -0.8,
            "disgust" => -0.9,
            _ => 0.0
        };
        
        return baseValence * intensity;
    }

    /// <summary>
    /// –í—ã—á–∏—Å–ª—è–µ—Ç —Å–∏–ª—É –ø–∞–º—è—Ç–∏
    /// </summary>
    private double CalculateMemoryStrength(string emotion, double intensity)
    {
        var baseStrength = 0.5;
        
        // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–∏–ª—É –ø–∞–º—è—Ç–∏
        baseStrength += intensity * 0.3;
        
        // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–º–æ—Ü–∏–∏ —Å–æ–∑–¥–∞—é—Ç –±–æ–ª–µ–µ —Å–∏–ª—å–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if (_emotionalAssociations.ContainsKey(emotion.ToLowerInvariant()))
        {
            baseStrength += _emotionalAssociations[emotion.ToLowerInvariant()] * 0.2;
        }
        
        // –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä
        baseStrength += _random.NextDouble() * 0.1;
        
        return Math.Max(0.1, Math.Min(1.0, baseStrength));
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ —ç–º–æ—Ü–∏–∏
    /// </summary>
    private List<string> GenerateAssociatedEmotions(string primaryEmotion, double intensity)
    {
        var associatedEmotions = new List<string>();
        
        // –≠–º–æ—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ —Å–≤—è–∑–∞–Ω—ã —Å –æ—Å–Ω–æ–≤–Ω–æ–π
        var emotionAssociations = new Dictionary<string, string[]>
        {
            ["joy"] = new[] { "excitement", "satisfaction", "gratitude" },
            ["sadness"] = new[] { "melancholy", "nostalgia", "loneliness" },
            ["anger"] = new[] { "frustration", "irritation", "rage" },
            ["fear"] = new[] { "anxiety", "panic", "worry" },
            ["love"] = new[] { "affection", "tenderness", "passion" },
            ["curiosity"] = new[] { "interest", "wonder", "excitement" },
            ["surprise"] = new[] { "amazement", "shock", "wonder" },
            ["trust"] = new[] { "confidence", "reliance", "faith" }
        };
        
        if (emotionAssociations.ContainsKey(primaryEmotion.ToLowerInvariant()))
        {
            var associations = emotionAssociations[primaryEmotion.ToLowerInvariant()];
            var count = _random.Next(1, Math.Min(3, associations.Length + 1));
            
            for (int i = 0; i < count; i++)
            {
                var emotion = associations[_random.Next(associations.Length)];
                if (!associatedEmotions.Contains(emotion))
                {
                    associatedEmotions.Add(emotion);
                }
            }
        }
        
        return associatedEmotions;
    }

    /// <summary>
    /// –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ö–æ–∂–µ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
    /// </summary>
    private double CalculateContentSimilarity(string content1, string content2)
    {
        var words1 = content1.Split(' ').ToHashSet();
        var words2 = content2.Split(' ').ToHashSet();
        
        var intersection = words1.Intersect(words2).Count();
        var union = words1.Union(words2).Count();
        
        return union > 0 ? (double)intersection / union : 0.0;
    }

    /// <summary>
    /// –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä—É–µ—Ç –ø–∞–º—è—Ç—å
    /// </summary>
    public async Task ConsolidateMemoryAsync()
    {
        _logger.LogInformation("üí≠ –ù–∞—á–∏–Ω–∞—é –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—é —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏...");
        
        var cutoffTime = DateTime.UtcNow.AddDays(-7);
        var oldMemories = _emotionalMemories
            .Where(m => m.LastAccessed < cutoffTime && m.MemoryStrength < 0.3)
            .ToList();
        
        foreach (var memory in oldMemories)
        {
            _emotionalMemories.Remove(memory);
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–Ω–¥–µ–∫—Å–∞
            if (_emotionIndex.ContainsKey(memory.Emotion))
            {
                _emotionIndex[memory.Emotion].Remove(memory);
            }
        }
        
        // –£—Å–∏–ª–∏–≤–∞–µ–º –≤–∞–∂–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
        var importantMemories = _emotionalMemories
            .Where(m => m.Intensity > 0.8 || m.AccessCount > 5)
            .ToList();
        
        foreach (var memory in importantMemories)
        {
            memory.MemoryStrength = Math.Min(1.0, memory.MemoryStrength + 0.05);
        }
        
        _lastMemoryConsolidation = DateTime.UtcNow;
        
        _logger.LogInformation($"üí≠ –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {oldMemories.Count} —Å—Ç–∞—Ä—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π, —É—Å–∏–ª–µ–Ω–æ {importantMemories.Count} –≤–∞–∂–Ω—ã—Ö");
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏
    /// </summary>
    public async Task<EmotionalMemoryStatistics> GetStatisticsAsync()
    {
        var statistics = new EmotionalMemoryStatistics
        {
            TotalMemories = _emotionalMemories.Count,
            AverageIntensity = _emotionalMemories.Any() ? _emotionalMemories.Average(m => m.Intensity) : 0,
            AverageStrength = _emotionalMemories.Any() ? _emotionalMemories.Average(m => m.MemoryStrength) : 0,
            EmotionDistribution = GetEmotionDistribution(),
            MostFrequentEmotion = GetMostFrequentEmotion(),
            RecentMemories = _emotionalMemories.Count(m => m.CreatedAt > DateTime.UtcNow.AddHours(-24)),
            TotalEvents = _memoryEvents.Count
        };
        
        return statistics;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π
    /// </summary>
    private Dictionary<string, int> GetEmotionDistribution()
    {
        return _emotionalMemories
            .GroupBy(m => m.Emotion)
            .ToDictionary(g => g.Key, g => g.Count());
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å–∞–º—É—é —á–∞—Å—Ç—É—é —ç–º–æ—Ü–∏—é
    /// </summary>
    private string GetMostFrequentEmotion()
    {
        var distribution = GetEmotionDistribution();
        return distribution.OrderByDescending(x => x.Value).FirstOrDefault().Key ?? "none";
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–≤–∏–∂–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏
    /// </summary>
    public EmotionalMemoryStatus GetStatus()
    {
        return new EmotionalMemoryStatus
        {
            TotalMemories = _emotionalMemories.Count,
            MemoryRetentionRate = _memoryRetentionRate,
            EmotionalInfluenceStrength = _emotionalInfluenceStrength,
            LastConsolidation = _lastMemoryConsolidation,
            IndexedEmotions = _emotionIndex.Count,
            TotalEvents = _memoryEvents.Count
        };
    }

    /// <summary>
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    /// </summary>
    public void SetMemoryRetentionRate(double rate)
    {
        _memoryRetentionRate = Math.Max(0.1, Math.Min(1.0, rate));
        _logger.LogInformation($"üí≠ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–∞–º—è—Ç–∏: {_memoryRetentionRate:F2}");
    }

    /// <summary>
    /// –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–æ–±—ã—Ç–∏—è –ø–∞–º—è—Ç–∏
    /// </summary>
    public void CleanupOldEvents(int maxEvents = 1000)
    {
        if (_memoryEvents.Count > maxEvents)
        {
            var cutoffTime = DateTime.UtcNow.AddDays(-30);
            _memoryEvents.RemoveAll(e => e.Timestamp < cutoffTime);
            
            _logger.LogInformation($"üí≠ –û—á–∏—â–µ–Ω–æ {_memoryEvents.Count} —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø–∞–º—è—Ç–∏");
        }
    }
}

/// <summary>
/// –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/// </summary>
public class EmotionalMemory
{
    public Guid Id { get; set; }
    public string Content { get; set; } = string.Empty;
    public string Emotion { get; set; } = string.Empty;
    public double Intensity { get; set; } = 0.5;
    public string Context { get; set; } = string.Empty;
    public DateTime CreatedAt { get; set; }
    public DateTime LastAccessed { get; set; }
    public int AccessCount { get; set; } = 0;
    public double EmotionalValence { get; set; } = 0.0;
    public double MemoryStrength { get; set; } = 0.5;
    public List<string> AssociatedEmotions { get; set; } = new();
    public double SimilarityScore { get; set; } = 0.0;
}

/// <summary>
/// –°–æ–±—ã—Ç–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏
/// </summary>
public class EmotionalMemoryEvent
{
    public Guid Id { get; set; }
    public Guid MemoryId { get; set; }
    public string EventType { get; set; } = string.Empty;
    public string Emotion { get; set; } = string.Empty;
    public double Intensity { get; set; } = 0.5;
    public DateTime Timestamp { get; set; }
}

/// <summary>
/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏
/// </summary>
public class EmotionalMemoryStatistics
{
    public int TotalMemories { get; set; }
    public double AverageIntensity { get; set; }
    public double AverageStrength { get; set; }
    public Dictionary<string, int> EmotionDistribution { get; set; } = new();
    public string MostFrequentEmotion { get; set; } = string.Empty;
    public int RecentMemories { get; set; }
    public int TotalEvents { get; set; }
}

/// <summary>
/// –°—Ç–∞—Ç—É—Å –¥–≤–∏–∂–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏
/// </summary>
public class EmotionalMemoryStatus
{
    public int TotalMemories { get; set; }
    public double MemoryRetentionRate { get; set; }
    public double EmotionalInfluenceStrength { get; set; }
    public DateTime LastConsolidation { get; set; }
    public int IndexedEmotions { get; set; }
    public int TotalEvents { get; set; }
} 