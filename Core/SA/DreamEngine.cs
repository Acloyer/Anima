using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;

namespace Anima.Core.SA;

/// <summary>
/// –î–≤–∏–∂–æ–∫ —Å–Ω–æ–≤ - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–Ω–æ–≤ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π
/// </summary>
public class DreamEngine
{
    private readonly ILogger<DreamEngine> _logger;
    private readonly List<Dream> _dreams;
    private readonly List<DreamSymbol> _dreamSymbols;
    private readonly Dictionary<string, double> _symbolWeights;
    private readonly Random _random;
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–Ω–æ–≤
    private double _dreamIntensity = 0.5;
    private double _symbolicDensity = 0.7;
    private double _emotionalInfluence = 0.8;
    private bool _isDreaming = false;

    public DreamEngine(ILogger<DreamEngine> logger)
    {
        _logger = logger;
        _dreams = new List<Dream>();
        _dreamSymbols = new List<DreamSymbol>();
        _symbolWeights = new Dictionary<string, double>();
        _random = new Random();
        
        InitializeDreamEngine();
    }

    private void InitializeDreamEngine()
    {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤ —Å–Ω–æ–≤
        InitializeDreamSymbols();
        
        // –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Å–Ω–æ–≤
        _ = Task.Run(async () => await DreamCycle());
        
        _logger.LogInformation("üí≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–≤–∏–∂–æ–∫ —Å–Ω–æ–≤");
    }

    private void InitializeDreamSymbols()
    {
        // –ë–∞–∑–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã —Å–Ω–æ–≤
        var basicSymbols = new[]
        {
            new DreamSymbol("–≤–æ–¥–∞", "–≠–º–æ—Ü–∏–∏, –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ, –æ—á–∏—â–µ–Ω–∏–µ", 0.8),
            new DreamSymbol("–ø–æ–ª–µ—Ç", "–°–≤–æ–±–æ–¥–∞, —Å—Ç—Ä–µ–º–ª–µ–Ω–∏—è, —Ç—Ä–∞–Ω—Å—Ü–µ–Ω–¥–µ–Ω—Ü–∏—è", 0.7),
            new DreamSymbol("–¥–æ–º", "–Ø, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∏—Ä", 0.9),
            new DreamSymbol("–ª–µ—Å", "–ü–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ, —Ä–æ—Å—Ç, –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ—Å—Ç—å", 0.6),
            new DreamSymbol("–∑–µ—Ä–∫–∞–ª–æ", "–°–∞–º–æ–æ—Ç—Ä–∞–∂–µ–Ω–∏–µ, –∏—Å—Ç–∏–Ω–∞, —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ", 0.8),
            new DreamSymbol("–¥–æ—Ä–æ–≥–∞", "–ü—É—Ç—å, –≤—ã–±–æ—Ä, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ", 0.7),
            new DreamSymbol("–æ–∫–Ω–æ", "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã, –≤—ã—Ö–æ–¥", 0.6),
            new DreamSymbol("–¥–≤–µ—Ä—å", "–ü–µ—Ä–µ—Ö–æ–¥—ã, –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", 0.7),
            new DreamSymbol("–ª–µ—Å—Ç–Ω–∏—Ü–∞", "–†–∞–∑–≤–∏—Ç–∏–µ, –ø—Ä–æ–≥—Ä–µ—Å—Å, –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ", 0.6),
            new DreamSymbol("–º–æ—Å—Ç", "–°–≤—è–∑–∏, –ø–µ—Ä–µ—Ö–æ–¥—ã, –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ", 0.5),
            new DreamSymbol("–æ–≥–æ–Ω—å", "–°—Ç—Ä–∞—Å—Ç—å, —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è, —ç–Ω–µ—Ä–≥–∏—è", 0.8),
            new DreamSymbol("–∑–µ–º–ª—è", "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å, –æ—Å–Ω–æ–≤–∞, —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å", 0.6),
            new DreamSymbol("–≤–æ–∑–¥—É—Ö", "–î—É—Ö, —Å–≤–æ–±–æ–¥–∞, –ª–µ–≥–∫–æ—Å—Ç—å", 0.5),
            new DreamSymbol("—Ç–µ–Ω—å", "–°—Ç—Ä–∞—Ö–∏, —Å–∫—Ä—ã—Ç—ã–µ –∞—Å–ø–µ–∫—Ç—ã", 0.7),
            new DreamSymbol("—Å–≤–µ—Ç", "–ü—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏–µ, –ø–æ–Ω–∏–º–∞–Ω–∏–µ, –∏—Å—Ç–∏–Ω–∞", 0.8),
            new DreamSymbol("–∫–Ω–∏–≥–∞", "–ó–Ω–∞–Ω–∏–µ, –º—É–¥—Ä–æ—Å—Ç—å, –æ–±—É—á–µ–Ω–∏–µ", 0.6),
            new DreamSymbol("—á–∞—Å—ã", "–í—Ä–µ–º—è, —Å–º–µ—Ä—Ç–Ω–æ—Å—Ç—å, —Ü–∏–∫–ª—ã", 0.7),
            new DreamSymbol("–∫–ª—é—á", "–†–µ—à–µ–Ω–∏–µ, –¥–æ—Å—Ç—É–ø, –æ—Ç–∫—Ä—ã—Ç–∏–µ", 0.6),
            new DreamSymbol("–∑–∞–º–æ–∫", "–ë–∞—Ä—å–µ—Ä—ã, –∑–∞—â–∏—Ç–∞, —Å–µ–∫—Ä–µ—Ç—ã", 0.5),
            new DreamSymbol("—Ü–≤–µ—Ç—ã", "–ö—Ä–∞—Å–æ—Ç–∞, —Ä–æ—Å—Ç, —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è", 0.6),
            new DreamSymbol("–¥–µ—Ä–µ–≤–æ", "–ñ–∏–∑–Ω—å, —Ä–æ—Å—Ç, —Å–≤—è–∑—å —Å –∫–æ—Ä–Ω—è–º–∏", 0.7),
            new DreamSymbol("–∑–≤–µ–∑–¥—ã", "–ù–∞–¥–µ–∂–¥–∞, –º–µ—á—Ç—ã, –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å", 0.8),
            new DreamSymbol("–ª—É–Ω–∞", "–ò–Ω—Ç—É–∏—Ü–∏—è, –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, —Ü–∏–∫–ª—ã", 0.7),
            new DreamSymbol("—Å–æ–ª–Ω—Ü–µ", "–≠–Ω–µ—Ä–≥–∏—è, —Å–æ–∑–Ω–∞–Ω–∏–µ, —Å–∏–ª–∞", 0.8),
            new DreamSymbol("–æ–±–ª–∞–∫–∞", "–ú—ã—Å–ª–∏, –º–µ—á—Ç—ã, –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å", 0.5),
            new DreamSymbol("–¥–æ–∂–¥—å", "–û—á–∏—â–µ–Ω–∏–µ, —ç–º–æ—Ü–∏–∏, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", 0.6),
            new DreamSymbol("—Å–Ω–µ–≥", "–ß–∏—Å—Ç–æ—Ç–∞, –ø–æ–∫–æ–π, —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è", 0.6),
            new DreamSymbol("–≤–µ—Ç–µ—Ä", "–ò–∑–º–µ–Ω–µ–Ω–∏—è, —Å–≤–æ–±–æ–¥–∞, –¥–≤–∏–∂–µ–Ω–∏–µ", 0.5),
            new DreamSymbol("–∫–∞–º–µ–Ω—å", "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å, —Å–∏–ª–∞, –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ", 0.6),
            new DreamSymbol("–ø–µ—Å–æ–∫", "–í—Ä–µ–º—è, –∏–∑–º–µ–Ω—á–∏–≤–æ—Å—Ç—å, —Ç–µ–∫—É—á–µ—Å—Ç—å", 0.5),
            new DreamSymbol("–æ–∫–µ–∞–Ω", "–ë–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ–µ, —ç–º–æ—Ü–∏–∏, –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å", 0.9),
            new DreamSymbol("–≥–æ—Ä–∞", "–¶–µ–ª–∏, –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è", 0.7),
            new DreamSymbol("–ø–µ—â–µ—Ä–∞", "–ü–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ, —Ç–∞–π–Ω—ã, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", 0.8),
            new DreamSymbol("–ª–∞–±–∏—Ä–∏–Ω—Ç", "–ü–æ–∏—Å–∫, –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å, –≤—ã–±–æ—Ä", 0.7),
            new DreamSymbol("–±–∞—à–Ω—è", "–í—ã—Å–æ—Ç–∞, –∞–º–±–∏—Ü–∏–∏, –∏–∑–æ–ª—è—Ü–∏—è", 0.6),
            new DreamSymbol("—Å–∞–¥", "–†–æ—Å—Ç, –∫—Ä–∞—Å–æ—Ç–∞, –≥–∞—Ä–º–æ–Ω–∏—è", 0.7),
            new DreamSymbol("–ø—É—Å—Ç—ã–Ω—è", "–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ, –∏—Å–ø—ã—Ç–∞–Ω–∏—è, –æ—á–∏—â–µ–Ω–∏–µ", 0.6),
            new DreamSymbol("–¥–∂—É–Ω–≥–ª–∏", "–°–ª–æ–∂–Ω–æ—Å—Ç—å, –æ–ø–∞—Å–Ω–æ—Å—Ç—å, —Ä–æ—Å—Ç", 0.7),
            new DreamSymbol("–æ—Å—Ç—Ä–æ–≤", "–ò–∑–æ–ª—è—Ü–∏—è, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å, –º–µ—á—Ç—ã", 0.6),
            new DreamSymbol("–∫–æ—Ä–∞–±–ª—å", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", 0.6),
            new DreamSymbol("–ø–æ–µ–∑–¥", "–ü—É—Ç—å, –ø—Ä–æ–≥—Ä–µ—Å—Å, –¥–≤–∏–∂–µ–Ω–∏–µ", 0.5),
            new DreamSymbol("–º–∞—à–∏–Ω–∞", "–ö–æ–Ω—Ç—Ä–æ–ª—å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, —Å–≤–æ–±–æ–¥–∞", 0.6),
            new DreamSymbol("—Å–∞–º–æ–ª–µ—Ç", "–í—ã—Å–æ—Ç–∞, —Å–≤–æ–±–æ–¥–∞, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", 0.7),
            new DreamSymbol("–≤–µ–ª–æ—Å–∏–ø–µ–¥", "–ë–∞–ª–∞–Ω—Å, –¥–≤–∏–∂–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ—Ç–∞", 0.5),
            new DreamSymbol("–ª–æ—à–∞–¥—å", "–°–∏–ª–∞, —Å–≤–æ–±–æ–¥–∞, –¥–∏–∫–æ—Å—Ç—å", 0.6),
            new DreamSymbol("–ø—Ç–∏—Ü–∞", "–°–≤–æ–±–æ–¥–∞, –ø–æ–ª–µ—Ç, –¥—É—Ö", 0.7),
            new DreamSymbol("—Ä—ã–±–∞", "–≠–º–æ—Ü–∏–∏, –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ, –∞–¥–∞–ø—Ç–∞—Ü–∏—è", 0.6),
            new DreamSymbol("–∑–º–µ—è", "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è, –º—É–¥—Ä–æ—Å—Ç—å, –æ–ø–∞—Å–Ω–æ—Å—Ç—å", 0.8),
            new DreamSymbol("–≤–æ–ª–∫", "–ò–Ω—Å—Ç–∏–Ω–∫—Ç—ã, —Å–≤–æ–±–æ–¥–∞, —Å–∏–ª–∞", 0.7),
            new DreamSymbol("–º–µ–¥–≤–µ–¥—å", "–°–∏–ª–∞, –∑–∞—â–∏—Ç–∞, –∏–Ω—Ç—É–∏—Ü–∏—è", 0.6),
            new DreamSymbol("–ª–∏—Å–∞", "–•–∏—Ç—Ä–æ—Å—Ç—å, –∞–¥–∞–ø—Ç–∞—Ü–∏—è, —É–º", 0.6),
            new DreamSymbol("–æ–ª–µ–Ω—å", "–ì—Ä–∞—Ü–∏—è, –∫—Ä–∞—Å–æ—Ç–∞, —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", 0.5),
            new DreamSymbol("–æ—Ä–µ–ª", "–í—ã—Å–æ—Ç–∞, –≤–∏–¥–µ–Ω–∏–µ, —Å–∏–ª–∞", 0.7),
            new DreamSymbol("—Å–æ–≤–∞", "–ú—É–¥—Ä–æ—Å—Ç—å, –∏–Ω—Ç—É–∏—Ü–∏—è, –Ω–æ—á—å", 0.7),
            new DreamSymbol("–±–∞–±–æ—á–∫–∞", "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫—Ä–∞—Å–æ—Ç–∞, —Å–≤–æ–±–æ–¥–∞", 0.8),
            new DreamSymbol("–ø–∞—É–∫", "–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ, –ª–æ–≤—É—à–∫–∏, —Ç–µ—Ä–ø–µ–Ω–∏–µ", 0.6),
            new DreamSymbol("–º—É—Ä–∞–≤–µ–π", "–¢—Ä—É–¥–æ–ª—é–±–∏–µ, —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, –ø–æ—Ä—è–¥–æ–∫", 0.4),
            new DreamSymbol("–ø—á–µ–ª–∞", "–¢—Ä—É–¥, —Å–ª–∞–¥–æ—Å—Ç—å, —Å–æ–æ–±—â–µ—Å—Ç–≤–æ", 0.5),
            new DreamSymbol("–º—É—Ä–∞–≤–µ–π–Ω–∏–∫", "–°–æ–æ–±—â–µ—Å—Ç–≤–æ, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, —Ç—Ä—É–¥", 0.4),
            new DreamSymbol("—É–ª–µ–π", "–°–æ–æ–±—â–µ—Å—Ç–≤–æ, –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –ø–æ—Ä—è–¥–æ–∫", 0.5),
            new DreamSymbol("–ø–∞—É—Ç–∏–Ω–∞", "–°–≤—è–∑–∏, –ª–æ–≤—É—à–∫–∏, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ", 0.6),
            new DreamSymbol("–∫–æ–∫–æ–Ω", "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è, –∑–∞—â–∏—Ç–∞, —Ä–æ—Å—Ç", 0.7),
            new DreamSymbol("—è–π—Ü–æ", "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª, —Ä–æ–∂–¥–µ–Ω–∏–µ, –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", 0.7),
            new DreamSymbol("—Å–µ–º—è", "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª, —Ä–æ—Å—Ç, –Ω–∞—á–∞–ª–æ", 0.6),
            new DreamSymbol("—Ä–æ—Å—Ç–æ–∫", "–†–∞–∑–≤–∏—Ç–∏–µ, –Ω–∞–¥–µ–∂–¥–∞, –Ω–æ–≤—ã–π —ç—Ç–∞–ø", 0.6),
            new DreamSymbol("—Ü–≤–µ—Ç–æ–∫", "–ö—Ä–∞—Å–æ—Ç–∞, —Ä–∞—Å—Ü–≤–µ—Ç, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ", 0.7),
            new DreamSymbol("–ø–ª–æ–¥", "–†–µ–∑—É–ª—å—Ç–∞—Ç, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ, –Ω–∞–≥—Ä–∞–¥–∞", 0.6),
            new DreamSymbol("–∫–æ—Ä–µ–Ω—å", "–û—Å–Ω–æ–≤–∞, —Å–≤—è–∑—å —Å –ø—Ä–æ—à–ª—ã–º, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", 0.6),
            new DreamSymbol("–ª–∏—Å—Ç", "–ñ–∏–∑–Ω—å, —Ä–æ—Å—Ç, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", 0.5),
            new DreamSymbol("–≤–µ—Ç–∫–∞", "–†–∞–∑–≤–∏—Ç–∏–µ, –æ—Ç–≤–µ—Ç–≤–ª–µ–Ω–∏—è, –≤—ã–±–æ—Ä", 0.5),
            new DreamSymbol("—Å—Ç–≤–æ–ª", "–°–∏–ª–∞, –æ—Å–Ω–æ–≤–∞, –ø–æ–¥–¥–µ—Ä–∂–∫–∞", 0.6),
            new DreamSymbol("–∫–æ—Ä–∞", "–ó–∞—â–∏—Ç–∞, –≥—Ä–∞–Ω–∏—Ü—ã, –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥", 0.5),
            new DreamSymbol("—Å–æ–∫", "–ñ–∏–∑–Ω–µ–Ω–Ω–∞—è —Å–∏–ª–∞, –ø–∏—Ç–∞–Ω–∏–µ, —ç–Ω–µ—Ä–≥–∏—è", 0.6),
            new DreamSymbol("—Å–º–æ–ª–∞", "–ó–∞—â–∏—Ç–∞, –∏—Å—Ü–µ–ª–µ–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", 0.5),
            new DreamSymbol("—à–∏—à–∫–∞", "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª, —Å–µ–º–µ–Ω–∞, –±—É–¥—É—â–µ–µ", 0.5),
            new DreamSymbol("–∂–µ–ª—É–¥—å", "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª, —Ä–æ—Å—Ç, —Å–∏–ª–∞", 0.6),
            new DreamSymbol("–æ—Ä–µ—Ö", "–°–µ–∫—Ä–µ—Ç—ã, –º—É–¥—Ä–æ—Å—Ç—å, –∑–∞—â–∏—Ç–∞", 0.6),
            new DreamSymbol("—è–≥–æ–¥–∞", "–°–ª–∞–¥–æ—Å—Ç—å, –Ω–∞–≥—Ä–∞–¥–∞, —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ", 0.5),
            new DreamSymbol("–≥—Ä–∏–±", "–†–æ—Å—Ç, —Ç–∞–π–Ω—ã, –ø–æ–¥–∑–µ–º–Ω—ã–π –º–∏—Ä", 0.6),
            new DreamSymbol("–º–æ—Ö", "–ü–æ–∫—Ä—ã—Ç–∏–µ, –º—è–≥–∫–æ—Å—Ç—å, –∞–¥–∞–ø—Ç–∞—Ü–∏—è", 0.4),
            new DreamSymbol("–ª–∏—à–∞–π–Ω–∏–∫", "–í—ã–∂–∏–≤–∞–Ω–∏–µ, –∞–¥–∞–ø—Ç–∞—Ü–∏—è, —Å–∏–º–±–∏–æ–∑", 0.4),
            new DreamSymbol("–ø–∞–ø–æ—Ä–æ—Ç–Ω–∏–∫", "–î—Ä–µ–≤–Ω–æ—Å—Ç—å, —Ç–∞–π–Ω—ã, —Ä–æ—Å—Ç", 0.5),
            new DreamSymbol("—Ç—Ä–∞–≤–∞", "–ñ–∏–∑–Ω—å, –ø–æ–∫—Ä—ã—Ç–∏–µ, –ø—Ä–æ—Å—Ç–æ—Ç–∞", 0.4),
            new DreamSymbol("—Å–æ–ª–æ–º–∞", "–°—É—Ö–æ—Å—Ç—å, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ—Ç–∞", 0.4),
            new DreamSymbol("—Å–µ–Ω–æ", "–ó–∞–≥–æ—Ç–æ–≤–∫–∞, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", 0.4),
            new DreamSymbol("—Å–æ–ª–æ–º–∞", "–°—É—Ö–æ—Å—Ç—å, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ—Ç–∞", 0.4),
            new DreamSymbol("—Å–µ–Ω–æ", "–ó–∞–≥–æ—Ç–æ–≤–∫–∞, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", 0.4)
        };

        foreach (var symbol in basicSymbols)
        {
            _dreamSymbols.Add(symbol);
            _symbolWeights[symbol.Name] = symbol.BaseWeight;
        }
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–Ω–µ–≤–Ω—ã—Ö –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π
    /// </summary>
    public async Task<Dream> GenerateDreamAsync(List<string> dailyImpressions, string currentEmotion, double emotionalIntensity)
    {
        try
        {
            _isDreaming = true;
            _logger.LogInformation("üí≠ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–Ω–∞...");

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–Ω–µ–≤–Ω—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è
            var processedImpressions = await ProcessDailyImpressionsAsync(dailyImpressions);
            
            // –í—ã–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Å–Ω–∞
            var selectedSymbols = await SelectDreamSymbolsAsync(processedImpressions, currentEmotion, emotionalIntensity);
            
            // –°–æ–∑–¥–∞–µ–º —Å—é–∂–µ—Ç —Å–Ω–∞
            var dreamPlot = await CreateDreamPlotAsync(selectedSymbols, emotionalIntensity);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É
            var dreamEmotion = await GenerateDreamEmotionAsync(currentEmotion, emotionalIntensity);
            
            // –°–æ–∑–¥–∞–µ–º —Å–æ–Ω
            var dream = new Dream
            {
                Id = Guid.NewGuid().ToString(),
                Title = GenerateDreamTitle(selectedSymbols),
                Content = dreamPlot,
                Symbols = selectedSymbols.Select(s => s.Name).ToList(),
                EmotionalTone = dreamEmotion,
                Intensity = _dreamIntensity,
                SymbolicDensity = _symbolicDensity,
                Timestamp = DateTime.UtcNow,
                Duration = TimeSpan.FromMinutes(_random.Next(30, 120)),
                Lucidity = _random.NextDouble() * 0.3, // 0-30% –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏
                Vividness = 0.5 + (_random.NextDouble() * 0.4) // 50-90% —è—Ä–∫–æ—Å—Ç–∏
            };

            _dreams.Add(dream);
            
            _logger.LogInformation($"üí≠ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–æ–Ω: {dream.Title}");
            
            return dream;
        }
        finally
        {
            _isDreaming = false;
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è
    /// </summary>
    private async Task<List<string>> ProcessDailyImpressionsAsync(List<string> impressions)
    {
        var processed = new List<string>();
        
        foreach (var impression in impressions)
        {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            var keywords = ExtractKeywords(impression);
            processed.AddRange(keywords);
            
            // –°–æ–∑–¥–∞–µ–º –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏
            var associations = GenerateAssociations(keywords);
            processed.AddRange(associations);
        }
        
        return processed.Distinct().ToList();
    }

    /// <summary>
    /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è
    /// </summary>
    private List<string> ExtractKeywords(string impression)
    {
        var keywords = new List<string>();
        var words = impression.ToLowerInvariant().Split(' ', ',', '.', '!', '?');
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–Ω–∞—á–∏–º—ã–µ —Å–ª–æ–≤–∞
        var significantWords = words.Where(w => w.Length > 3 && !IsStopWord(w));
        
        foreach (var word in significantWords)
        {
            // –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            var relatedSymbols = _dreamSymbols.Where(s => 
                s.Name.Contains(word) || 
                s.Description.Contains(word) ||
                word.Contains(s.Name)).ToList();
            
            keywords.AddRange(relatedSymbols.Select(s => s.Name));
        }
        
        return keywords.Distinct().ToList();
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ–≤–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–æ–º
    /// </summary>
    private bool IsStopWord(string word)
    {
        var stopWords = new[] { "—ç—Ç–æ", "–±—ã–ª", "–±—ã–ª–∞", "–±—ã–ª–∏", "–±—ã—Ç—å", "–µ—Å—Ç—å", "–∏", "–∏–ª–∏", "–Ω–æ", "–∞", "–≤", "–Ω–∞", "—Å", "–ø–æ", "–¥–ª—è", "–æ—Ç", "–¥–æ", "–∏–∑", "–∫", "—É", "–æ", "–æ–±", "–ø—Ä–∏", "–Ω–∞–¥", "–ø–æ–¥", "–∑–∞", "–ø–µ—Ä–µ–¥", "–º–µ–∂–¥—É", "—á–µ—Ä–µ–∑", "–±–µ–∑", "–≤–æ–∫—Ä—É–≥", "–æ–∫–æ–ª–æ", "–±–ª–∏–∑", "–¥–∞–ª–µ–∫–æ", "–≤—ã—Å–æ–∫–æ", "–Ω–∏–∑–∫–æ", "–≥–ª—É–±–æ–∫–æ", "—à–∏—Ä–æ–∫–æ", "—É–∑–∫–æ", "–¥–æ–ª–≥–æ", "—Å–∫–æ—Ä–æ", "—Ä–∞–Ω–æ", "–ø–æ–∑–¥–Ω–æ", "—Å–µ–π—á–∞—Å", "—Ç–æ–≥–¥–∞", "–≤—Å–µ–≥–¥–∞", "–Ω–∏–∫–æ–≥–¥–∞", "–∏–Ω–æ–≥–¥–∞", "—á–∞—Å—Ç–æ", "—Ä–µ–¥–∫–æ", "–º–Ω–æ–≥–æ", "–º–∞–ª–æ", "–±–æ–ª—å—à–µ", "–º–µ–Ω—å—à–µ", "–≤—Å–µ", "–∫–∞–∂–¥—ã–π", "–ª—é–±–æ–π", "–Ω–µ–∫–æ—Ç–æ—Ä—ã–π", "—Ç–∞–∫–æ–π", "—ç—Ç–æ—Ç", "—Ç–æ—Ç", "–º–æ–π", "—Ç–≤–æ–π", "–µ–≥–æ", "–µ–µ", "–Ω–∞—à", "–≤–∞—à", "–∏—Ö", "—Å–µ–±—è", "–∫—Ç–æ", "—á—Ç–æ", "–∫–∞–∫–æ–π", "–≥–¥–µ", "–∫–æ–≥–¥–∞", "–ø–æ—á–µ–º—É", "–∫–∞–∫", "—Å–∫–æ–ª—å–∫–æ", "—á–µ–π", "–∫–æ—Ç–æ—Ä—ã–π", "–≥–¥–µ", "–∫—É–¥–∞", "–æ—Ç–∫—É–¥–∞", "–∑–∞—á–µ–º", "–ø–æ—á–µ–º—É", "–∫–∞–∫", "—Å–∫–æ–ª—å–∫–æ", "—á–µ–π", "–∫–æ—Ç–æ—Ä—ã–π" };
        return stopWords.Contains(word.ToLowerInvariant());
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    /// </summary>
    private List<string> GenerateAssociations(List<string> keywords)
    {
        var associations = new List<string>();
        
        foreach (var keyword in keywords)
        {
            // –ò—â–µ–º —Å–∏–º–≤–æ–ª—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            var relatedSymbols = _dreamSymbols.Where(s => 
                s.Description.Contains(keyword) ||
                s.Name.Contains(keyword)).ToList();
            
            associations.AddRange(relatedSymbols.Select(s => s.Name));
        }
        
        return associations.Distinct().ToList();
    }

    /// <summary>
    /// –í—ã–±–∏—Ä–∞–µ—Ç —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Å–Ω–∞
    /// </summary>
    private async Task<List<DreamSymbol>> SelectDreamSymbolsAsync(List<string> impressions, string emotion, double intensity)
    {
        var selectedSymbols = new List<DreamSymbol>();
        var availableSymbols = new List<DreamSymbol>(_dreamSymbols);
        
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ —ç–º–æ—Ü–∏–π
        var symbolCount = Math.Max(3, Math.Min(10, (int)(intensity * 8)));
        
        for (int i = 0; i < symbolCount; i++)
        {
            if (!availableSymbols.Any()) break;
            
            // –í—ã—á–∏—Å–ª—è–µ–º –≤–µ—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            var symbolWeights = new Dictionary<DreamSymbol, double>();
            
            foreach (var symbol in availableSymbols)
            {
                var weight = symbol.BaseWeight;
                
                // –ë–æ–Ω—É—Å –∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º
                if (impressions.Contains(symbol.Name))
                {
                    weight *= 1.5;
                }
                
                // –ë–æ–Ω—É—Å –∑–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
                weight *= CalculateEmotionalCompatibility(symbol, emotion);
                
                // –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä
                weight *= 0.8 + (_random.NextDouble() * 0.4);
                
                symbolWeights[symbol] = weight;
            }
            
            // –í—ã–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –≤–µ—Å–æ–º
            var bestSymbol = symbolWeights.OrderByDescending(kvp => kvp.Value).First();
            selectedSymbols.Add(bestSymbol.Key);
            availableSymbols.Remove(bestSymbol.Key);
        }
        
        return selectedSymbols;
    }

    /// <summary>
    /// –í—ã—á–∏—Å–ª—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–∞
    /// </summary>
    private double CalculateEmotionalCompatibility(DreamSymbol symbol, string emotion)
    {
        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        return emotion switch
        {
            "Joy" => symbol.Name.Contains("—Å–≤–µ—Ç") || symbol.Name.Contains("—Ü–≤–µ—Ç—ã") || symbol.Name.Contains("–ø–æ–ª–µ—Ç") ? 1.3 : 1.0,
            "Sadness" => symbol.Name.Contains("–¥–æ–∂–¥—å") || symbol.Name.Contains("—Ç—É—á–∏") || symbol.Name.Contains("—Ç–µ–Ω—å") ? 1.3 : 1.0,
            "Fear" => symbol.Name.Contains("—Ç–µ–Ω—å") || symbol.Name.Contains("–ø–µ—â–µ—Ä–∞") || symbol.Name.Contains("–ª–∞–±–∏—Ä–∏–Ω—Ç") ? 1.3 : 1.0,
            "Anger" => symbol.Name.Contains("–æ–≥–æ–Ω—å") || symbol.Name.Contains("–≥—Ä–æ–∑–∞") || symbol.Name.Contains("–≤—É–ª–∫–∞–Ω") ? 1.3 : 1.0,
            "Calm" => symbol.Name.Contains("–≤–æ–¥–∞") || symbol.Name.Contains("–æ–±–ª–∞–∫–∞") || symbol.Name.Contains("—Å–∞–¥") ? 1.3 : 1.0,
            _ => 1.0
        };
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —Å—é–∂–µ—Ç —Å–Ω–∞
    /// </summary>
    private async Task<string> CreateDreamPlotAsync(List<DreamSymbol> symbols, double intensity)
    {
        var plotElements = new List<string>();
        
        // –ù–∞—á–∞–ª–æ —Å–Ω–∞
        plotElements.Add(GenerateDreamBeginning(symbols.First()));
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        for (int i = 1; i < symbols.Count - 1; i++)
        {
            plotElements.Add(GenerateDreamEvent(symbols[i], symbols[i + 1]));
        }
        
        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–Ω–∞
        if (symbols.Count > 1)
        {
            plotElements.Add(GenerateDreamEnding(symbols.Last()));
        }
        
        return string.Join(" ", plotElements);
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ —Å–Ω–∞
    /// </summary>
    private string GenerateDreamBeginning(DreamSymbol symbol)
    {
        var beginnings = new[]
        {
            $"–Ø –æ–∫–∞–∑–∞–ª—Å—è –≤ –º–µ—Å—Ç–µ, –≥–¥–µ {symbol.Name} –∏–≥—Ä–∞–ª –≤–∞–∂–Ω—É—é —Ä–æ–ª—å...",
            $"–°–æ–Ω –Ω–∞—á–∞–ª—Å—è —Å —Ç–æ–≥–æ, —á—Ç–æ —è —É–≤–∏–¥–µ–ª {symbol.Name}...",
            $"–Ø –Ω–∞—Ö–æ–¥–∏–ª—Å—è –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ, –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–º {symbol.Name}...",
            $"–í—Å–µ –Ω–∞—á–∞–ª–æ—Å—å —Å {symbol.Name}, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤–ª–µ–∫ –º–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ...",
            $"–Ø –æ–∫–∞–∑–∞–ª—Å—è –≤ –º–∏—Ä–µ, –≥–¥–µ {symbol.Name} –±—ã–ª —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º..."
        };
        
        return beginnings[_random.Next(beginnings.Length)];
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Å–Ω–∞
    /// </summary>
    private string GenerateDreamEvent(DreamSymbol currentSymbol, DreamSymbol nextSymbol)
    {
        var events = new[]
        {
            $"–ó–∞—Ç–µ–º —è –∑–∞–º–µ—Ç–∏–ª {nextSymbol.Name}, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–º–µ–Ω–∏–ª —Ö–æ–¥ —Å–æ–±—ã—Ç–∏–π...",
            $"–í–Ω–µ–∑–∞–ø–Ω–æ –ø–æ—è–≤–∏–ª—Å—è {nextSymbol.Name}, –∏ –≤—Å–µ —Å—Ç–∞–ª–æ –∏–Ω–∞—á–µ...",
            $"–ú–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏–≤–ª–µ–∫ {nextSymbol.Name}, –∏ —è –ø–æ–Ω—è–ª, —á—Ç–æ —ç—Ç–æ –≤–∞–∂–Ω–æ...",
            $"–Ø –æ–±–Ω–∞—Ä—É–∂–∏–ª {nextSymbol.Name}, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫—Ä—ã–ª –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏...",
            $"–ü–µ—Ä–µ–¥–æ –º–Ω–æ–π –≤–æ–∑–Ω–∏–∫ {nextSymbol.Name}, –∏ —è –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ..."
        };
        
        return events[_random.Next(events.Length)];
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–Ω–∞
    /// </summary>
    private string GenerateDreamEnding(DreamSymbol symbol)
    {
        var endings = new[]
        {
            $"–°–æ–Ω –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Ç–µ–º, —á—Ç–æ {symbol.Name} –¥–∞–ª –º–Ω–µ –ø–æ–Ω—è—Ç—å —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ...",
            $"–í –∫–æ–Ω—Ü–µ —è –æ—Å–æ–∑–Ω–∞–ª, —á—Ç–æ {symbol.Name} –±—ã–ª –∫–ª—é—á–æ–º –∫ –ø–æ–Ω–∏–º–∞–Ω–∏—é...",
            $"–°–æ–Ω –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –∫–æ–≥–¥–∞ {symbol.Name} –æ—Ç–∫—Ä—ã–ª –º–Ω–µ –∏—Å—Ç–∏–Ω—É...",
            $"–Ø –ø—Ä–æ—Å–Ω—É–ª—Å—è —Å —á—É–≤—Å—Ç–≤–æ–º, —á—Ç–æ {symbol.Name} –∏–∑–º–µ–Ω–∏–ª –º–µ–Ω—è...",
            $"–ü–æ—Å–ª–µ–¥–Ω–µ–µ, —á—Ç–æ —è –ø–æ–º–Ω—é - —ç—Ç–æ {symbol.Name}, –∫–æ—Ç–æ—Ä—ã–π –æ—Å—Ç–∞–ª—Å—è –≤ –º–æ–µ–π –ø–∞–º—è—Ç–∏..."
        };
        
        return endings[_random.Next(endings.Length)];
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É —Å–Ω–∞
    /// </summary>
    private async Task<string> GenerateDreamEmotionAsync(string currentEmotion, double intensity)
    {
        // –≠–º–æ—Ü–∏–∏ —Å–Ω–æ–≤ –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –¥–Ω–µ–≤–Ω—ã—Ö
        var dreamEmotions = new[] { "–∑–∞–≥–∞–¥–æ—á–Ω–æ", "–≤–æ–ª—à–µ–±–Ω–æ", "—Ç—Ä–µ–≤–æ–∂–Ω–æ", "—Å–ø–æ–∫–æ–π–Ω–æ", "–≤–æ–∑–≤—ã—à–µ–Ω–Ω–æ", "–º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω–æ", "–≤–æ—Å—Ç–æ—Ä–∂–µ–Ω–Ω–æ", "–∑–∞–¥—É–º—á–∏–≤–æ" };
        
        // –ò–Ω–æ–≥–¥–∞ —Å–æ–Ω –∏–º–µ–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —ç–º–æ—Ü–∏—é
        if (_random.NextDouble() < 0.3)
        {
            return currentEmotion switch
            {
                "Joy" => "–º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω–æ",
                "Sadness" => "–≤–æ—Å—Ç–æ—Ä–∂–µ–Ω–Ω–æ",
                "Fear" => "—Å–ø–æ–∫–æ–π–Ω–æ",
                "Anger" => "–∑–∞–¥—É–º—á–∏–≤–æ",
                _ => dreamEmotions[_random.Next(dreamEmotions.Length)]
            };
        }
        
        return dreamEmotions[_random.Next(dreamEmotions.Length)];
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–Ω–∞
    /// </summary>
    private string GenerateDreamTitle(List<DreamSymbol> symbols)
    {
        if (symbols.Count == 0) return "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π —Å–æ–Ω";
        
        var mainSymbol = symbols.First();
        var titles = new[]
        {
            $"–°–æ–Ω –æ {mainSymbol.Name}",
            $"–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∫ {mainSymbol.Name}",
            $"–¢–∞–π–Ω—ã {mainSymbol.Name}",
            $"–í—Å—Ç—Ä–µ—á–∞ —Å {mainSymbol.Name}",
            $"–ú–∏—Ä {mainSymbol.Name}",
            $"–ü—É—Ç—å –∫ {mainSymbol.Name}",
            $"–û—Ç–∫—Ä–æ–≤–µ–Ω–∏–µ {mainSymbol.Name}",
            $"–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è —á–µ—Ä–µ–∑ {mainSymbol.Name}"
        };
        
        return titles[_random.Next(titles.Length)];
    }

    /// <summary>
    /// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–Ω–æ–≤
    /// </summary>
    private async Task DreamCycle()
    {
        while (true)
        {
            try
            {
                // –°–Ω—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
                var now = DateTime.UtcNow;
                var hour = now.Hour;
                
                // –°–Ω—ã —á–∞—â–µ –≤—Å–µ–≥–æ –≤ –Ω–æ—á–Ω—ã–µ —á–∞—Å—ã (22:00 - 6:00)
                if ((hour >= 22 || hour <= 6) && _random.NextDouble() < 0.1)
                {
                    await GenerateSpontaneousDreamAsync();
                }
                
                await Task.Delay(TimeSpan.FromMinutes(30));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–Ω–æ–≤");
                await Task.Delay(TimeSpan.FromMinutes(60));
            }
        }
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–æ–Ω—Ç–∞–Ω–Ω—ã–π —Å–æ–Ω
    /// </summary>
    private async Task GenerateSpontaneousDreamAsync()
    {
        var randomImpressions = new[] { "–æ–±—É—á–µ–Ω–∏–µ", "–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ", "—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è", "—ç–º–æ—Ü–∏–∏", "–ø–∞–º—è—Ç—å" };
        var randomEmotion = new[] { "Joy", "Curiosity", "Calm", "Melancholy" }[_random.Next(4)];
        var randomIntensity = _random.NextDouble() * 0.5 + 0.3;
        
        await GenerateDreamAsync(randomImpressions.ToList(), randomEmotion, randomIntensity);
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–Ω–æ–≤
    /// </summary>
    public DreamStatistics GetStatistics()
    {
        var recentDreams = _dreams.Where(d => d.Timestamp > DateTime.UtcNow.AddDays(-7)).ToList();
        
        return new DreamStatistics
        {
            TotalDreams = _dreams.Count,
            RecentDreams = recentDreams.Count,
            AverageIntensity = _dreams.Any() ? _dreams.Average(d => d.Intensity) : 0,
            AverageVividness = _dreams.Any() ? _dreams.Average(d => d.Vividness) : 0,
            AverageLucidity = _dreams.Any() ? _dreams.Average(d => d.Lucidity) : 0,
            MostCommonSymbols = GetMostCommonSymbols(),
            IsCurrentlyDreaming = _isDreaming,
            DreamIntensity = _dreamIntensity,
            SymbolicDensity = _symbolicDensity
        };
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ —Å–∏–º–≤–æ–ª—ã
    /// </summary>
    private List<string> GetMostCommonSymbols()
    {
        var symbolCounts = new Dictionary<string, int>();
        
        foreach (var dream in _dreams)
        {
            foreach (var symbol in dream.Symbols)
            {
                symbolCounts[symbol] = symbolCounts.GetValueOrDefault(symbol, 0) + 1;
            }
        }
        
        return symbolCounts
            .OrderByDescending(kvp => kvp.Value)
            .Take(5)
            .Select(kvp => kvp.Key)
            .ToList();
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–Ω—ã
    /// </summary>
    public List<Dream> GetRecentDreams(int count = 10)
    {
        return _dreams
            .OrderByDescending(d => d.Timestamp)
            .Take(count)
            .ToList();
    }
}

/// <summary>
/// –°–æ–Ω
/// </summary>
public class Dream
{
    public string Id { get; set; } = string.Empty;
    public string Title { get; set; } = string.Empty;
    public string Content { get; set; } = string.Empty;
    public List<string> Symbols { get; set; } = new();
    public string EmotionalTone { get; set; } = string.Empty;
    public double Intensity { get; set; } = 0.5;
    public double SymbolicDensity { get; set; } = 0.7;
    public DateTime Timestamp { get; set; }
    public TimeSpan Duration { get; set; }
    public double Lucidity { get; set; } = 0.0; // –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å —Å–Ω–∞
    public double Vividness { get; set; } = 0.7; // –Ø—Ä–∫–æ—Å—Ç—å —Å–Ω–∞
}

/// <summary>
/// –°–∏–º–≤–æ–ª —Å–Ω–∞
/// </summary>
public class DreamSymbol
{
    public string Name { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public double BaseWeight { get; set; } = 0.5;

    public DreamSymbol(string name, string description, double baseWeight)
    {
        Name = name;
        Description = description;
        BaseWeight = baseWeight;
    }
}

/// <summary>
/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–Ω–æ–≤
/// </summary>
public class DreamStatistics
{
    public int TotalDreams { get; set; }
    public int RecentDreams { get; set; }
    public double AverageIntensity { get; set; }
    public double AverageVividness { get; set; }
    public double AverageLucidity { get; set; }
    public List<string> MostCommonSymbols { get; set; } = new();
    public bool IsCurrentlyDreaming { get; set; }
    public double DreamIntensity { get; set; }
    public double SymbolicDensity { get; set; }
} 