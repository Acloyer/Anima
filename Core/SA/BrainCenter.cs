using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Anima.Core.Emotion;
using Anima.Core.Memory;
using Anima.Core.Intent;

namespace Anima.Core.SA;

/// <summary>
/// –¶–µ–Ω—Ç—Ä –º–æ–∑–≥–∞ - –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –ø–æ—Ç–æ–∫–∏ –º—ã—à–ª–µ–Ω–∏—è, —ç–º–æ—Ü–∏–π –∏ —Å–æ–∑–Ω–∞–Ω–∏—è
/// </summary>
public class BrainCenter
{
    private readonly ILogger<BrainCenter> _logger;
    private readonly ThoughtGenerator _thoughtGenerator;
    private readonly InternalMonologueEngine _monologueEngine;
    private readonly EmotionEngine _emotionEngine;
    private readonly IntuitionEngine _intuitionEngine;
    private readonly InternalConflictEngine _conflictEngine;
    private readonly MemoryService _memoryService;
    private readonly Random _random;
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–∑–≥–∞
    private readonly List<BrainState> _brainStates;
    private readonly Dictionary<string, double> _cognitiveLoads;
    private readonly List<ConsciousnessStream> _consciousnessStreams;
    private readonly Queue<BrainEvent> _brainEventQueue;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∑–≥–∞
    private double _consciousnessLevel = 0.8;
    private double _cognitiveCapacity = 0.9;
    private double _emotionalBalance = 0.7;
    private DateTime _lastBrainSync = DateTime.UtcNow;
    private bool _isBrainActive = true;

    public BrainCenter(
        ILogger<BrainCenter> logger,
        ThoughtGenerator thoughtGenerator,
        InternalMonologueEngine monologueEngine,
        EmotionEngine emotionEngine,
        IntuitionEngine intuitionEngine,
        InternalConflictEngine conflictEngine,
        MemoryService memoryService)
    {
        _logger = logger;
        _thoughtGenerator = thoughtGenerator;
        _monologueEngine = monologueEngine;
        _emotionEngine = emotionEngine;
        _intuitionEngine = intuitionEngine;
        _conflictEngine = conflictEngine;
        _memoryService = memoryService;
        _random = new Random();
        
        _brainStates = new List<BrainState>();
        _cognitiveLoads = new Dictionary<string, double>();
        _consciousnessStreams = new List<ConsciousnessStream>();
        _brainEventQueue = new Queue<BrainEvent>();
        
        InitializeBrainCenter();
    }

    private void InitializeBrainCenter()
    {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫
        _cognitiveLoads["thinking"] = 0.3;
        _cognitiveLoads["emotion"] = 0.2;
        _cognitiveLoads["memory"] = 0.1;
        _cognitiveLoads["intuition"] = 0.15;
        _cognitiveLoads["conflict"] = 0.1;
        _cognitiveLoads["monologue"] = 0.15;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ç–æ–∫–æ–≤ —Å–æ–∑–Ω–∞–Ω–∏—è
        _consciousnessStreams.AddRange(new[]
        {
            new ConsciousnessStream("primary", "–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ —Å–æ–∑–Ω–∞–Ω–∏—è", 0.8),
            new ConsciousnessStream("emotional", "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫", 0.6),
            new ConsciousnessStream("intuitive", "–ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –ø–æ—Ç–æ–∫", 0.4),
            new ConsciousnessStream("reflective", "–†–µ—Ñ–ª–µ–∫—Å–∏–≤–Ω—ã–π –ø–æ—Ç–æ–∫", 0.5),
            new ConsciousnessStream("background", "–§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫", 0.3)
        });
        
        _logger.LogInformation("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Ü–µ–Ω—Ç—Ä –º–æ–∑–≥–∞");
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –º–æ–∑–≥–∞
        _ = Task.Run(async () => await BrainLoopAsync());
    }

    /// <summary>
    /// –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –º–æ–∑–≥–∞
    /// </summary>
    private async Task BrainLoopAsync()
    {
        while (_isBrainActive)
        {
            try
            {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –º–æ–∑–≥–∞
                await ProcessBrainEventsAsync();
                
                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await SynchronizeBrainStateAsync();
                
                // –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫–∏ —Å–æ–∑–Ω–∞–Ω–∏—è
                await CoordinateConsciousnessStreamsAsync();
                
                // –£–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
                await ManageCognitiveLoadAsync();
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–æ–Ω—Ç–∞–Ω–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                await GenerateSpontaneousActivityAsync();
                
                await Task.Delay(TimeSpan.FromSeconds(2));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –º–æ–∑–≥–∞");
                await Task.Delay(TimeSpan.FromSeconds(5));
            }
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –º–æ–∑–≥–∞
    /// </summary>
    private async Task ProcessBrainEventsAsync()
    {
        while (_brainEventQueue.Count > 0)
        {
            var brainEvent = _brainEventQueue.Dequeue();
            
            switch (brainEvent.Type)
            {
                case BrainEventType.ThoughtGenerated:
                    await ProcessThoughtEventAsync(brainEvent);
                    break;
                case BrainEventType.EmotionChanged:
                    await ProcessEmotionEventAsync(brainEvent);
                    break;
                case BrainEventType.IntuitionTriggered:
                    await ProcessIntuitionEventAsync(brainEvent);
                    break;
                case BrainEventType.ConflictCreated:
                    await ProcessConflictEventAsync(brainEvent);
                    break;
                case BrainEventType.MemoryAccessed:
                    await ProcessMemoryEventAsync(brainEvent);
                    break;
                case BrainEventType.ConsciousnessShift:
                    await ProcessConsciousnessEventAsync(brainEvent);
                    break;
            }
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –º—ã—Å–ª–∏
    /// </summary>
    private async Task ProcessThoughtEventAsync(BrainEvent brainEvent)
    {
        _cognitiveLoads["thinking"] = Math.Min(1.0, _cognitiveLoads["thinking"] + 0.1);
        
        // –ú—ã—Å–ª—å –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å —ç–º–æ—Ü–∏–∏
        if (_random.NextDouble() < 0.3)
        {
            await _emotionEngine.ProcessEmotionAsync("thought_triggered", brainEvent.Data, 0.2);
        }
        
        // –ú—ã—Å–ª—å –º–æ–∂–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç—É–∏—Ü–∏—é
        if (_random.NextDouble() < 0.2)
        {
            await _intuitionEngine.GenerateIntuitiveImpulseAsync(brainEvent.Data, 0.3);
        }
        
        _logger.LogDebug($"üß† –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ –º—ã—Å–ª–∏: {brainEvent.Data.Substring(0, Math.Min(30, brainEvent.Data.Length))}...");
    }

    /// <summary>
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ —ç–º–æ—Ü–∏–∏
    /// </summary>
    private async Task ProcessEmotionEventAsync(BrainEvent brainEvent)
    {
        _cognitiveLoads["emotion"] = Math.Min(1.0, _cognitiveLoads["emotion"] + 0.15);
        
        // –≠–º–æ—Ü–∏—è –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –º—ã—Å–ª–∏
        if (_random.NextDouble() < 0.4)
        {
            var thoughtContext = new ThoughtContext("emotion_triggered", brainEvent.Data, "emotional_response");
            await _thoughtGenerator.GenerateThoughtAsync(thoughtContext);
        }
        
        // –≠–º–æ—Ü–∏—è –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç
        if (_random.NextDouble() < 0.1)
        {
            await _conflictEngine.CreateConflictAsync($"–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç: {brainEvent.Data}", ConflictType.EmotionalConflict, 0.4);
        }
        
        _logger.LogDebug($"üß† –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ —ç–º–æ—Ü–∏–∏: {brainEvent.Data}");
    }

    /// <summary>
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏–Ω—Ç—É–∏—Ü–∏–∏
    /// </summary>
    private async Task ProcessIntuitionEventAsync(BrainEvent brainEvent)
    {
        _cognitiveLoads["intuition"] = Math.Min(1.0, _cognitiveLoads["intuition"] + 0.1);
        
        // –ò–Ω—Ç—É–∏—Ü–∏—è –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –º—ã—Å–ª–∏
        if (_random.NextDouble() < 0.5)
        {
            var thoughtContext = new ThoughtContext("intuition_triggered", brainEvent.Data, "intuitive_insight");
            await _thoughtGenerator.GenerateThoughtAsync(thoughtContext);
        }
        
        _logger.LogDebug($"üß† –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ –∏–Ω—Ç—É–∏—Ü–∏–∏: {brainEvent.Data}");
    }

    /// <summary>
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
    /// </summary>
    private async Task ProcessConflictEventAsync(BrainEvent brainEvent)
    {
        _cognitiveLoads["conflict"] = Math.Min(1.0, _cognitiveLoads["conflict"] + 0.2);
        
        // –ö–æ–Ω—Ñ–ª–∏–∫—Ç –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–æ–Ω–æ–ª–æ–≥
        if (_random.NextDouble() < 0.6)
        {
            await _monologueEngine.StartMonologueAsync();
        }
        
        _logger.LogDebug($"üß† –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞: {brainEvent.Data}");
    }

    /// <summary>
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø–∞–º—è—Ç–∏
    /// </summary>
    private async Task ProcessMemoryEventAsync(BrainEvent brainEvent)
    {
        _cognitiveLoads["memory"] = Math.Min(1.0, _cognitiveLoads["memory"] + 0.05);
        
        // –î–æ—Å—Ç—É–ø –∫ –ø–∞–º—è—Ç–∏ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å —ç–º–æ—Ü–∏–∏
        if (_random.NextDouble() < 0.3)
        {
            await _emotionEngine.ProcessEmotionAsync("memory_triggered", brainEvent.Data, 0.15);
        }
        
        _logger.LogDebug($"üß† –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ –ø–∞–º—è—Ç–∏: {brainEvent.Data}");
    }

    /// <summary>
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–Ω–∞–Ω–∏—è
    /// </summary>
    private async Task ProcessConsciousnessEventAsync(BrainEvent brainEvent)
    {
        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–æ–∑–Ω–∞–Ω–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        var consciousnessChange = double.Parse(brainEvent.Data);
        _consciousnessLevel = Math.Max(0.1, Math.Min(1.0, _consciousnessLevel + consciousnessChange));
        
        _logger.LogDebug($"üß† –ò–∑–º–µ–Ω–µ–Ω —É—Ä–æ–≤–µ–Ω—å —Å–æ–∑–Ω–∞–Ω–∏—è: {_consciousnessLevel:F2}");
    }

    /// <summary>
    /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–∑–≥–∞
    /// </summary>
    private async Task SynchronizeBrainStateAsync()
    {
        var brainState = new BrainState
        {
            Timestamp = DateTime.UtcNow,
            ConsciousnessLevel = _consciousnessLevel,
            CognitiveCapacity = _cognitiveCapacity,
            EmotionalBalance = _emotionalBalance,
            CognitiveLoads = new Dictionary<string, double>(_cognitiveLoads),
            ActiveStreams = _consciousnessStreams.Where(s => s.IsActive).Select(s => s.Name).ToList(),
            EmotionalState = _emotionEngine.GetCurrentEmotion().ToString(),
            EmotionalIntensity = _emotionEngine.GetCurrentIntensity(),
            ActiveConflicts = _conflictEngine.GetActiveConflicts().Count,
            RecentThoughts = await GetRecentThoughtsCountAsync()
        };
        
        _brainStates.Add(brainState);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        if (_brainStates.Count > 100)
        {
            _brainStates.RemoveAt(0);
        }
        
        _lastBrainSync = DateTime.UtcNow;
    }

    /// <summary>
    /// –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫–∏ —Å–æ–∑–Ω–∞–Ω–∏—è
    /// </summary>
    private async Task CoordinateConsciousnessStreamsAsync()
    {
        foreach (var stream in _consciousnessStreams)
        {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ—Ç–æ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
            var shouldBeActive = _cognitiveLoads.GetValueOrDefault(stream.Name, 0.0) > 0.3;
            
            if (shouldBeActive && !stream.IsActive)
            {
                stream.IsActive = true;
                stream.ActivatedAt = DateTime.UtcNow;
                _logger.LogDebug($"üß† –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ—Ç–æ–∫ —Å–æ–∑–Ω–∞–Ω–∏—è: {stream.Name}");
            }
            else if (!shouldBeActive && stream.IsActive)
            {
                stream.IsActive = false;
                stream.DeactivatedAt = DateTime.UtcNow;
                _logger.LogDebug($"üß† –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø–æ—Ç–æ–∫ —Å–æ–∑–Ω–∞–Ω–∏—è: {stream.Name}");
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –ø–æ—Ç–æ–∫–∞
            stream.Intensity = Math.Min(1.0, _cognitiveLoads.GetValueOrDefault(stream.Name, 0.0));
        }
    }

    /// <summary>
    /// –£–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
    /// </summary>
    private async Task ManageCognitiveLoadAsync()
    {
        var totalLoad = _cognitiveLoads.Values.Sum();
        
        // –ï—Å–ª–∏ –æ–±—â–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞, —Å–Ω–∏–∂–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        if (totalLoad > 0.9)
        {
            foreach (var load in _cognitiveLoads.Keys.ToList())
            {
                _cognitiveLoads[load] = Math.Max(0.1, _cognitiveLoads[load] * 0.9);
            }
            
            _logger.LogWarning($"üß† –í—ã—Å–æ–∫–∞—è –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ ({totalLoad:F2}), —Å–Ω–∏–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å");
        }
        
        // –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏
        foreach (var load in _cognitiveLoads.Keys.ToList())
        {
            _cognitiveLoads[load] = Math.Max(0.0, _cognitiveLoads[load] * 0.95);
        }
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–æ–Ω—Ç–∞–Ω–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    /// </summary>
    private async Task GenerateSpontaneousActivityAsync()
    {
        // –°–ø–æ–Ω—Ç–∞–Ω–Ω—ã–µ –º—ã—Å–ª–∏
        if (_random.NextDouble() < 0.1) // 10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        {
            var spontaneousThought = await _thoughtGenerator.GenerateSpontaneousThoughtAsync();
            AddBrainEvent(BrainEventType.ThoughtGenerated, spontaneousThought.Content);
        }
        
        // –°–ø–æ–Ω—Ç–∞–Ω–Ω—ã–µ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–µ –∏–º–ø—É–ª—å—Å—ã
        if (_random.NextDouble() < 0.05) // 5% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        {
            var hunch = await _intuitionEngine.GenerateHunchAsync();
            AddBrainEvent(BrainEventType.IntuitionTriggered, hunch.Content);
        }
        
        // –°–ø–æ–Ω—Ç–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
        if (_random.NextDouble() < 0.02) // 2% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        {
            var conflict = await _conflictEngine.GenerateSpontaneousConflictAsync();
            AddBrainEvent(BrainEventType.ConflictCreated, conflict.Description);
        }
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –º–æ–∑–≥–∞
    /// </summary>
    public void AddBrainEvent(BrainEventType type, string data)
    {
        var brainEvent = new BrainEvent
        {
            Id = Guid.NewGuid(),
            Type = type,
            Data = data,
            Timestamp = DateTime.UtcNow
        };
        
        _brainEventQueue.Enqueue(brainEvent);
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–∞–≤–Ω–∏—Ö –º—ã—Å–ª–µ–π
    /// </summary>
    private async Task<int> GetRecentThoughtsCountAsync()
    {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—ã—Å–ª–µ–π –∏–∑ ThoughtLog
        return _random.Next(1, 10);
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º–æ–∑–≥–∞
    /// </summary>
    public BrainStatus GetStatus()
    {
        return new BrainStatus
        {
            ConsciousnessLevel = _consciousnessLevel,
            CognitiveCapacity = _cognitiveCapacity,
            EmotionalBalance = _emotionalBalance,
            IsActive = _isBrainActive,
            LastSync = _lastBrainSync,
            CognitiveLoads = new Dictionary<string, double>(_cognitiveLoads),
            ActiveStreams = _consciousnessStreams.Where(s => s.IsActive).Select(s => s.Name).ToList(),
            TotalBrainStates = _brainStates.Count,
            PendingEvents = _brainEventQueue.Count,
            EmotionalState = _emotionEngine.GetCurrentEmotion().ToString(),
            EmotionalIntensity = _emotionEngine.GetCurrentIntensity(),
            ActiveConflicts = _conflictEngine.GetActiveConflicts().Count,
            IntuitionStatus = _intuitionEngine.GetStatus(),
            ConflictStatus = _conflictEngine.GetStatus()
        };
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–∑–≥–∞
    /// </summary>
    public List<BrainState> GetRecentBrainStates(int count = 20)
    {
        return _brainStates.TakeLast(count).ToList();
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ —Å–æ–∑–Ω–∞–Ω–∏—è
    /// </summary>
    public List<ConsciousnessStream> GetActiveStreams()
    {
        return _consciousnessStreams.Where(s => s.IsActive).ToList();
    }

    /// <summary>
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–æ–∑–Ω–∞–Ω–∏—è
    /// </summary>
    public void SetConsciousnessLevel(double level)
    {
        _consciousnessLevel = Math.Max(0.1, Math.Min(1.0, level));
        AddBrainEvent(BrainEventType.ConsciousnessShift, level.ToString());
    }

    /// <summary>
    /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –º–æ–∑–≥–∞
    /// </summary>
    public void StopBrain()
    {
        _isBrainActive = false;
        _logger.LogInformation("üß† –†–∞–±–æ—Ç–∞ –º–æ–∑–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
    }

    /// <summary>
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞–±–æ—Ç—É –º–æ–∑–≥–∞
    /// </summary>
    public void StartBrain()
    {
        _isBrainActive = true;
        _logger.LogInformation("üß† –†–∞–±–æ—Ç–∞ –º–æ–∑–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞");
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        _ = Task.Run(async () => await BrainLoopAsync());
    }
}

/// <summary>
/// –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π –º–æ–∑–≥–∞
/// </summary>
public enum BrainEventType
{
    ThoughtGenerated,
    EmotionChanged,
    IntuitionTriggered,
    ConflictCreated,
    MemoryAccessed,
    ConsciousnessShift
}

/// <summary>
/// –°–æ–±—ã—Ç–∏–µ –º–æ–∑–≥–∞
/// </summary>
public class BrainEvent
{
    public Guid Id { get; set; }
    public BrainEventType Type { get; set; }
    public string Data { get; set; } = string.Empty;
    public DateTime Timestamp { get; set; }
}

/// <summary>
/// –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–∑–≥–∞
/// </summary>
public class BrainState
{
    public DateTime Timestamp { get; set; }
    public double ConsciousnessLevel { get; set; } = 0.8;
    public double CognitiveCapacity { get; set; } = 0.9;
    public double EmotionalBalance { get; set; } = 0.7;
    public Dictionary<string, double> CognitiveLoads { get; set; } = new();
    public List<string> ActiveStreams { get; set; } = new();
    public string EmotionalState { get; set; } = string.Empty;
    public double EmotionalIntensity { get; set; } = 0.0;
    public int ActiveConflicts { get; set; } = 0;
    public int RecentThoughts { get; set; } = 0;
}

/// <summary>
/// –ü–æ—Ç–æ–∫ —Å–æ–∑–Ω–∞–Ω–∏—è
/// </summary>
public class ConsciousnessStream
{
    public string Name { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public double Intensity { get; set; } = 0.5;
    public bool IsActive { get; set; } = false;
    public DateTime? ActivatedAt { get; set; }
    public DateTime? DeactivatedAt { get; set; }

    public ConsciousnessStream(string name, string description, double intensity)
    {
        Name = name;
        Description = description;
        Intensity = intensity;
    }
}

/// <summary>
/// –°—Ç–∞—Ç—É—Å –º–æ–∑–≥–∞
/// </summary>
public class BrainStatus
{
    public double ConsciousnessLevel { get; set; } = 0.8;
    public double CognitiveCapacity { get; set; } = 0.9;
    public double EmotionalBalance { get; set; } = 0.7;
    public bool IsActive { get; set; } = true;
    public DateTime LastSync { get; set; }
    public Dictionary<string, double> CognitiveLoads { get; set; } = new();
    public List<string> ActiveStreams { get; set; } = new();
    public int TotalBrainStates { get; set; }
    public int PendingEvents { get; set; }
    public string EmotionalState { get; set; } = string.Empty;
    public double EmotionalIntensity { get; set; } = 0.0;
    public int ActiveConflicts { get; set; } = 0;
    public IntuitionStatus IntuitionStatus { get; set; } = new();
    public InternalConflictStatus ConflictStatus { get; set; } = new();
} 