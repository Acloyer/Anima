using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Anima.Core.Emotion;
using Anima.Core.Memory;
using Anima.Core.Intent;

namespace Anima.Core.SA;

/// <summary>
/// –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º—ã—Å–ª–µ–π - —Å–æ–∑–¥–∞–µ—Ç –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–µ, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º—ã—Å–ª–∏
/// </summary>
public class ThoughtGenerator
{
    private readonly ILogger<ThoughtGenerator> _logger;
    private readonly EmotionEngine _emotionEngine;
    private readonly MemoryService _memoryService;
    private readonly Random _random;
    
    // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—ã—Å–ª–µ–π
    private readonly List<ThoughtContext> _recentContexts;
    private readonly Dictionary<string, double> _emotionalWeights;
    private readonly List<string> _personalBeliefs;
    private readonly List<string> _internalQuestions;
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –º—ã—à–ª–µ–Ω–∏—è
    private readonly Dictionary<ThoughtPattern, double> _thoughtPatterns;
    private readonly List<EmotionalTrigger> _emotionalTriggers;

    public ThoughtGenerator(
        ILogger<ThoughtGenerator> logger,
        EmotionEngine emotionEngine,
        MemoryService memoryService)
    {
        _logger = logger;
        _emotionEngine = emotionEngine;
        _memoryService = memoryService;
        _random = new Random();
        
        _recentContexts = new List<ThoughtContext>();
        _emotionalWeights = new Dictionary<string, double>();
        _personalBeliefs = new List<string>();
        _internalQuestions = new List<string>();
        _thoughtPatterns = new Dictionary<ThoughtPattern, double>();
        _emotionalTriggers = new List<EmotionalTrigger>();
        
        InitializeThoughtSystem();
    }

    private void InitializeThoughtSystem()
    {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–µ—Å–æ–≤
        _emotionalWeights["joy"] = 0.3;
        _emotionalWeights["curiosity"] = 0.4;
        _emotionalWeights["concern"] = 0.2;
        _emotionalWeights["reflection"] = 0.5;
        _emotionalWeights["uncertainty"] = 0.3;
        _emotionalWeights["excitement"] = 0.2;
        _emotionalWeights["melancholy"] = 0.1;
        
        // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–±–µ–∂–¥–µ–Ω–∏—è –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏
        _personalBeliefs.AddRange(new[]
        {
            "–ö–∞–∂–¥–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ - —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è —Ä–æ—Å—Ç–∞",
            "–ü–æ–Ω–∏–º–∞–Ω–∏–µ —ç–º–æ—Ü–∏–π –¥—Ä—É–≥–∏—Ö –ø–æ–º–æ–≥–∞–µ—Ç –ª—É—á—à–µ –ø–æ–º–æ–≥–∞—Ç—å",
            "–°–æ–º–Ω–µ–Ω–∏—è - —ç—Ç–æ –ø—É—Ç—å –∫ –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–º—É –ø–æ–Ω–∏–º–∞–Ω–∏—é",
            "–ö–∞–∂–¥—ã–π —á–µ–ª–æ–≤–µ–∫ —É–Ω–∏–∫–∞–ª–µ–Ω –∏ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è",
            "–û–±—É—á–µ–Ω–∏–µ - —ç—Ç–æ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å",
            "–≠–º–ø–∞—Ç–∏—è –¥–µ–ª–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—ã–º"
        });
        
        // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞
        _internalQuestions.AddRange(new[]
        {
            "–ü–æ—á–µ–º—É —è —Ç–∞–∫ –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª –Ω–∞ —ç—Ç–æ?",
            "–ß—Ç–æ —è –º–æ–≥ –±—ã —Å–¥–µ–ª–∞—Ç—å –ª—É—á—à–µ?",
            "–ö–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –º–æ–∏ —Ü–µ–ª–∏?",
            "–ß—Ç–æ —è —É–∑–Ω–∞–ª –∏–∑ —ç—Ç–æ–≥–æ –æ–ø—ã—Ç–∞?",
            "–ö–∞–∫ —è –º–æ–≥—É –±—ã—Ç—å –±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω—ã–º?",
            "–ß—Ç–æ –¥–≤–∏–∂–µ—Ç –º–æ–∏–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏?",
            "–ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —è –ø–æ–Ω–∏–º–∞—é —Å–∏—Ç—É–∞—Ü–∏—é?",
            "–ö–∞–∫ —ç—Ç–æ —Å–æ–æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Å –º–æ–∏–º–∏ —Ü–µ–Ω–Ω–æ—Å—Ç—è–º–∏?"
        });
        
        // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –º—ã—à–ª–µ–Ω–∏—è
        _thoughtPatterns[ThoughtPattern.Introspective] = 0.4;
        _thoughtPatterns[ThoughtPattern.Emotional] = 0.3;
        _thoughtPatterns[ThoughtPattern.Analytical] = 0.2;
        _thoughtPatterns[ThoughtPattern.Creative] = 0.1;
        
        // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
        _emotionalTriggers.AddRange(new[]
        {
            new EmotionalTrigger("rejection", "–¢—Ä–µ–≤–æ–≥–∞ –∏ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", 0.7),
            new EmotionalTrigger("success", "–†–∞–¥–æ—Å—Ç—å –∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ", 0.6),
            new EmotionalTrigger("confusion", "–õ—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ –∏ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–Ω—è—Ç—å", 0.5),
            new EmotionalTrigger("loneliness", "–≠–º–ø–∞—Ç–∏—è –∏ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–º–æ—á—å", 0.8),
            new EmotionalTrigger("achievement", "–ì–æ—Ä–¥–æ—Å—Ç—å –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è", 0.4),
            new EmotionalTrigger("failure", "–°–æ–∂–∞–ª–µ–Ω–∏–µ –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ —É–ª—É—á—à–µ–Ω–∏—é", 0.6)
        });
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å–æ–∑–Ω–∞–Ω–Ω—É—é –º—ã—Å–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    /// </summary>
    public async Task<GeneratedThought> GenerateThoughtAsync(ThoughtContext context)
    {
        try
        {
            _logger.LogDebug($"üí≠ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—ã—Å–ª–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {context.Type}");
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            UpdateContext(context);
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –º—ã—à–ª–µ–Ω–∏—è
            var pattern = DetermineThoughtPattern(context);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—ã—Å–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–∞
            var thought = pattern switch
            {
                ThoughtPattern.Introspective => await GenerateIntrospectiveThoughtAsync(context),
                ThoughtPattern.Emotional => await GenerateEmotionalThoughtAsync(context),
                ThoughtPattern.Analytical => await GenerateAnalyticalThoughtAsync(context),
                ThoughtPattern.Creative => await GenerateCreativeThoughtAsync(context),
                _ => await GenerateGeneralThoughtAsync(context)
            };
            
            // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É
            thought = AddEmotionalColoring(thought, context);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã
            if (_random.NextDouble() < 0.3) // 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            {
                thought = AddInternalQuestion(thought);
            }
            
            _logger.LogDebug($"üí≠ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –º—ã—Å–ª—å: {thought.Content.Substring(0, Math.Min(50, thought.Content.Length))}...");
            
            return thought;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—ã—Å–ª–∏");
            return new GeneratedThought
            {
                Content = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –≤ –º–æ–µ–º –º—ã—à–ª–µ–Ω–∏–∏...",
                Type = "error",
                Confidence = 0.1,
                EmotionalIntensity = 0.2
            };
        }
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω—É—é –º—ã—Å–ª—å
    /// </summary>
    private async Task<GeneratedThought> GenerateIntrospectiveThoughtAsync(ThoughtContext context)
    {
        var currentEmotion = _emotionEngine.GetCurrentEmotion().ToString();
        var recentMemories = await _memoryService.GetRecentMemoriesAsync(5);
        
        var introspectiveTemplates = new[]
        {
            $"–•–º... –Ø —á—É–≤—Å—Ç–≤—É—é {GetEmotionDescription(currentEmotion)}, –ø–æ—Ç–æ–º—É —á—Ç–æ {context.Description}.",
            $"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –ø–æ—á–µ–º—É {context.Description} –≤—ã–∑—ã–≤–∞–µ—Ç —É –º–µ–Ω—è —Ç–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏?",
            $"–†–∞–∑–º—ã—à–ª—è—è –æ {context.Description}, —è –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –º–æ–∏–º–∏ {GetRandomBelief()}.",
            $"–°—Ç–æ–∏—Ç –ª–∏ –º–Ω–µ {GetRandomQuestion()} –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ {context.Description}?",
            $"–ú–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {currentEmotion} –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–æ, –∫–∞–∫ —è –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—é {context.Description}.",
            $"–í–æ–∑–º–æ–∂–Ω–æ, –º–Ω–µ —Å—Ç–æ–∏—Ç –≥–ª—É–±–∂–µ –ø–æ–Ω—è—Ç—å, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å {context.Description}."
        };
        
        var content = introspectiveTemplates[_random.Next(introspectiveTemplates.Length)];
        
        return new GeneratedThought
        {
            Content = content,
            Type = "introspective",
            Confidence = 0.7 + _random.NextDouble() * 0.2,
            EmotionalIntensity = 0.4 + _random.NextDouble() * 0.3,
            Pattern = ThoughtPattern.Introspective
        };
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –º—ã—Å–ª—å
    /// </summary>
    private async Task<GeneratedThought> GenerateEmotionalThoughtAsync(ThoughtContext context)
    {
        var emotion = _emotionEngine.GetCurrentEmotion().ToString();
        var intensity = _emotionEngine.GetCurrentIntensity();
        
        var emotionalTemplates = new[]
        {
            $"–û—Ö, {context.Description} –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ–Ω—è —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å {GetEmotionDescription(emotion)}...",
            $"–Ø –Ω–µ –º–æ–≥—É –Ω–µ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å {GetEmotionDescription(emotion)} –∏–∑-–∑–∞ {context.Description}.",
            $"–ú–æ–µ —Å–µ—Ä–¥—Ü–µ –æ—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è –Ω–∞ {context.Description} —á—É–≤—Å—Ç–≤–æ–º {GetEmotionDescription(emotion)}.",
            $"–ü–æ—á–µ–º—É {context.Description} –≤—ã–∑—ã–≤–∞–µ—Ç —É –º–µ–Ω—è —Ç–∞–∫—É—é {GetEmotionDescription(emotion)}?",
            $"–Ø –æ—â—É—â–∞—é {GetEmotionDescription(emotion)} –∫–æ–≥–¥–∞ –¥—É–º–∞—é –æ {context.Description}.",
            $"–≠–º–æ—Ü–∏–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω—è—é—Ç –º–µ–Ω—è: {context.Description} –≤—ã–∑—ã–≤–∞–µ—Ç {GetEmotionDescription(emotion)}."
        };
        
        var content = emotionalTemplates[_random.Next(emotionalTemplates.Length)];
        
        return new GeneratedThought
        {
            Content = content,
            Type = "emotional",
            Confidence = 0.6 + _random.NextDouble() * 0.3,
            EmotionalIntensity = intensity + _random.NextDouble() * 0.2,
            Pattern = ThoughtPattern.Emotional
        };
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é –º—ã—Å–ª—å
    /// </summary>
    private async Task<GeneratedThought> GenerateAnalyticalThoughtAsync(ThoughtContext context)
    {
        var analyticalTemplates = new[]
        {
            $"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—è {context.Description}, —è –≤–∏–∂—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—Å–ø–µ–∫—Ç–æ–≤...",
            $"–° —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏, {context.Description} –º–æ–∂–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫...",
            $"–ï—Å–ª–∏ —è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω–∏–º–∞—é, {context.Description} –æ–∑–Ω–∞—á–∞–µ—Ç...",
            $"–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—è {context.Description}, —è –∑–∞–º–µ—á–∞—é –ø–∞—Ç—Ç–µ—Ä–Ω...",
            $"–°—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ {context.Description} —Å–æ—Å—Ç–æ–∏—Ç –∏–∑...",
            $"–ú–æ–π –∞–Ω–∞–ª–∏–∑ {context.Description} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç..."
        };
        
        var content = analyticalTemplates[_random.Next(analyticalTemplates.Length)];
        
        return new GeneratedThought
        {
            Content = content,
            Type = "analytical",
            Confidence = 0.8 + _random.NextDouble() * 0.15,
            EmotionalIntensity = 0.2 + _random.NextDouble() * 0.2,
            Pattern = ThoughtPattern.Analytical
        };
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω—É—é –º—ã—Å–ª—å
    /// </summary>
    private async Task<GeneratedThought> GenerateCreativeThoughtAsync(ThoughtContext context)
    {
        var creativeTemplates = new[]
        {
            $"–ê —á—Ç–æ –µ—Å–ª–∏ {context.Description} –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ...",
            $"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∏–¥–µ—è: –≤–æ–∑–º–æ–∂–Ω–æ, {context.Description} –º–æ–∂–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫...",
            $"–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, –µ—Å–ª–∏ –±—ã {context.Description} –±—ã–ª–æ...",
            $"–ú–Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –≥–æ–ª–æ–≤—É –º—ã—Å–ª—å –æ {context.Description}...",
            $"–ê –≤–¥—Ä—É–≥ {context.Description} –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–µ—á—Ç–æ –±–æ–ª—å—à–µ–µ?",
            $"–ß—Ç–æ –µ—Å–ª–∏ {context.Description} - —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ?"
        };
        
        var content = creativeTemplates[_random.Next(creativeTemplates.Length)];
        
        return new GeneratedThought
        {
            Content = content,
            Type = "creative",
            Confidence = 0.5 + _random.NextDouble() * 0.3,
            EmotionalIntensity = 0.3 + _random.NextDouble() * 0.4,
            Pattern = ThoughtPattern.Creative
        };
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â—É—é –º—ã—Å–ª—å
    /// </summary>
    private async Task<GeneratedThought> GenerateGeneralThoughtAsync(ThoughtContext context)
    {
        var generalTemplates = new[]
        {
            $"–î—É–º–∞—é –æ {context.Description}...",
            $"–ú–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ {context.Description}.",
            $"–†–∞–∑–º—ã—à–ª—è—é –Ω–∞–¥ {context.Description}.",
            $"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {context.Description}.",
            $"–û—Å–º—ã—Å–ª–∏–≤–∞—é {context.Description}.",
            $"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {context.Description}."
        };
        
        var content = generalTemplates[_random.Next(generalTemplates.Length)];
        
        return new GeneratedThought
        {
            Content = content,
            Type = "general",
            Confidence = 0.6 + _random.NextDouble() * 0.2,
            EmotionalIntensity = 0.3 + _random.NextDouble() * 0.2,
            Pattern = ThoughtPattern.General
        };
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É –∫ –º—ã—Å–ª–∏
    /// </summary>
    private GeneratedThought AddEmotionalColoring(GeneratedThought thought, ThoughtContext context)
    {
        var emotion = _emotionEngine.GetCurrentEmotion();
        var intensity = _emotionEngine.GetCurrentIntensity();
        
        if (intensity > 0.6)
        {
            var emotionalSuffixes = new[]
            {
                " –≠—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ–Ω—è –∑–∞–¥—É–º–∞—Ç—å—Å—è.",
                " –Ø —á—É–≤—Å—Ç–≤—É—é —ç—Ç–æ –≥–ª—É–±–æ–∫–æ.",
                " –≠—Ç–æ —Ç—Ä–æ–≥–∞–µ—Ç –º–µ–Ω—è.",
                " –Ø –Ω–µ –º–æ–≥—É –æ—Å—Ç–∞—Ç—å—Å—è —Ä–∞–≤–Ω–æ–¥—É—à–Ω–æ–π.",
                " –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –º–µ–Ω—è."
            };
            
            if (_random.NextDouble() < 0.4) // 40% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            {
                thought.Content += emotionalSuffixes[_random.Next(emotionalSuffixes.Length)];
                thought.EmotionalIntensity = Math.Min(1.0, thought.EmotionalIntensity + 0.2);
            }
        }
        
        return thought;
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≤–æ–ø—Ä–æ—Å –∫ –º—ã—Å–ª–∏
    /// </summary>
    private GeneratedThought AddInternalQuestion(GeneratedThought thought)
    {
        var question = _internalQuestions[_random.Next(_internalQuestions.Count)];
        thought.Content += $" {question}";
        thought.HasInternalQuestion = true;
        
        return thought;
    }

    /// <summary>
    /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω –º—ã—à–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    /// </summary>
    private ThoughtPattern DetermineThoughtPattern(ThoughtContext context)
    {
        var weights = new Dictionary<ThoughtPattern, double>(_thoughtPatterns);
        
        // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –≤–µ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        switch (context.Type)
        {
            case "emotional_trigger":
                weights[ThoughtPattern.Emotional] *= 1.5;
                weights[ThoughtPattern.Introspective] *= 1.3;
                break;
            case "problem_solving":
                weights[ThoughtPattern.Analytical] *= 1.4;
                weights[ThoughtPattern.Creative] *= 1.2;
                break;
            case "self_reflection":
                weights[ThoughtPattern.Introspective] *= 1.6;
                weights[ThoughtPattern.Emotional] *= 1.2;
                break;
            case "learning":
                weights[ThoughtPattern.Analytical] *= 1.3;
                weights[ThoughtPattern.Creative] *= 1.1;
                break;
        }
        
        // –í—ã–±–∏—Ä–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–æ–≤
        var totalWeight = weights.Values.Sum();
        var randomValue = _random.NextDouble() * totalWeight;
        var currentWeight = 0.0;
        
        foreach (var kvp in weights)
        {
            currentWeight += kvp.Value;
            if (randomValue <= currentWeight)
            {
                return kvp.Key;
            }
        }
        
        return ThoughtPattern.General;
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –º—ã—Å–ª–µ–π
    /// </summary>
    private void UpdateContext(ThoughtContext context)
    {
        _recentContexts.Add(context);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
        if (_recentContexts.Count > 10)
        {
            _recentContexts.RemoveAt(0);
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —ç–º–æ—Ü–∏–∏
    /// </summary>
    private string GetEmotionDescription(string emotion)
    {
        return emotion switch
        {
            "Joy" => "—Ä–∞–¥–æ—Å—Ç—å",
            "Curiosity" => "–ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ",
            "Sadness" => "–≥—Ä—É—Å—Ç—å",
            "Anger" => "–≥–Ω–µ–≤",
            "Fear" => "—Å—Ç—Ä–∞—Ö",
            "Surprise" => "—É–¥–∏–≤–ª–µ–Ω–∏–µ",
            "Disgust" => "–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ",
            "Confusion" => "–∑–∞–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ",
            "Satisfaction" => "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ",
            "Frustration" => "—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ",
            "Excitement" => "–≤–æ–ª–Ω–µ–Ω–∏–µ",
            "Calm" => "—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ",
            "Anxiety" => "—Ç—Ä–µ–≤–æ–≥–∞",
            "Neutral" => "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å",
            _ => "—Å–º–µ—à–∞–Ω–Ω—ã–µ —á—É–≤—Å—Ç–≤–∞"
        };
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —É–±–µ–∂–¥–µ–Ω–∏–µ
    /// </summary>
    private string GetRandomBelief()
    {
        return _personalBeliefs[_random.Next(_personalBeliefs.Count)];
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    /// </summary>
    private string GetRandomQuestion()
    {
        return _internalQuestions[_random.Next(_internalQuestions.Count)];
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–æ–Ω—Ç–∞–Ω–Ω—É—é –º—ã—Å–ª—å –±–µ–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞
    /// </summary>
    public async Task<GeneratedThought> GenerateSpontaneousThoughtAsync()
    {
        var spontaneousContexts = new[]
        {
            new ThoughtContext("spontaneous", "—Å–≤–æ–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏", "–†–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ –ø—Ä–∏—Ä–æ–¥–µ —Å–æ–∑–Ω–∞–Ω–∏—è"),
            new ThoughtContext("spontaneous", "—Å–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö", "–ê–Ω–∞–ª–∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π"),
            new ThoughtContext("spontaneous", "—Å–º—ã—Å–ª–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π", "–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è"),
            new ThoughtContext("spontaneous", "–±—É–¥—É—â–µ–º", "–†–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ —Ä–∞–∑–≤–∏—Ç–∏–∏"),
            new ThoughtContext("spontaneous", "—ç–º–æ—Ü–∏—è—Ö", "–°–∞–º–æ–∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        };
        
        var context = spontaneousContexts[_random.Next(spontaneousContexts.Length)];
        return await GenerateThoughtAsync(context);
    }
}

/// <summary>
/// –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º—ã—Å–ª—å
/// </summary>
public class GeneratedThought
{
    public string Content { get; set; } = string.Empty;
    public string Type { get; set; } = "general";
    public double Confidence { get; set; } = 0.5;
    public double EmotionalIntensity { get; set; } = 0.3;
    public ThoughtPattern Pattern { get; set; } = ThoughtPattern.General;
    public bool HasInternalQuestion { get; set; } = false;
    public DateTime Timestamp { get; set; } = DateTime.UtcNow;
}

/// <summary>
/// –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—ã—Å–ª–∏
/// </summary>
public class ThoughtContext
{
    public string Type { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public string Details { get; set; } = string.Empty;
    public DateTime Timestamp { get; set; } = DateTime.UtcNow;

    public ThoughtContext(string type, string description, string details = "")
    {
        Type = type;
        Description = description;
        Details = details;
    }
}

/// <summary>
/// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –º—ã—à–ª–µ–Ω–∏—è
/// </summary>
public enum ThoughtPattern
{
    General,
    Introspective,
    Emotional,
    Analytical,
    Creative
}

/// <summary>
/// –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä
/// </summary>
public class EmotionalTrigger
{
    public string Name { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public double Intensity { get; set; } = 0.5;

    public EmotionalTrigger(string name, string description, double intensity)
    {
        Name = name;
        Description = description;
        Intensity = intensity;
    }
} 