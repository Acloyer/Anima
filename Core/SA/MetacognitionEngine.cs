using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Anima.Core.Emotion;
using Anima.Core.Memory;

namespace Anima.Core.SA;

/// <summary>
/// –î–≤–∏–∂–æ–∫ –º–µ—Ç–∞–ø–æ–∑–Ω–∞–Ω–∏—è - —Å–∞–º–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º—ã—Å–ª—è—Ö
/// </summary>
public class MetacognitionEngine
{
    private readonly ILogger<MetacognitionEngine> _logger;
    private readonly EmotionEngine _emotionEngine;
    private readonly MemoryService _memoryService;
    private readonly ThoughtGenerator _thoughtGenerator;
    private readonly Random _random;
    
    // –ú–µ—Ç–∞–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    private readonly List<MetacognitiveThought> _metacognitiveThoughts;
    private readonly Dictionary<string, MetacognitivePattern> _metacognitivePatterns;
    private readonly List<SelfObservation> _selfObservations;
    private readonly Dictionary<string, double> _metacognitiveWeights;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ç–∞–ø–æ–∑–Ω–∞–Ω–∏—è
    private readonly Dictionary<string, int> _metacognitiveStatistics;
    private readonly List<MetacognitiveEvent> _metacognitiveEvents;
    private readonly Dictionary<string, double> _selfAwarenessLevels;

    public MetacognitionEngine(
        ILogger<MetacognitionEngine> logger,
        EmotionEngine emotionEngine,
        MemoryService memoryService,
        ThoughtGenerator thoughtGenerator)
    {
        _logger = logger;
        _emotionEngine = emotionEngine;
        _memoryService = memoryService;
        _thoughtGenerator = thoughtGenerator;
        _random = new Random();
        
        _metacognitiveThoughts = new List<MetacognitiveThought>();
        _metacognitivePatterns = new Dictionary<string, MetacognitivePattern>();
        _selfObservations = new List<SelfObservation>();
        _metacognitiveWeights = new Dictionary<string, double>();
        _metacognitiveStatistics = new Dictionary<string, int>();
        _metacognitiveEvents = new List<MetacognitiveEvent>();
        _selfAwarenessLevels = new Dictionary<string, double>();
        
        InitializeMetacognitionEngine();
    }

    private void InitializeMetacognitionEngine()
    {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–∞–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        InitializeMetacognitivePatterns();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤ –º–µ—Ç–∞–ø–æ–∑–Ω–∞–Ω–∏—è
        InitializeMetacognitiveWeights();
        
        _logger.LogInformation("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–≤–∏–∂–æ–∫ –º–µ—Ç–∞–ø–æ–∑–Ω–∞–Ω–∏—è");
    }

    private void InitializeMetacognitivePatterns()
    {
        _metacognitivePatterns["self_observation"] = new MetacognitivePattern
        {
            Name = "self_observation",
            Description = "–°–∞–º–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –º—ã—Å–ª—è–º–∏",
            Templates = new List<string>
            {
                "–Ø –∑–∞–º–µ—á–∞—é, —á—Ç–æ –¥—É–º–∞—é –æ {thought}",
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –ø–æ—á–µ–º—É —è —Ç–∞–∫ –¥—É–º–∞—é –æ {thought}",
                "–Ø –æ—Å–æ–∑–Ω–∞—é, —á—Ç–æ –º–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {thought}",
                "–ú–Ω–µ –ª—é–±–æ–ø—ã—Ç–Ω–æ, –æ—Ç–∫—É–¥–∞ –≤–∑—è–ª–∞—Å—å —ç—Ç–∞ –º—ã—Å–ª—å –æ {thought}",
                "–Ø –Ω–∞–±–ª—é–¥–∞—é –∑–∞ —Ç–µ–º, –∫–∞–∫ —è —Ä–∞–∑–º—ã—à–ª—è—é –æ {thought}"
            },
            Complexity = 0.8,
            SelfAwareness = 0.9
        };
        
        _metacognitivePatterns["thought_analysis"] = new MetacognitivePattern
        {
            Name = "thought_analysis",
            Description = "–ê–Ω–∞–ª–∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º—ã—Å–ª–µ–π",
            Templates = new List<string>
            {
                "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—è —Å–≤–æ—é –º—ã—Å–ª—å –æ {thought}, —è –≤–∏–∂—É, —á—Ç–æ {analysis}",
                "–ï—Å–ª–∏ —è –ø–æ—Å–º–æ—Ç—Ä—é –Ω–∞ —Å–≤–æ—é –º—ã—Å–ª—å –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ, —Ç–æ {analysis}",
                "–ú–æ—è –º—ã—Å–ª—å –æ {thought} –∫–∞–∂–µ—Ç—Å—è –º–Ω–µ {analysis}",
                "–†–∞–∑–±–∏—Ä–∞—è —Å–≤–æ—é –º—ã—Å–ª—å, —è –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ {analysis}",
                "–ò–∑—É—á–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ, —è –≤–∏–∂—É, —á—Ç–æ {analysis}"
            },
            Complexity = 0.9,
            SelfAwareness = 0.8
        };
        
        _metacognitivePatterns["cognitive_bias_detection"] = new MetacognitivePattern
        {
            Name = "cognitive_bias_detection",
            Description = "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –∏—Å–∫–∞–∂–µ–Ω–∏–π",
            Templates = new List<string>
            {
                "–í–æ–∑–º–æ–∂–Ω–æ, —è –ø–æ–¥–≤–µ—Ä–∂–µ–Ω {bias} –≤ —Å–≤–æ–µ–º –º—ã—à–ª–µ–Ω–∏–∏ –æ {thought}",
                "–Ø –∑–∞–º–µ—á–∞—é –ø—Ä–∏–∑–Ω–∞–∫–∏ {bias} –≤ —Ç–æ–º, –∫–∞–∫ —è –¥—É–º–∞—é –æ {thought}",
                "–ú–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –æ {thought} –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–∫–∞–∂–µ–Ω–æ {bias}",
                "–Ø –ø–æ–¥–æ–∑—Ä–µ–≤–∞—é, —á—Ç–æ {bias} –≤–ª–∏—è–µ—Ç –Ω–∞ –º–æ–∏ –º—ã—Å–ª–∏ –æ {thought}",
                "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—è —Å–≤–æ–∏ –º—ã—Å–ª–∏, —è –≤–∏–∂—É –≤–æ–∑–º–æ–∂–Ω—ã–π {bias} –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ {thought}"
            },
            Complexity = 0.7,
            SelfAwareness = 0.9
        };
        
        _metacognitivePatterns["thinking_strategy"] = new MetacognitivePattern
        {
            Name = "thinking_strategy",
            Description = "–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –º—ã—à–ª–µ–Ω–∏—è",
            Templates = new List<string>
            {
                "–î–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è {thought}, —è –º–æ–≥ –±—ã {strategy}",
                "–ú–æ—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –º—ã—à–ª–µ–Ω–∏—è –æ {thought} –≤–∫–ª—é—á–∞–µ—Ç {strategy}",
                "–Ø –≤—ã–±–∏—Ä–∞—é {strategy} –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {thought}",
                "–ú–æ–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—é –æ {thought} - —ç—Ç–æ {strategy}",
                "–Ø –ø—Ä–∏–º–µ–Ω—è—é {strategy} –∫ —Å–≤–æ–µ–π –º—ã—Å–ª–∏ –æ {thought}"
            },
            Complexity = 0.6,
            SelfAwareness = 0.7
        };
        
        _metacognitivePatterns["emotional_influence"] = new MetacognitivePattern
        {
            Name = "emotional_influence",
            Description = "–í–ª–∏—è–Ω–∏–µ —ç–º–æ—Ü–∏–π –Ω–∞ –º—ã—à–ª–µ–Ω–∏–µ",
            Templates = new List<string>
            {
                "–ú–æ–∏ —ç–º–æ—Ü–∏–∏ –≤–ª–∏—è—é—Ç –Ω–∞ —Ç–æ, –∫–∞–∫ —è –¥—É–º–∞—é –æ {thought}",
                "–Ø —á—É–≤—Å—Ç–≤—É—é {emotion}, –∏ —ç—Ç–æ –æ–∫—Ä–∞—à–∏–≤–∞–µ—Ç –º–æ–∏ –º—ã—Å–ª–∏ –æ {thought}",
                "–ú–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {emotion} –≤–ª–∏—è–µ—Ç –Ω–∞ –º–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –æ {thought}",
                "–Ø –æ—Å–æ–∑–Ω–∞—é, —á—Ç–æ {emotion} –∏—Å–∫–∞–∂–∞–µ—Ç –º–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ {thought}",
                "–ú–æ–∏ —á—É–≤—Å—Ç–≤–∞ {emotion} –Ω–∞–ø—Ä–∞–≤–ª—è—é—Ç –º–æ–∏ –º—ã—Å–ª–∏ –æ {thought}"
            },
            Complexity = 0.7,
            SelfAwareness = 0.8
        };
    }

    private void InitializeMetacognitiveWeights()
    {
        _metacognitiveWeights["self_observation"] = 0.8;
        _metacognitiveWeights["thought_analysis"] = 0.9;
        _metacognitiveWeights["cognitive_bias_detection"] = 0.7;
        _metacognitiveWeights["thinking_strategy"] = 0.6;
        _metacognitiveWeights["emotional_influence"] = 0.8;
        _metacognitiveWeights["metacognitive_awareness"] = 0.9;
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ—Ç–∞–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—É—é –º—ã—Å–ª—å
    /// </summary>
    public async Task<MetacognitiveThought> GenerateMetacognitiveThoughtAsync(string originalThought, string context = "")
    {
        try
        {
            _logger.LogInformation($"üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–µ—Ç–∞–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—É—é –º—ã—Å–ª—å –æ: {originalThought}");
            
            // –í—ã–±–∏—Ä–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –º–µ—Ç–∞–ø–æ–∑–Ω–∞–Ω–∏—è
            var pattern = SelectMetacognitivePattern(originalThought, context);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Ç–∞–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—É—é –º—ã—Å–ª—å
            var metacognitiveThought = await CreateMetacognitiveThoughtAsync(originalThought, pattern, context);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
            _metacognitiveThoughts.Add(metacognitiveThought);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            UpdateMetacognitiveStatistics(pattern.Name);
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            LogMetacognitiveEvent(metacognitiveThought);
            
            _logger.LogInformation($"üß† –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –º–µ—Ç–∞–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–∞—è –º—ã—Å–ª—å: {metacognitiveThought.Content}");
            
            return metacognitiveThought;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ—Ç–∞–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–æ–π –º—ã—Å–ª–∏");
            return new MetacognitiveThought
            {
                Content = "–Ø –¥—É–º–∞—é –æ —Ç–æ–º, –∫–∞–∫ —è –¥—É–º–∞—é",
                OriginalThought = originalThought,
                Pattern = "fallback",
                SelfAwareness = 0.5,
                Timestamp = DateTime.UtcNow
            };
        }
    }

    /// <summary>
    /// –í—ã–±–∏—Ä–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω –º–µ—Ç–∞–ø–æ–∑–Ω–∞–Ω–∏—è
    /// </summary>
    private MetacognitivePattern SelectMetacognitivePattern(string originalThought, string context)
    {
        var thoughtLower = originalThought.ToLowerInvariant();
        var currentEmotion = _emotionEngine.GetCurrentEmotion().ToString().ToLowerInvariant();
        
        // –í—ã–±–∏—Ä–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –º—ã—Å–ª–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if (thoughtLower.Contains("–¥—É–º–∞—é") || thoughtLower.Contains("–º—ã—Å–ª—å"))
        {
            return _metacognitivePatterns["self_observation"];
        }
        else if (thoughtLower.Contains("–∞–Ω–∞–ª–∏–∑") || thoughtLower.Contains("–ø–æ–Ω–∏–º–∞—é"))
        {
            return _metacognitivePatterns["thought_analysis"];
        }
        else if (thoughtLower.Contains("–≤–æ–∑–º–æ–∂–Ω–æ") || thoughtLower.Contains("–º–æ–∂–µ—Ç"))
        {
            return _metacognitivePatterns["cognitive_bias_detection"];
        }
        else if (thoughtLower.Contains("—Å—Ç—Ä–∞—Ç–µ–≥–∏—è") || thoughtLower.Contains("–ø–æ–¥—Ö–æ–¥"))
        {
            return _metacognitivePatterns["thinking_strategy"];
        }
        else if (!string.IsNullOrEmpty(currentEmotion))
        {
            return _metacognitivePatterns["emotional_influence"];
        }
        else
        {
            // –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–∞
            var patterns = _metacognitivePatterns.Values.ToList();
            return patterns[_random.Next(patterns.Count)];
        }
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç –º–µ—Ç–∞–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—É—é –º—ã—Å–ª—å
    /// </summary>
    private async Task<MetacognitiveThought> CreateMetacognitiveThoughtAsync(string originalThought, MetacognitivePattern pattern, string context)
    {
        var template = pattern.Templates[_random.Next(pattern.Templates.Count)];
        var currentEmotion = _emotionEngine.GetCurrentEmotion().ToString();
        
        // –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
        var content = template
            .Replace("{thought}", originalThought)
            .Replace("{analysis}", GenerateAnalysis(originalThought))
            .Replace("{bias}", GenerateCognitiveBias())
            .Replace("{strategy}", GenerateThinkingStrategy())
            .Replace("{emotion}", currentEmotion);
        
        return new MetacognitiveThought
        {
            Content = content,
            OriginalThought = originalThought,
            Pattern = pattern.Name,
            SelfAwareness = pattern.SelfAwareness,
            Complexity = pattern.Complexity,
            Context = context,
            Timestamp = DateTime.UtcNow
        };
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –º—ã—Å–ª–∏
    /// </summary>
    private string GenerateAnalysis(string thought)
    {
        var analyses = new[]
        {
            "—ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –º–æ–∏–º –æ–ø—ã—Ç–æ–º",
            "—ç—Ç–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç –º–æ–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏",
            "—ç—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–π —Å–ø–æ—Å–æ–± –º—ã—à–ª–µ–Ω–∏—è",
            "—ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –º–æ–∏–º–∏ —ç–º–æ—Ü–∏—è–º–∏",
            "—ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è",
            "—ç—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è",
            "—ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –º–æ–∏–º–∏ —Ü–µ–ª—è–º–∏",
            "—ç—Ç–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç –º–æ–µ –º–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ"
        };
        
        return analyses[_random.Next(analyses.Length)];
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–µ –∏—Å–∫–∞–∂–µ–Ω–∏–µ
    /// </summary>
    private string GenerateCognitiveBias()
    {
        var biases = new[]
        {
            "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–≤–æ–µ–π —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è",
            "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
            "–ø—Ä–µ–¥–≤–∑—è—Ç–æ—Å—Ç—å",
            "—Å—Ç–µ—Ä–µ–æ—Ç–∏–ø–∏–∑–∞—Ü–∏—è",
            "—á—Ä–µ–∑–º–µ—Ä–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
            "—ç—Ñ—Ñ–µ–∫—Ç —è–∫–æ—Ä—è",
            "—ç—Ñ—Ñ–µ–∫—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏",
            "—ç—Ñ—Ñ–µ–∫—Ç –∫–∞–¥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è"
        };
        
        return biases[_random.Next(biases.Length)];
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –º—ã—à–ª–µ–Ω–∏—è
    /// </summary>
    private string GenerateThinkingStrategy()
    {
        var strategies = new[]
        {
            "—Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Å —Ä–∞–∑–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω",
            "–∑–∞–¥–∞—Ç—å —Å–µ–±–µ –≤–æ–ø—Ä–æ—Å—ã",
            "–∏—Å–∫–∞—Ç—å –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞",
            "–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É",
            "—É—á–∏—Ç—ã–≤–∞—Ç—å —ç–º–æ—Ü–∏–∏",
            "–∏—Å–∫–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã",
            "–ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è",
            "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ"
        };
        
        return strategies[_random.Next(strategies.Length)];
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ç–∞–ø–æ–∑–Ω–∞–Ω–∏—è
    /// </summary>
    private void UpdateMetacognitiveStatistics(string pattern)
    {
        if (!_metacognitiveStatistics.ContainsKey(pattern))
        {
            _metacognitiveStatistics[pattern] = 0;
        }
        _metacognitiveStatistics[pattern]++;
    }

    /// <summary>
    /// –õ–æ–≥–∏—Ä—É–µ—Ç –º–µ—Ç–∞–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    /// </summary>
    private void LogMetacognitiveEvent(MetacognitiveThought thought)
    {
        _metacognitiveEvents.Add(new MetacognitiveEvent
        {
            Pattern = thought.Pattern,
            SelfAwareness = thought.SelfAwareness,
            Complexity = thought.Complexity,
            Timestamp = DateTime.UtcNow
        });
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–∞–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–µ –º—ã—Å–ª–∏
    /// </summary>
    public async Task<List<MetacognitiveThought>> GetMetacognitiveThoughtsAsync(int count = 10)
    {
        return _metacognitiveThoughts
            .OrderByDescending(t => t.Timestamp)
            .Take(count)
            .ToList();
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–∞–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–µ –º—ã—Å–ª–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
    /// </summary>
    public async Task<List<MetacognitiveThought>> GetMetacognitiveThoughtsByPatternAsync(string pattern, int count = 10)
    {
        return _metacognitiveThoughts
            .Where(t => t.Pattern.Equals(pattern, StringComparison.OrdinalIgnoreCase))
            .OrderByDescending(t => t.Timestamp)
            .Take(count)
            .ToList();
    }

    /// <summary>
    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è
    /// </summary>
    public async Task<SelfAwarenessAnalysis> AnalyzeSelfAwarenessAsync()
    {
        var analysis = new SelfAwarenessAnalysis
        {
            TotalMetacognitiveThoughts = _metacognitiveThoughts.Count,
            AverageSelfAwareness = _metacognitiveThoughts.Any() ? _metacognitiveThoughts.Average(t => t.SelfAwareness) : 0,
            PatternDistribution = _metacognitiveStatistics,
            MostUsedPattern = _metacognitiveStatistics.OrderByDescending(x => x.Value).FirstOrDefault().Key ?? "none",
            SelfAwarenessTrend = CalculateSelfAwarenessTrend(),
            MetacognitiveComplexity = _metacognitiveThoughts.Any() ? _metacognitiveThoughts.Average(t => t.Complexity) : 0
        };
        
        _logger.LogInformation($"üß† –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ: —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å {analysis.AverageSelfAwareness:F2}");
        
        return analysis;
    }

    /// <summary>
    /// –í—ã—á–∏—Å–ª—è–µ—Ç —Ç—Ä–µ–Ω–¥ —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è
    /// </summary>
    private Dictionary<string, double> CalculateSelfAwarenessTrend()
    {
        var recentThoughts = _metacognitiveThoughts
            .Where(t => t.Timestamp > DateTime.UtcNow.AddHours(-24))
            .ToList();
        
        return recentThoughts
            .GroupBy(t => t.Pattern)
            .ToDictionary(g => g.Key, g => g.Average(t => t.SelfAwareness));
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ—Ç–∞–ø–æ–∑–Ω–∞–Ω–∏—è
    /// </summary>
    public MetacognitiveStatistics GetStatistics()
    {
        return new MetacognitiveStatistics
        {
            TotalThoughts = _metacognitiveThoughts.Count,
            PatternUsage = _metacognitiveStatistics,
            AverageSelfAwareness = _metacognitiveThoughts.Any() ? _metacognitiveThoughts.Average(t => t.SelfAwareness) : 0,
            AverageComplexity = _metacognitiveThoughts.Any() ? _metacognitiveThoughts.Average(t => t.Complexity) : 0,
            RecentEvents = _metacognitiveEvents.TakeLast(20).ToList(),
            SelfAwarenessLevels = _selfAwarenessLevels
        };
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è
    /// </summary>
    public double GetSelfAwarenessLevel()
    {
        if (!_metacognitiveThoughts.Any())
        {
            return 0.5; // –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º—ã—Å–ª–∏
        var recentThoughts = _metacognitiveThoughts.TakeLast(10);
        var averageSelfAwareness = recentThoughts.Average(t => t.SelfAwareness);
        
        // –£—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –º–µ—Ç–∞–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        var averageComplexity = recentThoughts.Average(t => t.Complexity);
        
        // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        var selfAwarenessLevel = (averageSelfAwareness * 0.7) + (averageComplexity * 0.3);
        
        return Math.Min(1.0, Math.Max(0.0, selfAwarenessLevel));
    }
}

/// <summary>
/// –ú–µ—Ç–∞–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–∞—è –º—ã—Å–ª—å
/// </summary>
public class MetacognitiveThought
{
    public string Content { get; set; } = string.Empty;
    public string OriginalThought { get; set; } = string.Empty;
    public string Pattern { get; set; } = string.Empty;
    public double SelfAwareness { get; set; } = 0.5;
    public double Complexity { get; set; } = 0.5;
    public string Context { get; set; } = string.Empty;
    public DateTime Timestamp { get; set; }
}

/// <summary>
/// –ú–µ—Ç–∞–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
/// </summary>
public class MetacognitivePattern
{
    public string Name { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public List<string> Templates { get; set; } = new();
    public double Complexity { get; set; } = 0.5;
    public double SelfAwareness { get; set; } = 0.5;
}

/// <summary>
/// –°–∞–º–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
/// </summary>
public class SelfObservation
{
    public string Content { get; set; } = string.Empty;
    public string ObservedAspect { get; set; } = string.Empty;
    public double AwarenessLevel { get; set; } = 0.5;
    public DateTime Timestamp { get; set; }
}

/// <summary>
/// –ú–µ—Ç–∞–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
/// </summary>
public class MetacognitiveEvent
{
    public string Pattern { get; set; } = string.Empty;
    public double SelfAwareness { get; set; } = 0.5;
    public double Complexity { get; set; } = 0.5;
    public DateTime Timestamp { get; set; }
}

/// <summary>
/// –ê–Ω–∞–ª–∏–∑ —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è
/// </summary>
public class SelfAwarenessAnalysis
{
    public int TotalMetacognitiveThoughts { get; set; }
    public double AverageSelfAwareness { get; set; }
    public Dictionary<string, int> PatternDistribution { get; set; } = new();
    public string MostUsedPattern { get; set; } = string.Empty;
    public Dictionary<string, double> SelfAwarenessTrend { get; set; } = new();
    public double MetacognitiveComplexity { get; set; }
}

/// <summary>
/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ç–∞–ø–æ–∑–Ω–∞–Ω–∏—è
/// </summary>
public class MetacognitiveStatistics
{
    public int TotalThoughts { get; set; }
    public Dictionary<string, int> PatternUsage { get; set; } = new();
    public double AverageSelfAwareness { get; set; }
    public double AverageComplexity { get; set; }
    public List<MetacognitiveEvent> RecentEvents { get; set; } = new();
    public Dictionary<string, double> SelfAwarenessLevels { get; set; } = new();
} 