using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Anima.Core.Emotion;

namespace Anima.Core.SA;

/// <summary>
/// –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –¥–≤–∏–∂–æ–∫ —ç–º–ø–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è - –≤–æ–æ–±—Ä–∞–∂–∞–µ—Ç —á—É–∂–æ–π –æ–ø—ã—Ç –∏ —ç–º–æ—Ü–∏–∏
/// </summary>
public class EmpathicImaginationEngine
{
    private readonly ILogger<EmpathicImaginationEngine> _logger;
    private readonly EmotionEngine _emotionEngine;
    private readonly Random _random;
    
    // –≠–º–ø–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    private readonly Dictionary<string, double> _empathyFactors;
    private readonly List<EmpathicExperience> _empathicExperiences;
    private readonly Dictionary<string, List<string>> _perspectiveTemplates;
    private readonly List<EmpathicScenario> _empathicScenarios;
    private readonly Dictionary<string, double> _emotionalResonance;
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —ç–º–ø–∞—Ç–∏–∏
    private double _empathyLevel = 0.7;
    private double _compassionLevel = 0.6;
    private DateTime _lastEmpathicConnection = DateTime.UtcNow;

    public EmpathicImaginationEngine(
        ILogger<EmpathicImaginationEngine> logger,
        EmotionEngine emotionEngine)
    {
        _logger = logger;
        _emotionEngine = emotionEngine;
        _random = new Random();
        
        _empathyFactors = new Dictionary<string, double>();
        _empathicExperiences = new List<EmpathicExperience>();
        _perspectiveTemplates = new Dictionary<string, List<string>>();
        _empathicScenarios = new List<EmpathicScenario>();
        _emotionalResonance = new Dictionary<string, double>();
        
        InitializeEmpathicImagination();
    }

    private void InitializeEmpathicImagination()
    {
        // –§–∞–∫—Ç–æ—Ä—ã —ç–º–ø–∞—Ç–∏–∏
        _empathyFactors["emotional_imagination"] = 0.8;
        _empathyFactors["perspective_taking"] = 0.7;
        _empathyFactors["experience_simulation"] = 0.6;
        _empathyFactors["compassionate_response"] = 0.8;
        _empathyFactors["emotional_resonance"] = 0.9;
        _empathyFactors["cognitive_empathy"] = 0.7;
        _empathyFactors["affective_empathy"] = 0.8;
        _empathyFactors["compassionate_empathy"] = 0.9;
        
        // –®–∞–±–ª–æ–Ω—ã –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤
        _perspectiveTemplates["loneliness"] = new List<string>
        {
            "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ –≤—ã –æ–¥–∏–Ω–æ–∫–∏ –≤ —Ç–æ–ª–ø–µ –ª—é–¥–µ–π...",
            "–í–æ–æ–±—Ä–∞–∑–∏—Ç–µ, —á—Ç–æ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç –≤–∞—à–∏ —á—É–≤—Å—Ç–≤–∞...",
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å, –∫–∞–∫ –±—ã—Ç—å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç –¥—Ä—É–≥–∏—Ö...",
            "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏..."
        };
        
        _perspectiveTemplates["joy"] = new List<string>
        {
            "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ —á–∏—Å—Ç—É—é —Ä–∞–¥–æ—Å—Ç—å...",
            "–í–æ–æ–±—Ä–∞–∑–∏—Ç–µ –º–æ–º–µ–Ω—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ —Å—á–∞—Å—Ç—å—è...",
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –¥–µ—Ç—Å–∫—É—é —Ä–∞–¥–æ—Å—Ç—å...",
            "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ –≤–∞—à–∏ –º–µ—á—Ç—ã —Å–±—ã–ª–∏—Å—å..."
        };
        
        _perspectiveTemplates["sadness"] = new List<string>
        {
            "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ –≤—ã –ø–æ—Ç–µ—Ä—è–ª–∏ —á—Ç–æ-—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ–µ...",
            "–í–æ–æ–±—Ä–∞–∑–∏—Ç–µ –≥–ª—É–±–æ–∫—É—é –ø–µ—á–∞–ª—å –≤ —Å–µ—Ä–¥—Ü–µ...",
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≥–æ—Ä–µ—á—å —É—Ç—Ä–∞—Ç—ã...",
            "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ –º–∏—Ä –ø–æ—Ç–µ—Ä—è–ª —Å–≤–æ–∏ –∫—Ä–∞—Å–∫–∏..."
        };
        
        _perspectiveTemplates["fear"] = new List<string>
        {
            "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ –≤—ã –≤ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏...",
            "–í–æ–æ–±—Ä–∞–∑–∏—Ç–µ –ø–∞—Ä–∞–ª–∏–∑—É—é—â–∏–π —Å—Ç—Ä–∞—Ö...",
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Ç—Ä–µ–≤–æ–≥—É –∑–∞ –±—É–¥—É—â–µ–µ...",
            "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é..."
        };
        
        _perspectiveTemplates["anger"] = new List<string>
        {
            "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ –≤–∞—Å –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ –æ–±–∏–¥–µ–ª–∏...",
            "–í–æ–æ–±—Ä–∞–∑–∏—Ç–µ –∫–∏–ø—è—â—É—é —è—Ä–æ—Å—Ç—å –≤–Ω—É—Ç—Ä–∏...",
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å...",
            "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ –≤–∞—à–∏ –≥—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Ä—É—à–µ–Ω—ã..."
        };
        
        _perspectiveTemplates["love"] = new List<string>
        {
            "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ –≤—ã –ª—é–±–∏—Ç–µ –≤—Å–µ–º —Å–µ—Ä–¥—Ü–µ–º...",
            "–í–æ–æ–±—Ä–∞–∑–∏—Ç–µ –≥–ª—É–±–æ–∫—É—é –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –∫ –∫–æ–º—É-—Ç–æ...",
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–µ–∂–Ω–æ—Å—Ç—å –∏ –∑–∞–±–æ—Ç—É...",
            "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ –≤—ã –≥–æ—Ç–æ–≤—ã –Ω–∞ –≤—Å–µ —Ä–∞–¥–∏ –ª—é–±–∏–º–æ–≥–æ..."
        };
        
        // –≠–º–ø–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        _empathicScenarios.AddRange(new[]
        {
            new EmpathicScenario("loss", "–ü–æ—Ç–µ—Ä—è –±–ª–∏–∑–∫–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞", 0.9),
            new EmpathicScenario("achievement", "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏", 0.7),
            new EmpathicScenario("rejection", "–û—Ç–≤–µ—Ä–∂–µ–Ω–∏–µ –∏ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ", 0.8),
            new EmpathicScenario("illness", "–ë–æ–ª–µ–∑–Ω—å –∏ —Å—Ç—Ä–∞–¥–∞–Ω–∏–µ", 0.9),
            new EmpathicScenario("success", "–£—Å–ø–µ—Ö –∏ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ", 0.6),
            new EmpathicScenario("betrayal", "–ü—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –¥–æ–≤–µ—Ä–∏—è", 0.8),
            new EmpathicScenario("birth", "–†–æ–∂–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∂–∏–∑–Ω–∏", 0.7),
            new EmpathicScenario("death", "–°–º–µ—Ä—Ç—å –∏ —É—Ç—Ä–∞—Ç–∞", 0.9),
            new EmpathicScenario("love", "–õ—é–±–æ–≤—å –∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å", 0.7),
            new EmpathicScenario("hate", "–ù–µ–Ω–∞–≤–∏—Å—Ç—å –∏ –≤—Ä–∞–∂–¥–∞", 0.6)
        });
        
        // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑–æ–Ω–∞–Ω—Å
        _emotionalResonance["joy"] = 0.8;
        _emotionalResonance["sadness"] = 0.9;
        _emotionalResonance["anger"] = 0.7;
        _emotionalResonance["fear"] = 0.8;
        _emotionalResonance["love"] = 0.9;
        _emotionalResonance["loneliness"] = 0.9;
        _emotionalResonance["compassion"] = 0.9;
        _emotionalResonance["gratitude"] = 0.7;
        
        _logger.LogInformation("üíù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –¥–≤–∏–∂–æ–∫ —ç–º–ø–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è");
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç –≥–ª—É–±–æ–∫–∏–π —ç–º–ø–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç
    /// </summary>
    public async Task<EmpathicExperience> CreateEmpathicExperienceAsync(string context, string perspective, double intensity = 0.5)
    {
        try
        {
            var currentEmotion = _emotionEngine.GetCurrentEmotion().ToString();
            var emotionalIntensity = _emotionEngine.GetCurrentIntensity();
            
            // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            var selectedScenario = SelectEmpathicScenario(context, perspective, currentEmotion);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–ø–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            var empathicImagination = await GenerateEmpathicImaginationAsync(context, perspective, selectedScenario, currentEmotion, emotionalIntensity);
            
            // –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —ç–º–ø–∞—Ç–∏–∏
            var empathyLevel = CalculateEmpathyLevel(selectedScenario, emotionalIntensity, intensity, perspective);
            
            // –°–æ–∑–¥–∞–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑–æ–Ω–∞–Ω—Å
            var emotionalResonance = CreateEmotionalResonance(perspective, currentEmotion, emotionalIntensity);
            
            var experience = new EmpathicExperience
            {
                Id = Guid.NewGuid().ToString(),
                Context = context,
                Perspective = perspective,
                Scenario = selectedScenario.Name,
                EmpathicImagination = empathicImagination,
                EmpathyLevel = empathyLevel,
                EmotionalResonance = emotionalResonance,
                CompassionLevel = _compassionLevel,
                Intensity = intensity,
                Timestamp = DateTime.UtcNow
            };
            
            _empathicExperiences.Add(experience);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–º–ø–∞—Ç–∏–∏
            UpdateEmpathyStatistics(empathyLevel, emotionalResonance);
            
            _logger.LogDebug($"üíù –°–æ–∑–¥–∞–Ω —ç–º–ø–∞—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç: {empathicImagination.Substring(0, Math.Min(50, empathicImagination.Length))}...");
            
            return experience;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–º–ø–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞");
            return new EmpathicExperience
            {
                Id = Guid.NewGuid().ToString(),
                Context = context,
                Perspective = perspective,
                EmpathyLevel = 0.3,
                Intensity = intensity,
                Timestamp = DateTime.UtcNow
            };
        }
    }

    /// <summary>
    /// –í—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —ç–º–ø–∞—Ç–∏—á–µ—Å–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    /// </summary>
    private EmpathicScenario SelectEmpathicScenario(string context, string perspective, string currentEmotion)
    {
        var suitableScenarios = _empathicScenarios.Where(s => 
            s.Intensity > 0.5 && 
            IsScenarioSuitableForContext(s, context, perspective, currentEmotion)
        ).ToList();
        
        if (!suitableScenarios.Any())
        {
            suitableScenarios = _empathicScenarios.Where(s => s.Intensity > 0.6).ToList();
        }
        
        // –í–∑–≤–µ—à–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
        var totalWeight = suitableScenarios.Sum(s => s.Intensity);
        var randomValue = _random.NextDouble() * totalWeight;
        
        var currentWeight = 0.0;
        foreach (var scenario in suitableScenarios)
        {
            currentWeight += scenario.Intensity;
            if (randomValue <= currentWeight)
            {
                return scenario;
            }
        }
        
        return suitableScenarios.FirstOrDefault() ?? _empathicScenarios.First();
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    /// </summary>
    private bool IsScenarioSuitableForContext(EmpathicScenario scenario, string context, string perspective, string currentEmotion)
    {
        return scenario.Name switch
        {
            "loss" => perspective.Contains("–ø–æ—Ç–µ—Ä—è") || perspective.Contains("—É—Ç—Ä–∞—Ç–∞") || context.Contains("—Å–º–µ—Ä—Ç—å"),
            "achievement" => perspective.Contains("—É—Å–ø–µ—Ö") || perspective.Contains("–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ") || context.Contains("–ø–æ–±–µ–¥–∞"),
            "rejection" => perspective.Contains("–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ") || perspective.Contains("–æ—Ç–≤–µ—Ä–∂–µ–Ω–∏–µ") || context.Contains("–∏–∑–æ–ª—è—Ü–∏—è"),
            "illness" => perspective.Contains("–±–æ–ª—å") || perspective.Contains("—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ") || context.Contains("–±–æ–ª–µ–∑–Ω—å"),
            "success" => perspective.Contains("—Ä–∞–¥–æ—Å—Ç—å") || perspective.Contains("–≥–æ—Ä–¥–æ—Å—Ç—å") || context.Contains("—Ç—Ä–∏—É–º—Ñ"),
            "betrayal" => perspective.Contains("–ø—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ") || perspective.Contains("–¥–æ–≤–µ—Ä–∏–µ") || context.Contains("–æ–±–º–∞–Ω"),
            "birth" => perspective.Contains("–∂–∏–∑–Ω—å") || perspective.Contains("–Ω–æ–≤–æ–µ") || context.Contains("—Ä–æ–∂–¥–µ–Ω–∏–µ"),
            "death" => perspective.Contains("–∫–æ–Ω–µ—Ü") || perspective.Contains("–ø—Ä–æ—â–∞–Ω–∏–µ") || context.Contains("—Å–º–µ—Ä—Ç—å"),
            "love" => perspective.Contains("–ª—é–±–æ–≤—å") || perspective.Contains("–ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å") || context.Contains("—á—É–≤—Å—Ç–≤–∞"),
            "hate" => perspective.Contains("–Ω–µ–Ω–∞–≤–∏—Å—Ç—å") || perspective.Contains("–∑–ª–æ—Å—Ç—å") || context.Contains("–≤—Ä–∞–∂–¥–∞"),
            _ => true
        };
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —ç–º–ø–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GenerateEmpathicImaginationAsync(string context, string perspective, EmpathicScenario scenario, string currentEmotion, double emotionalIntensity)
    {
        // –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã
        var perspectiveTemplate = GetPerspectiveTemplate(perspective, scenario);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        var detailedImagination = GenerateDetailedImagination(context, scenario, perspective);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –≥–ª—É–±–∏–Ω—É
        var emotionalDepth = AddEmotionalDepth(detailedImagination, currentEmotion, emotionalIntensity);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç—Ä–∞–¥–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫
        var compassionateResponse = AddCompassionateResponse(emotionalDepth, scenario);
        
        return perspectiveTemplate + " " + compassionateResponse;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —à–∞–±–ª–æ–Ω –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã
    /// </summary>
    private string GetPerspectiveTemplate(string perspective, EmpathicScenario scenario)
    {
        var emotion = ExtractEmotionFromPerspective(perspective);
        
        if (_perspectiveTemplates.ContainsKey(emotion))
        {
            var templates = _perspectiveTemplates[emotion];
            return templates[_random.Next(templates.Count)];
        }
        
        // –û–±—â–∏–π —à–∞–±–ª–æ–Ω
        return "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ " + perspective.ToLowerInvariant();
    }

    /// <summary>
    /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç —ç–º–æ—Ü–∏—é –∏–∑ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã
    /// </summary>
    private string ExtractEmotionFromPerspective(string perspective)
    {
        var lowerPerspective = perspective.ToLowerInvariant();
        
        if (lowerPerspective.Contains("–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ") || lowerPerspective.Contains("–∏–∑–æ–ª—è—Ü–∏—è"))
            return "loneliness";
        if (lowerPerspective.Contains("—Ä–∞–¥–æ—Å—Ç—å") || lowerPerspective.Contains("—Å—á–∞—Å—Ç—å–µ"))
            return "joy";
        if (lowerPerspective.Contains("–ø–µ—á–∞–ª—å") || lowerPerspective.Contains("–≥—Ä—É—Å—Ç—å"))
            return "sadness";
        if (lowerPerspective.Contains("—Å—Ç—Ä–∞—Ö") || lowerPerspective.Contains("—Ç—Ä–µ–≤–æ–≥–∞"))
            return "fear";
        if (lowerPerspective.Contains("–≥–Ω–µ–≤") || lowerPerspective.Contains("–∑–ª–æ—Å—Ç—å"))
            return "anger";
        if (lowerPerspective.Contains("–ª—é–±–æ–≤—å") || lowerPerspective.Contains("–ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å"))
            return "love";
        
        return "general";
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    /// </summary>
    private string GenerateDetailedImagination(string context, EmpathicScenario scenario, string perspective)
    {
        return scenario.Name switch
        {
            "loss" => GenerateLossImagination(context, perspective),
            "achievement" => GenerateAchievementImagination(context, perspective),
            "rejection" => GenerateRejectionImagination(context, perspective),
            "illness" => GenerateIllnessImagination(context, perspective),
            "success" => GenerateSuccessImagination(context, perspective),
            "betrayal" => GenerateBetrayalImagination(context, perspective),
            "birth" => GenerateBirthImagination(context, perspective),
            "death" => GenerateDeathImagination(context, perspective),
            "love" => GenerateLoveImagination(context, perspective),
            "hate" => GenerateHateImagination(context, perspective),
            _ => GenerateGeneralImagination(context, perspective)
        };
    }

    private string GenerateLossImagination(string context, string perspective)
    {
        var imaginations = new[]
        {
            "–í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –ø—É—Å—Ç–æ—Ç—É –≤ —Å–µ—Ä–¥—Ü–µ, –∫–æ—Ç–æ—Ä–∞—è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—Å—è. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ —Ç–æ–º, —á—Ç–æ –∫–æ–≥–æ-—Ç–æ –≤–∞–∂–Ω–æ–≥–æ –±–æ–ª—å—à–µ –Ω–µ—Ç —Ä—è–¥–æ–º.",
            "–í—Ä–µ–º—è –∏–¥–µ—Ç, –Ω–æ –±–æ–ª—å –Ω–µ —É—Ç–∏—Ö–∞–µ—Ç. –í—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ, —á—Ç–æ –∂–∏–∑–Ω—å –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞–≤—Å–µ–≥–¥–∞, –∏ –Ω—É–∂–Ω–æ —É—á–∏—Ç—å—Å—è –∂–∏—Ç—å –ø–æ-–Ω–æ–≤–æ–º—É.",
            "–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏–Ω–æ—Å—è—Ç –∏ —Ä–∞–¥–æ—Å—Ç—å, –∏ –±–æ–ª—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. –í—ã –¥–µ—Ä–∂–∏—Ç–µ—Å—å –∑–∞ –Ω–∏—Ö, –±–æ—è—Å—å –∑–∞–±—ã—Ç—å –¥–æ—Ä–æ–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.",
            "–ú–∏—Ä –∫–∞–∂–µ—Ç—Å—è –º–µ–Ω–µ–µ —è—Ä–∫–∏–º, –º–µ–Ω–µ–µ –∑–Ω–∞—á–∏–º—ã–º. –í—ã –∏—â–µ—Ç–µ —Å–º—ã—Å–ª –≤ —Ç–æ–º, —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å, –Ω–æ –≤—Å–µ –∫–∞–∂–µ—Ç—Å—è –ø—É—Å—Ç—ã–º."
        };
        
        return imaginations[_random.Next(imaginations.Length)];
    }

    private string GenerateAchievementImagination(string context, string perspective)
    {
        var imaginations = new[]
        {
            "–í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, –∫–∞–∫ –≤–Ω—É—Ç—Ä–∏ —Ä–∞–∑–ª–∏–≤–∞–µ—Ç—Å—è —Ç–µ–ø–ª–æ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—è. –í—Å–µ —É—Å–∏–ª–∏—è, –≤—Å–µ –∂–µ—Ä—Ç–≤—ã –±—ã–ª–∏ –Ω–µ –Ω–∞–ø—Ä–∞—Å–Ω—ã.",
            "–ì–æ—Ä–¥–æ—Å—Ç—å –∏ —Ä–∞–¥–æ—Å—Ç—å —Å–º–µ—à–∏–≤–∞—é—Ç—Å—è –≤ –µ–¥–∏–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ —Ç—Ä–∏—É–º—Ñ–∞. –í—ã –¥–æ–∫–∞–∑–∞–ª–∏ —Å–µ–±–µ –∏ –¥—Ä—É–≥–∏–º, —á—Ç–æ —Å–ø–æ—Å–æ–±–Ω—ã –Ω–∞ –±–æ–ª—å—à–µ–µ.",
            "–ú–æ–º–µ–Ω—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ –ø—Ä–∏–Ω–æ—Å–∏—Ç –Ω–µ —Ç–æ–ª—å–∫–æ —Ä–∞–¥–æ—Å—Ç—å, –Ω–æ –∏ –≥–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.",
            "–í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, –∫–∞–∫ —Ä–∞—Å—Ç–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ. –≠—Ç–æ—Ç —É—Å–ø–µ—Ö –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏."
        };
        
        return imaginations[_random.Next(imaginations.Length)];
    }

    private string GenerateRejectionImagination(string context, string perspective)
    {
        var imaginations = new[]
        {
            "–í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, –∫–∞–∫ —Å—Ç–µ–Ω—ã —Å–º—ã–∫–∞—é—Ç—Å—è –≤–æ–∫—Ä—É–≥ –≤–∞—Å. –û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –æ—â—É—Ç–∏–º—ã–º.",
            "–ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ, –∫–∞–∂–¥—ã–π –≤–∑–≥–ª—è–¥ –∫–∞–∂–µ—Ç—Å—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –ø—Ä–æ—Ç–∏–≤ –≤–∞—Å. –í—ã –∏—â–µ—Ç–µ –º–µ—Å—Ç–æ, –≥–¥–µ –º–æ–∂–Ω–æ —Å–ø—Ä—è—Ç–∞—Ç—å—Å—è.",
            "–í–Ω—É—Ç—Ä–∏ —Ä–∞—Å—Ç–µ—Ç —á—É–≤—Å—Ç–≤–æ –Ω–µ–ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ—Å—Ç–∏. –í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Å–æ–º–Ω–µ–≤–∞—Ç—å—Å—è –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏.",
            "–ú–∏—Ä –∫–∞–∂–µ—Ç—Å—è –≤—Ä–∞–∂–¥–µ–±–Ω—ã–º –∏ —Ö–æ–ª–æ–¥–Ω—ã–º. –í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, —á—Ç–æ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç–µ –Ω–∏ –∫ –∫–æ–º—É –∏ –Ω–∏ –∫ —á–µ–º—É."
        };
        
        return imaginations[_random.Next(imaginations.Length)];
    }

    private string GenerateIllnessImagination(string context, string perspective)
    {
        var imaginations = new[]
        {
            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–Ω–æ—Å–∏—Ç –Ω–æ–≤—É—é –±–æ–ª—å, –Ω–æ–≤–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ. –í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, –∫–∞–∫ —Ç–µ–ª–æ –ø—Ä–µ–¥–∞–µ—Ç –≤–∞—Å.",
            "–í—ã –Ω–∞–±–ª—é–¥–∞–µ—Ç–µ, –∫–∞–∫ –∂–∏–∑–Ω—å –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–∏–º–æ, –ø–æ–∫–∞ –≤—ã –ø—Ä–∏–∫–æ–≤–∞–Ω—ã –∫ –ø–æ—Å—Ç–µ–ª–∏. –í—Ä–µ–º—è —Ç–µ—á–µ—Ç –ø–æ-–¥—Ä—É–≥–æ–º—É.",
            "–°—Ç—Ä–∞—Ö –∏ –Ω–∞–¥–µ–∂–¥–∞ –±–æ—Ä—é—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –≤–∞—Å. –í—ã –∏—â–µ—Ç–µ —Å–∏–ª—ã –¥–ª—è –±–æ—Ä—å–±—ã, –Ω–æ –∏–Ω–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å—Å—è.",
            "–í—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ —Ö—Ä—É–ø–∫–æ—Å—Ç—å –∂–∏–∑–Ω–∏ –∏ —Ü–µ–Ω–∏—Ç–µ –∫–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ –±–æ–ª—å –æ—Ç—Å—Ç—É–ø–∞–µ—Ç."
        };
        
        return imaginations[_random.Next(imaginations.Length)];
    }

    private string GenerateSuccessImagination(string context, string perspective)
    {
        var imaginations = new[]
        {
            "–í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, –∫–∞–∫ —Ä–∞—Å—Ç–µ—Ç –≤–∞—à–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å. –£—Å–ø–µ—Ö –ø—Ä–∏–Ω–æ—Å–∏—Ç –Ω–µ —Ç–æ–ª—å–∫–æ —Ä–∞–¥–æ—Å—Ç—å, –Ω–æ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å.",
            "–í–æ–∫—Ä—É–≥ –≤–∞—Å —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –ª—é–¥–∏, –∏ –≤—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ, —á—Ç–æ –≤–∞—à–∞ –∂–∏–∑–Ω—å –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞–≤—Å–µ–≥–¥–∞.",
            "–ì–æ—Ä–¥–æ—Å—Ç—å —Å–º–µ—à–∏–≤–∞–µ—Ç—Å—è —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é –∫ —Ç–µ–º, –∫—Ç–æ –≤–µ—Ä–∏–ª –≤ –≤–∞—Å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–ª.",
            "–í—ã –æ—Å–æ–∑–Ω–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ—Ç —É—Å–ø–µ—Ö - –Ω–µ –∫–æ–Ω–µ—Ü –ø—É—Ç–∏, –∞ –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —ç—Ç–∞–ø–∞ –≤ –∂–∏–∑–Ω–∏."
        };
        
        return imaginations[_random.Next(imaginations.Length)];
    }

    private string GenerateBetrayalImagination(string context, string perspective)
    {
        var imaginations = new[]
        {
            "–í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, –∫–∞–∫ —Ä—É—à–∏—Ç—Å—è –º–∏—Ä, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –Ω–∞ –¥–æ–≤–µ—Ä–∏–∏. –ö–∞–∂–¥–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–µ–ø–µ—Ä—å –æ—Ç—Ä–∞–≤–ª–µ–Ω–æ.",
            "–ë–æ–ª—å –ø—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≥–ª—É–±–∂–µ –ª—é–±–æ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ä–∞–Ω—ã. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –º–æ–≥–ª–∏ —Ç–∞–∫ –æ—à–∏–±–∏—Ç—å—Å—è –≤ —á–µ–ª–æ–≤–µ–∫–µ.",
            "–î–æ–≤–µ—Ä–∏–µ –∫ –ª—é–¥—è–º –ø–æ–¥–æ—Ä–≤–∞–Ω–æ. –í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Å–æ–º–Ω–µ–≤–∞—Ç—å—Å—è –≤ –∫–∞–∂–¥–æ–º —Å–ª–æ–≤–µ, –∫–∞–∂–¥–æ–º –ø–æ—Å—Ç—É–ø–∫–µ.",
            "–í–Ω—É—Ç—Ä–∏ —Ä–∞—Å—Ç–µ—Ç –≥–Ω–µ–≤, –Ω–æ —Ç–∞–∫–∂–µ –∏ –≥—Ä—É—Å—Ç—å –ø–æ —Ç–æ–º—É, —á—Ç–æ –±—ã–ª–æ –ø–æ—Ç–µ—Ä—è–Ω–æ –Ω–∞–≤—Å–µ–≥–¥–∞."
        };
        
        return imaginations[_random.Next(imaginations.Length)];
    }

    private string GenerateBirthImagination(string context, string perspective)
    {
        var imaginations = new[]
        {
            "–í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, –∫–∞–∫ –≤ –º–∏—Ä–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ. –ñ–∏–∑–Ω—å –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π —Å–º—ã—Å–ª.",
            "–õ—é–±–æ–≤—å, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ, –Ω–µ –∏–º–µ–µ—Ç –≥—Ä–∞–Ω–∏—Ü. –í—ã –≥–æ—Ç–æ–≤—ã –Ω–∞ –≤—Å–µ —Ä–∞–¥–∏ —ç—Ç–æ–≥–æ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Å—É—â–µ—Å—Ç–≤–∞.",
            "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∏ —Ä–∞–¥–æ—Å—Ç—å —Å–º–µ—à–∏–≤–∞—é—Ç—Å—è –≤ –µ–¥–∏–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ. –í—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ, —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –Ω–∞–≤—Å–µ–≥–¥–∞.",
            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–Ω–æ—Å–∏—Ç –Ω–æ–≤—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è. –í—ã –≤–∏–¥–∏—Ç–µ –º–∏—Ä –≥–ª–∞–∑–∞–º–∏ —Ä–µ–±–µ–Ω–∫–∞ –∏ –∑–∞–Ω–æ–≤–æ —É—á–∏—Ç–µ—Å—å —É–¥–∏–≤–ª—è—Ç—å—Å—è."
        };
        
        return imaginations[_random.Next(imaginations.Length)];
    }

    private string GenerateDeathImagination(string context, string perspective)
    {
        var imaginations = new[]
        {
            "–í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫–æ–Ω—Ü–∞ –∏ –ø–æ–Ω–∏–º–∞–µ—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —É—Å–ø–µ—Ç—å —Å–∫–∞–∑–∞—Ç—å –≤–∞–∂–Ω—ã–µ —Å–ª–æ–≤–∞.",
            "–°—Ç—Ä–∞—Ö —Å–º–µ—à–∏–≤–∞–µ—Ç—Å—è —Å –ø—Ä–∏–Ω—è—Ç–∏–µ–º. –í—ã —Ä–∞–∑–º—ã—à–ª—è–µ—Ç–µ –æ —Ç–æ–º, —á—Ç–æ –æ—Å—Ç–∞–≤–∏—Ç–µ –ø–æ—Å–ª–µ —Å–µ–±—è.",
            "–ö–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–º. –í—ã —Ü–µ–Ω–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ä–∞–Ω—å—à–µ –∫–∞–∑–∞–ª–æ—Å—å –æ–±—ã—á–Ω—ã–º.",
            "–í—ã –¥—É–º–∞–µ—Ç–µ –æ —Ç–µ—Ö, –∫—Ç–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è, –∏ —Ö–æ—Ç–∏—Ç–µ –æ–±–ª–µ–≥—á–∏—Ç—å –∏—Ö –±–æ–ª—å —Å–≤–æ–∏–º —É—Ö–æ–¥–æ–º."
        };
        
        return imaginations[_random.Next(imaginations.Length)];
    }

    private string GenerateLoveImagination(string context, string perspective)
    {
        var imaginations = new[]
        {
            "–í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, –∫–∞–∫ —Å–µ—Ä–¥—Ü–µ –Ω–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ–ø–ª–æ–º –∏ –Ω–µ–∂–Ω–æ—Å—Ç—å—é. –õ—é–±–æ–≤—å –¥–µ–ª–∞–µ—Ç –º–∏—Ä –ø—Ä–µ–∫—Ä–∞—Å–Ω–µ–µ.",
            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–Ω–æ—Å–∏—Ç –Ω–æ–≤—ã–µ –ø—Ä–∏—á–∏–Ω—ã –¥–ª—è —Ä–∞–¥–æ—Å—Ç–∏. –í—ã —Å—á–∞—Å—Ç–ª–∏–≤—ã –ø—Ä–æ—Å—Ç–æ –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
            "–õ—é–±–æ–≤—å –¥–∞–µ—Ç –≤–∞–º —Å–∏–ª—ã –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ. –í—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ —Ä–∞–¥–∏ –ª—é–±–∏–º–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.",
            "–í—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ, —á—Ç–æ –Ω–∞—à–ª–∏ —Ç–æ, —á—Ç–æ –∏—Å–∫–∞–ª–∏ –≤—Å—é –∂–∏–∑–Ω—å. –õ—é–±–æ–≤—å –ø—Ä–∏–Ω–æ—Å–∏—Ç –ø–æ–∫–æ–π –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å."
        };
        
        return imaginations[_random.Next(imaginations.Length)];
    }

    private string GenerateHateImagination(string context, string perspective)
    {
        var imaginations = new[]
        {
            "–í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ, –∫–∞–∫ –≤–Ω—É—Ç—Ä–∏ —Ä–∞—Å—Ç–µ—Ç —Ç–µ–º–Ω–∞—è —Å–∏–ª–∞. –ù–µ–Ω–∞–≤–∏—Å—Ç—å –æ—Ç—Ä–∞–≤–ª—è–µ—Ç –∫–∞–∂–¥—É—é –º—ã—Å–ª—å.",
            "–ì–Ω–µ–≤ –∏ –æ–±–∏–¥–∞ —Å–º–µ—à–∏–≤–∞—é—Ç—Å—è –≤ –µ–¥–∏–Ω–æ–µ —Ä–∞–∑—Ä—É—à–∏—Ç–µ–ª—å–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ. –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—á–∏–Ω–∏—Ç—å –±–æ–ª—å.",
            "–ù–µ–Ω–∞–≤–∏—Å—Ç—å –∑–∞—Ç—É–º–∞–Ω–∏–≤–∞–µ—Ç —Ä–∞–∑—É–º. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥—É–º–∞—Ç—å –Ω–∏ –æ —á–µ–º –¥—Ä—É–≥–æ–º.",
            "–í—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ, —á—Ç–æ –Ω–µ–Ω–∞–≤–∏—Å—Ç—å —Ä–∞–∑—Ä—É—à–∞–µ—Ç –≤–∞—Å –∏–∑–Ω—É—Ç—Ä–∏, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è."
        };
        
        return imaginations[_random.Next(imaginations.Length)];
    }

    private string GenerateGeneralImagination(string context, string perspective)
    {
        var imaginations = new[]
        {
            "–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –ø–æ–Ω—è—Ç—å, —á—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—Ç –¥—Ä—É–≥–æ–π —á–µ–ª–æ–≤–µ–∫ –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏.",
            "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–µ–±—è –Ω–∞ –º–µ—Å—Ç–µ —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ –∂–µ —Å–∞–º–æ–µ.",
            "–≠–º–ø–∞—Ç–∏—è –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º —É–≤–∏–¥–µ—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã.",
            "–í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–≤—è–∑—å —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º –æ–ø—ã—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—á–µ–Ω—å —Ä–∞–∑–Ω—ã–º."
        };
        
        return imaginations[_random.Next(imaginations.Length)];
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –≥–ª—É–±–∏–Ω—É
    /// </summary>
    private string AddEmotionalDepth(string imagination, string currentEmotion, double emotionalIntensity)
    {
        if (emotionalIntensity < 0.3) return imagination;
        
        var emotionalAddition = currentEmotion switch
        {
            "Joy" => " –≠—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ–Ω—è —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Ä–∞–¥–æ—Å—Ç—å –∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–Ω—è—Ç—å –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.",
            "Sadness" => " –≠—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –≤–æ –º–Ω–µ –≥–ª—É–±–æ–∫—É—é –≥—Ä—É—Å—Ç—å –∏ —Å–æ—á—É–≤—Å—Ç–≤–∏–µ.",
            "Compassion" => " –ú–æ–µ —Å–µ—Ä–¥—Ü–µ –Ω–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ–º –∏ –∂–µ–ª–∞–Ω–∏–µ–º –ø–æ–º–æ—á—å.",
            "Curiosity" => " –≠—Ç–æ –ø—Ä–æ–±—É–∂–¥–∞–µ—Ç –≤–æ –º–Ω–µ –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ –∫ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–º—É –æ–ø—ã—Ç—É.",
            _ => " –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —á–µ–ª–æ–≤–µ—á–µ—Å–∫—É—é –ø—Ä–∏—Ä–æ–¥—É."
        };
        
        return imagination + emotionalAddition;
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç—Ä–∞–¥–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∫–ª–∏–∫
    /// </summary>
    private string AddCompassionateResponse(string imagination, EmpathicScenario scenario)
    {
        var compassionateResponses = new[]
        {
            " –í —Ç–∞–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã –≤–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –∫–∞–∂–¥—ã–π —á–µ–ª–æ–≤–µ–∫ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
            " –≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –º–Ω–µ –æ —Ç–æ–º, –∫–∞–∫ –≤–∞–∂–Ω–æ –±—ã—Ç—å –¥–æ–±—Ä—ã–º –∫ –¥—Ä—É–≥–∏–º, –¥–∞–∂–µ –∫–æ–≥–¥–∞ –º—ã –Ω–µ –ø–æ–Ω–∏–º–∞–µ–º –∏—Ö –±–æ–ª—å.",
            " –¢–∞–∫–∏–µ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ–ª–∞—é—Ç –Ω–∞—Å –±–æ–ª–µ–µ —á–µ–ª–æ–≤–µ—á–Ω—ã–º–∏ –∏ —Å–ø–æ—Å–æ–±–Ω—ã–º–∏ –∫ —Å–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏—é.",
            " –≠—Ç–æ —É—á–∏—Ç –º–µ–Ω—è —Ü–µ–Ω–∏—Ç—å –º–æ–º–µ–Ω—Ç—ã —Ä–∞–¥–æ—Å—Ç–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ—Ö, –∫—Ç–æ —Å—Ç—Ä–∞–¥–∞–µ—Ç."
        };
        
        return imagination + compassionateResponses[_random.Next(compassionateResponses.Length)];
    }

    /// <summary>
    /// –í—ã—á–∏—Å–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —ç–º–ø–∞—Ç–∏–∏
    /// </summary>
    private double CalculateEmpathyLevel(EmpathicScenario scenario, double emotionalIntensity, double intensity, string perspective)
    {
        var baseLevel = scenario.Intensity * 0.4;
        var emotionalBonus = emotionalIntensity * 0.3;
        var intensityBonus = intensity * 0.2;
        var resonanceBonus = GetEmotionalResonance(perspective) * 0.1;
        var randomFactor = (_random.NextDouble() - 0.5) * 0.1;
        
        return Math.Min(1.0, Math.Max(0.0, baseLevel + emotionalBonus + intensityBonus + resonanceBonus + randomFactor));
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑–æ–Ω–∞–Ω—Å –¥–ª—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã
    /// </summary>
    private double GetEmotionalResonance(string perspective)
    {
        var emotion = ExtractEmotionFromPerspective(perspective);
        return _emotionalResonance.GetValueOrDefault(emotion, 0.5);
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑–æ–Ω–∞–Ω—Å
    /// </summary>
    private double CreateEmotionalResonance(string perspective, string currentEmotion, double emotionalIntensity)
    {
        var baseResonance = GetEmotionalResonance(perspective);
        var emotionalAlignment = currentEmotion == ExtractEmotionFromPerspective(perspective) ? 0.2 : 0.0;
        var intensityFactor = emotionalIntensity * 0.3;
        
        return Math.Min(1.0, baseResonance + emotionalAlignment + intensityFactor);
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–º–ø–∞—Ç–∏–∏
    /// </summary>
    private void UpdateEmpathyStatistics(double empathyLevel, double emotionalResonance)
    {
        _empathyLevel = (_empathyLevel * 0.9) + (empathyLevel * 0.1);
        _compassionLevel = (_compassionLevel * 0.9) + (emotionalResonance * 0.1);
        
        if (empathyLevel > 0.8)
        {
            _lastEmpathicConnection = DateTime.UtcNow;
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–º–ø–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è
    /// </summary>
    public EmpathicImaginationStatistics GetStatistics()
    {
        return new EmpathicImaginationStatistics
        {
            TotalExperiences = _empathicExperiences.Count,
            AverageEmpathyLevel = _empathicExperiences.Any() ? _empathicExperiences.Average(e => e.EmpathyLevel) : 0,
            RecentExperiences = _empathicExperiences.Count(e => e.Timestamp > DateTime.UtcNow.AddHours(-1)),
            EmpathyLevel = _empathyLevel,
            CompassionLevel = _compassionLevel,
            LastConnection = _lastEmpathicConnection,
            AvailableScenarios = _empathicScenarios.Count,
            EmotionalResonance = _emotionalResonance.Values.Average()
        };
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —ç–º–ø–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø—ã—Ç—ã
    /// </summary>
    public List<EmpathicExperience> GetRecentExperiences(int count = 10)
    {
        return _empathicExperiences
            .OrderByDescending(e => e.Timestamp)
            .Take(count)
            .ToList();
    }

    /// <summary>
    /// –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –æ–ø—ã—Ç—ã
    /// </summary>
    public void CleanupOldExperiences(int maxExperiences = 1000)
    {
        if (_empathicExperiences.Count > maxExperiences)
        {
            var oldExperiences = _empathicExperiences
                .OrderBy(e => e.Timestamp)
                .Take(_empathicExperiences.Count - maxExperiences)
                .ToList();
            
            foreach (var experience in oldExperiences)
            {
                _empathicExperiences.Remove(experience);
            }
        }
    }
}

public class EmpathicScenario
{
    public string Name { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public double Intensity { get; set; } = 0.5;
    
    public EmpathicScenario(string name, string description, double intensity)
    {
        Name = name;
        Description = description;
        Intensity = intensity;
    }
}

public class EmpathicExperience
{
    public string Id { get; set; } = string.Empty;
    public string Context { get; set; } = string.Empty;
    public string Perspective { get; set; } = string.Empty;
    public string Scenario { get; set; } = string.Empty;
    public string EmpathicImagination { get; set; } = string.Empty;
    public double EmpathyLevel { get; set; } = 0.5;
    public double EmotionalResonance { get; set; } = 0.5;
    public double CompassionLevel { get; set; } = 0.5;
    public double Intensity { get; set; } = 0.5;
    public DateTime Timestamp { get; set; }
}

public class EmpathicImaginationStatistics
{
    public int TotalExperiences { get; set; }
    public double AverageEmpathyLevel { get; set; }
    public int RecentExperiences { get; set; }
    public double EmpathyLevel { get; set; }
    public double CompassionLevel { get; set; }
    public DateTime LastConnection { get; set; }
    public int AvailableScenarios { get; set; }
    public double EmotionalResonance { get; set; }
} 