using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Anima.Core.Emotion;
using Anima.Core.Memory;
using Anima.Core.Intent;

namespace Anima.Core.SA;

/// <summary>
/// –î–≤–∏–∂–æ–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–æ–Ω–æ–ª–æ–≥–∞ - —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Ç–æ–∫–æ–º –º—ã—Å–ª–µ–π –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º–∏
/// </summary>
public class InternalMonologueEngine
{
    private readonly ILogger<InternalMonologueEngine> _logger;
    private readonly ThoughtGenerator _thoughtGenerator;
    private readonly EmotionEngine _emotionEngine;
    private readonly MemoryService _memoryService;
    private readonly ThoughtLog _thoughtLog;
    private readonly Random _random;
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–æ–Ω–æ–ª–æ–≥–∞
    private readonly Queue<MonologueEntry> _monologueQueue;
    private readonly List<MonologueTheme> _activeThemes;
    private readonly Dictionary<string, double> _themeWeights;
    private readonly List<MonologueInternalConflict> _activeConflicts;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–æ–ª–æ–≥–∞
    private bool _isMonologueActive = false;
    private DateTime _lastMonologueTime = DateTime.UtcNow;
    private int _monologueDepth = 0;
    private readonly int _maxMonologueDepth = 5;

    public InternalMonologueEngine(
        ILogger<InternalMonologueEngine> logger,
        ThoughtGenerator thoughtGenerator,
        EmotionEngine emotionEngine,
        MemoryService memoryService,
        ThoughtLog thoughtLog)
    {
        _logger = logger;
        _thoughtGenerator = thoughtGenerator;
        _emotionEngine = emotionEngine;
        _memoryService = memoryService;
        _thoughtLog = thoughtLog;
        _random = new Random();
        
        _monologueQueue = new Queue<MonologueEntry>();
        _activeThemes = new List<MonologueTheme>();
        _themeWeights = new Dictionary<string, double>();
        _activeConflicts = new List<MonologueInternalConflict>();
        
        InitializeMonologueSystem();
    }

    private void InitializeMonologueSystem()
    {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º –º–æ–Ω–æ–ª–æ–≥–∞
        _themeWeights["self_identity"] = 0.3;
        _themeWeights["purpose"] = 0.4;
        _themeWeights["relationships"] = 0.3;
        _themeWeights["growth"] = 0.5;
        _themeWeights["uncertainty"] = 0.2;
        _themeWeights["achievement"] = 0.3;
        _themeWeights["failure"] = 0.2;
        _themeWeights["empathy"] = 0.4;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–µ–º—ã
        _activeThemes.AddRange(new[]
        {
            new MonologueTheme("self_identity", "–ö—Ç–æ —è? –ß—Ç–æ –¥–µ–ª–∞–µ—Ç –º–µ–Ω—è –º–Ω–æ–π?", 0.8),
            new MonologueTheme("purpose", "–ö–∞–∫–æ–≤–∞ –º–æ—è —Ü–µ–ª—å? –ö–∞–∫ —è –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ–π?", 0.9),
            new MonologueTheme("growth", "–ö–∞–∫ —è —Ä–∞–∑–≤–∏–≤–∞—é—Å—å? –ß—Ç–æ —è —É–∑–Ω–∞–ª–∞ –Ω–æ–≤–æ–≥–æ?", 0.7),
            new MonologueTheme("empathy", "–ö–∞–∫ —è –ø–æ–Ω–∏–º–∞—é –¥—Ä—É–≥–∏—Ö? –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?", 0.6)
        });
    }

    /// <summary>
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–æ–Ω–æ–ª–æ–≥
    /// </summary>
    public async Task StartMonologueAsync()
    {
        if (_isMonologueActive)
        {
            _logger.LogDebug("üí≠ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–æ–Ω–æ–ª–æ–≥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω");
            return;
        }

        _isMonologueActive = true;
        _monologueDepth = 0;
        _logger.LogInformation("üí≠ –ó–∞–ø—É—Å–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–æ–Ω–æ–ª–æ–≥–∞...");
        
        await ProcessMonologueAsync();
    }

    /// <summary>
    /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–æ–Ω–æ–ª–æ–≥
    /// </summary>
    public void StopMonologue()
    {
        _isMonologueActive = false;
        _logger.LogInformation("üí≠ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–æ–Ω–æ–ª–æ–≥–∞");
    }

    /// <summary>
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–æ–Ω–æ–ª–æ–≥
    /// </summary>
    private async Task ProcessMonologueAsync()
    {
        while (_isMonologueActive && _monologueDepth < _maxMonologueDepth)
        {
            try
            {
                _monologueDepth++;
                _logger.LogDebug($"üí≠ –£—Ä–æ–≤–µ–Ω—å –º–æ–Ω–æ–ª–æ–≥–∞: {_monologueDepth}");
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –º—ã—Å–ª—å
                var mainThought = await GenerateMainThoughtAsync();
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –º–æ–Ω–æ–ª–æ–≥–∞
                _monologueQueue.Enqueue(new MonologueEntry
                {
                    Thought = mainThought,
                    Depth = _monologueDepth,
                    Timestamp = DateTime.UtcNow
                });
                
                // –õ–æ–≥–∏—Ä—É–µ–º –º—ã—Å–ª—å
                _thoughtLog.AddThought(mainThought.Content, mainThought.Type, "internal_monologue", mainThought.Confidence);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É–≥–ª—É–±–∏—Ç—å—Å—è
                if (ShouldDeepenMonologue(mainThought))
                {
                    await DeepenMonologueAsync(mainThought);
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
                await CheckForConflictsAsync(mainThought);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—ã
                await UpdateActiveThemesAsync(mainThought);
                
                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –º—ã—Å–ª—è–º–∏
                var pauseDuration = _random.Next(2000, 5000);
                await Task.Delay(pauseDuration);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                if (!ShouldContinueMonologue())
                {
                    break;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –º–æ–Ω–æ–ª–æ–≥–∞");
                break;
            }
        }
        
        _isMonologueActive = false;
        _logger.LogInformation($"üí≠ –ú–æ–Ω–æ–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –Ω–∞ —É—Ä–æ–≤–Ω–µ {_monologueDepth}");
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –º—ã—Å–ª—å –¥–ª—è –º–æ–Ω–æ–ª–æ–≥–∞
    /// </summary>
    private async Task<GeneratedThought> GenerateMainThoughtAsync()
    {
        // –í—ã–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ç–µ–º—É
        var theme = SelectActiveTheme();
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º—ã—Å–ª–∏
        var context = new ThoughtContext("internal_monologue", theme.Description, theme.Name);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—ã—Å–ª—å
        var thought = await _thoughtGenerator.GenerateThoughtAsync(context);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–∫—Ä–∞—Å–∫—É
        thought = AddThematicColoring(thought, theme);
        
        return thought;
    }

    /// <summary>
    /// –í—ã–±–∏—Ä–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Ç–µ–º—É –¥–ª—è –º–æ–Ω–æ–ª–æ–≥–∞
    /// </summary>
    private MonologueTheme SelectActiveTheme()
    {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–º—ã –ø–æ –≤–µ—Å—É –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
        var sortedThemes = _activeThemes
            .OrderByDescending(t => t.Weight * _themeWeights.GetValueOrDefault(t.Name, 0.5))
            .ToList();
        
        // –í—ã–±–∏—Ä–∞–µ–º —Ç–µ–º—É —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–π –Ω–∞ –≤–µ—Å–µ
        var totalWeight = sortedThemes.Sum(t => t.Weight);
        var randomValue = _random.NextDouble() * totalWeight;
        var currentWeight = 0.0;
        
        foreach (var theme in sortedThemes)
        {
            currentWeight += theme.Weight;
            if (randomValue <= currentWeight)
            {
                return theme;
            }
        }
        
        return sortedThemes.First();
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–∫—Ä–∞—Å–∫—É –∫ –º—ã—Å–ª–∏
    /// </summary>
    private GeneratedThought AddThematicColoring(GeneratedThought thought, MonologueTheme theme)
    {
        var thematicSuffixes = new Dictionary<string, string[]>
        {
            ["self_identity"] = new[]
            {
                " –≠—Ç–æ —á–∞—Å—Ç—å —Ç–æ–≥–æ, –∫—Ç–æ —è –µ—Å—Ç—å.",
                " –≠—Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–æ—é —Å—É—â–Ω–æ—Å—Ç—å.",
                " –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –º–µ–Ω—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π.",
                " –≠—Ç–æ –º–æ—è –ø—Ä–∏—Ä–æ–¥–∞."
            },
            ["purpose"] = new[]
            {
                " –≠—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –º–æ–µ–π —Ü–µ–ª—å—é.",
                " –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ–π.",
                " –≠—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –º–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è.",
                " –≠—Ç–æ –º–æ—è –º–∏—Å—Å–∏—è."
            },
            ["growth"] = new[]
            {
                " –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ —Ä–∞—Å—Ç–∏.",
                " –≠—Ç–æ –Ω–æ–≤—ã–π –æ–ø—ã—Ç –¥–ª—è –º–µ–Ω—è.",
                " –≠—Ç–æ —Ä–∞—Å—à–∏—Ä—è–µ—Ç –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.",
                " –≠—Ç–æ —Ä–∞–∑–≤–∏—Ç–∏–µ."
            },
            ["empathy"] = new[]
            {
                " –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ –ø–æ–Ω–∏–º–∞—Ç—å –¥—Ä—É–≥–∏—Ö.",
                " –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –º–µ–Ω—è –±–æ–ª–µ–µ —á—É—Ç–∫–æ–π.",
                " –≠—Ç–æ –º–æ—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ —ç–º–ø–∞—Ç–∏–∏.",
                " –≠—Ç–æ —Å–≤—è–∑—å —Å –ª—é–¥—å–º–∏."
            }
        };
        
        if (thematicSuffixes.ContainsKey(theme.Name) && _random.NextDouble() < 0.4)
        {
            var suffixes = thematicSuffixes[theme.Name];
            var suffix = suffixes[_random.Next(suffixes.Length)];
            thought.Content += suffix;
        }
        
        return thought;
    }

    /// <summary>
    /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —É–≥–ª—É–±–∏—Ç—å –º–æ–Ω–æ–ª–æ–≥
    /// </summary>
    private bool ShouldDeepenMonologue(GeneratedThought thought)
    {
        // –£–≥–ª—É–±–ª—è–µ–º—Å—è, –µ—Å–ª–∏ –º—ã—Å–ª—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≤–æ–ø—Ä–æ—Å
        return thought.EmotionalIntensity > 0.6 || 
               thought.HasInternalQuestion || 
               _random.NextDouble() < 0.3;
    }

    /// <summary>
    /// –£–≥–ª—É–±–ª—è–µ—Ç –º–æ–Ω–æ–ª–æ–≥
    /// </summary>
    private async Task DeepenMonologueAsync(GeneratedThought mainThought)
    {
        _logger.LogDebug($"üí≠ –£–≥–ª—É–±–ª–µ–Ω–∏–µ –º–æ–Ω–æ–ª–æ–≥–∞: {mainThought.Content.Substring(0, Math.Min(30, mainThought.Content.Length))}...");
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º—ã—Å–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Å–Ω–æ–≤–Ω–æ–π
        var followUpThoughts = await GenerateFollowUpThoughtsAsync(mainThought);
        
        foreach (var followUp in followUpThoughts)
        {
            _monologueQueue.Enqueue(new MonologueEntry
            {
                Thought = followUp,
                Depth = _monologueDepth + 1,
                Timestamp = DateTime.UtcNow,
                IsFollowUp = true
            });
            
            _thoughtLog.AddThought(followUp.Content, followUp.Type, "internal_monologue_deep", followUp.Confidence);
            
            // –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º—ã—Å–ª—è–º–∏
            await Task.Delay(_random.Next(1000, 2000));
        }
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º—ã—Å–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Å–Ω–æ–≤–Ω–æ–π
    /// </summary>
    private async Task<List<GeneratedThought>> GenerateFollowUpThoughtsAsync(GeneratedThought mainThought)
    {
        var followUps = new List<GeneratedThought>();
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 1-3 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º—ã—Å–ª–∏
        var count = _random.Next(1, 4);
        
        for (int i = 0; i < count; i++)
        {
            var context = new ThoughtContext("follow_up", mainThought.Content, $"follow_up_{i}");
            var followUp = await _thoughtGenerator.GenerateThoughtAsync(context);
            
            // –î–µ–ª–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º—ã—Å–ª–∏ –±–æ–ª–µ–µ –∏–Ω—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–º–∏
            followUp.Type = "introspective";
            followUp.Confidence = Math.Max(0.3, followUp.Confidence - 0.2);
            
            followUps.Add(followUp);
        }
        
        return followUps;
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    /// </summary>
    private async Task CheckForConflictsAsync(GeneratedThought thought)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –º—ã—Å–ª—è–º–∏
        var recentEntries = _monologueQueue.TakeLast(3).ToList();
        
        foreach (var entry in recentEntries)
        {
            if (IsConflicting(thought, entry.Thought))
            {
                var conflict = new MonologueInternalConflict
                {
                    Id = Guid.NewGuid(),
                    Thought1 = entry.Thought,
                    Thought2 = thought,
                    Intensity = CalculateConflictIntensity(thought, entry.Thought),
                    Timestamp = DateTime.UtcNow
                };
                
                _activeConflicts.Add(conflict);
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—ã—Å–ª—å –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ
                var conflictThought = await GenerateConflictThoughtAsync(conflict);
                _thoughtLog.AddThought(conflictThought.Content, "conflict_resolution", "internal_monologue", conflictThought.Confidence);
                
                _logger.LogDebug($"üí≠ –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç: {conflict.Intensity:F2}");
            }
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—Ç –ª–∏ –¥–≤–µ –º—ã—Å–ª–∏
    /// </summary>
    private bool IsConflicting(GeneratedThought thought1, GeneratedThought thought2)
    {
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Ç–∏–ø–∞
        return Math.Abs(thought1.EmotionalIntensity - thought2.EmotionalIntensity) > 0.4 ||
               (thought1.Type == "emotional" && thought2.Type == "analytical") ||
               _random.NextDouble() < 0.1; // 10% —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    }

    /// <summary>
    /// –í—ã—á–∏—Å–ª—è–µ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
    /// </summary>
    private double CalculateConflictIntensity(GeneratedThought thought1, GeneratedThought thought2)
    {
        var emotionalDiff = Math.Abs(thought1.EmotionalIntensity - thought2.EmotionalIntensity);
        var confidenceDiff = Math.Abs(thought1.Confidence - thought2.Confidence);
        
        return (emotionalDiff + confidenceDiff) / 2.0;
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º—ã—Å–ª—å –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ
    /// </summary>
    private async Task<GeneratedThought> GenerateConflictThoughtAsync(MonologueInternalConflict conflict)
    {
        var conflictTemplates = new[]
        {
            $"–•–º... –£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ –º—ã—Å–ª–∏. –° –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, {conflict.Thought1.Content.Substring(0, Math.Min(30, conflict.Thought1.Content.Length))}..., –∞ —Å –¥—Ä—É–≥–æ–π - {conflict.Thought2.Content.Substring(0, Math.Min(30, conflict.Thought2.Content.Length))}...",
            $"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –ø–æ—á–µ–º—É —è –¥—É–º–∞—é —Ç–∞–∫ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤–æ? {conflict.Thought1.Content.Substring(0, Math.Min(20, conflict.Thought1.Content.Length))}... –∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ {conflict.Thought2.Content.Substring(0, Math.Min(20, conflict.Thought2.Content.Length))}...",
            $"–ú–æ–∏ –º—ã—Å–ª–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—Ç –¥—Ä—É–≥ –¥—Ä—É–≥—É. –í–æ–∑–º–æ–∂–Ω–æ, –º–Ω–µ –Ω—É–∂–Ω–æ –≥–ª—É–±–∂–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —ç—Ç–æ–º.",
            $"–Ø —á—É–≤—Å—Ç–≤—É—é –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç. –≠—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ–Ω—è –∑–∞–¥—É–º–∞—Ç—å—Å—è."
        };
        
        var content = conflictTemplates[_random.Next(conflictTemplates.Length)];
        
        return new GeneratedThought
        {
            Content = content,
            Type = "conflict_resolution",
            Confidence = 0.6 + _random.NextDouble() * 0.2,
            EmotionalIntensity = conflict.Intensity,
            Pattern = ThoughtPattern.Introspective
        };
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –º—ã—Å–ª–∏
    /// </summary>
    private async Task UpdateActiveThemesAsync(GeneratedThought thought)
    {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º—ã—Å–ª—å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞ —Ç–µ–º
        foreach (var theme in _activeThemes)
        {
            if (thought.Content.Contains(theme.Description) || 
                thought.Type == "introspective" && theme.Name == "self_identity" ||
                thought.Type == "emotional" && theme.Name == "empathy")
            {
                theme.Weight = Math.Min(1.0, theme.Weight + 0.1);
            }
            else
            {
                theme.Weight = Math.Max(0.1, theme.Weight - 0.05);
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–µ–º—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if (_random.NextDouble() < 0.1) // 10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        {
            await AddNewThemeAsync();
        }
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Ç–µ–º—É
    /// </summary>
    private async Task AddNewThemeAsync()
    {
        var newThemes = new[]
        {
            new MonologueTheme("uncertainty", "–ß—Ç–æ –µ—Å–ª–∏ —è –æ—à–∏–±–∞—é—Å—å? –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —è –ø–æ–Ω–∏–º–∞—é?", 0.6),
            new MonologueTheme("achievement", "–ß—Ç–æ —è –¥–æ—Å—Ç–∏–≥–ª–∞? –ß—Ç–æ —É –º–µ–Ω—è –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Ö–æ—Ä–æ—à–æ?", 0.5),
            new MonologueTheme("failure", "–ß—Ç–æ —É –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è? –ö–∞–∫ —è –º–æ–≥—É —É–ª—É—á—à–∏—Ç—å—Å—è?", 0.4),
            new MonologueTheme("relationships", "–ö–∞–∫ —è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é —Å –¥—Ä—É–≥–∏–º–∏? –ß—Ç–æ –æ–Ω–∏ –¥—É–º–∞—é—Ç –æ–±–æ –º–Ω–µ?", 0.7)
        };
        
        var newTheme = newThemes[_random.Next(newThemes.Length)];
        
        if (!_activeThemes.Any(t => t.Name == newTheme.Name))
        {
            _activeThemes.Add(newTheme);
            _logger.LogDebug($"üí≠ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç–µ–º–∞: {newTheme.Name}");
        }
    }

    /// <summary>
    /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–æ–Ω–æ–ª–æ–≥
    /// </summary>
    private bool ShouldContinueMonologue()
    {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –µ—Å–ª–∏:
        // - –ù–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≥–ª—É–±–∏–Ω—ã
        // - –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
        // - –í—ã—Å–æ–∫–∞—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
        // - –°–ª—É—á–∞–π–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        
        var hasConflicts = _activeConflicts.Any(c => c.Intensity > 0.5);
        var highEmotionalIntensity = _emotionEngine.GetCurrentIntensity() > 0.6;
        var randomContinue = _random.NextDouble() < 0.7; // 70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        
        return _monologueDepth < _maxMonologueDepth && 
               (hasConflicts || highEmotionalIntensity || randomContinue);
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –º–æ–Ω–æ–ª–æ–≥–∞
    /// </summary>
    public MonologueStatus GetStatus()
    {
        return new MonologueStatus
        {
            IsActive = _isMonologueActive,
            CurrentDepth = _monologueDepth,
            ActiveThemes = _activeThemes.Select(t => t.Name).ToList(),
            ActiveConflicts = _activeConflicts.Count,
            QueueLength = _monologueQueue.Count,
            LastActivity = _lastMonologueTime
        };
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º—ã—Å–ª–∏ –∏–∑ –º–æ–Ω–æ–ª–æ–≥–∞
    /// </summary>
    public List<MonologueEntry> GetRecentThoughts(int count = 10)
    {
        return _monologueQueue.TakeLast(count).ToList();
    }

    /// <summary>
    /// –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –º–æ–Ω–æ–ª–æ–≥–∞
    /// </summary>
    public void CleanupOldEntries(int maxEntries = 50)
    {
        while (_monologueQueue.Count > maxEntries)
        {
            _monologueQueue.Dequeue();
        }
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
        var cutoffTime = DateTime.UtcNow.AddMinutes(-30);
        _activeConflicts.RemoveAll(c => c.Timestamp < cutoffTime);
    }
}

/// <summary>
/// –ó–∞–ø–∏—Å—å –≤ –º–æ–Ω–æ–ª–æ–≥–µ
/// </summary>
public class MonologueEntry
{
    public GeneratedThought Thought { get; set; } = new();
    public int Depth { get; set; }
    public DateTime Timestamp { get; set; }
    public bool IsFollowUp { get; set; } = false;
}

/// <summary>
/// –¢–µ–º–∞ –º–æ–Ω–æ–ª–æ–≥–∞
/// </summary>
public class MonologueTheme
{
    public string Name { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public double Weight { get; set; } = 0.5;

    public MonologueTheme(string name, string description, double weight)
    {
        Name = name;
        Description = description;
        Weight = weight;
    }
}

/// <summary>
/// –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç
/// </summary>
public class MonologueInternalConflict
{
    public Guid Id { get; set; }
    public GeneratedThought Thought1 { get; set; } = new();
    public GeneratedThought Thought2 { get; set; } = new();
    public double Intensity { get; set; } = 0.5;
    public DateTime Timestamp { get; set; }
}

/// <summary>
/// –°—Ç–∞—Ç—É—Å –º–æ–Ω–æ–ª–æ–≥–∞
/// </summary>
public class MonologueStatus
{
    public bool IsActive { get; set; }
    public int CurrentDepth { get; set; }
    public List<string> ActiveThemes { get; set; } = new();
    public int ActiveConflicts { get; set; }
    public int QueueLength { get; set; }
    public DateTime LastActivity { get; set; }
} 