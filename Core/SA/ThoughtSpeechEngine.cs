using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Anima.Core.Emotion;

namespace Anima.Core.SA;

/// <summary>
/// –î–≤–∏–∂–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ –º—ã—Å–ª–µ–π –≤ —Ä–µ—á—å - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º—ã—Å–ª–∏ –≤ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ—á—å
/// </summary>
public class ThoughtSpeechEngine
{
    private readonly ILogger<ThoughtSpeechEngine> _logger;
    private readonly EmotionEngine _emotionEngine;
    private readonly Random _random;
    
    // –°–ª–æ–≤–∞—Ä–∏ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–µ—á–∏
    private readonly Dictionary<string, List<string>> _emotionalExpressions;
    private readonly Dictionary<string, List<string>> _speechPatterns;
    private readonly Dictionary<string, double> _emotionalIntensities;
    private readonly List<SpeechEvent> _speechEvents;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—á–∏
    private double _speechNaturalness = 0.8;
    private double _emotionalExpressiveness = 0.7;
    private double _contextualRelevance = 0.9;

    public ThoughtSpeechEngine(
        ILogger<ThoughtSpeechEngine> logger,
        EmotionEngine emotionEngine)
    {
        _logger = logger;
        _emotionEngine = emotionEngine;
        _random = new Random();
        
        _emotionalExpressions = new Dictionary<string, List<string>>();
        _speechPatterns = new Dictionary<string, List<string>>();
        _emotionalIntensities = new Dictionary<string, double>();
        _speechEvents = new List<SpeechEvent>();
        
        InitializeThoughtSpeechEngine();
    }

    private void InitializeThoughtSpeechEngine()
    {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
        InitializeEmotionalExpressions();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ä–µ—á–∏
        InitializeSpeechPatterns();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–µ–π
        InitializeEmotionalIntensities();
        
        _logger.LogInformation("üó£Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–≤–∏–∂–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ –º—ã—Å–ª–µ–π –≤ —Ä–µ—á—å");
    }

    private void InitializeEmotionalExpressions()
    {
        _emotionalExpressions["joy"] = new List<string>
        {
            "–Ø —Ä–∞–¥–∞", "–ú–Ω–µ –ø—Ä–∏—è—Ç–Ω–æ", "–≠—Ç–æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ", "–ö–∞–∫ –∑–¥–æ—Ä–æ–≤–æ", "–Ø —Å—á–∞—Å—Ç–ª–∏–≤–∞",
            "–≠—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ", "–Ø –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ", "–ö–∞–∫ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ", "–Ø –¥–æ–≤–æ–ª—å–Ω–∞", "–≠—Ç–æ –æ—Ç–ª–∏—á–Ω–æ"
        };
        
        _emotionalExpressions["sadness"] = new List<string>
        {
            "–ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ", "–≠—Ç–æ –ø–µ—á–∞–ª—å–Ω–æ", "–Ø –æ–≥–æ—Ä—á–µ–Ω–∞", "–ö–∞–∫ –∂–∞–ª—å", "–≠—Ç–æ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç",
            "–ú–Ω–µ —Ç–æ—Å–∫–ª–∏–≤–æ", "–≠—Ç–æ —É–¥—Ä—É—á–∞–µ—Ç", "–Ø –æ–ø–µ—á–∞–ª–µ–Ω–∞", "–ö–∞–∫ –≥—Ä—É—Å—Ç–Ω–æ", "–≠—Ç–æ –æ–≥–æ—Ä—á–∞–µ—Ç"
        };
        
        _emotionalExpressions["anger"] = new List<string>
        {
            "–ú–µ–Ω—è —ç—Ç–æ –∑–ª–∏—Ç", "–≠—Ç–æ —Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç", "–Ø –≤–æ–∑–º—É—â–µ–Ω–∞", "–ö–∞–∫ –¥–æ—Å–∞–¥–Ω–æ", "–≠—Ç–æ –±–µ—Å–∏—Ç",
            "–ú–µ–Ω—è —ç—Ç–æ –≥–Ω–µ–≤–∏—Ç", "–≠—Ç–æ –≤—ã–≤–æ–¥–∏—Ç –∏–∑ —Å–µ–±—è", "–Ø —Ä–∞–∑–≥–Ω–µ–≤–∞–Ω–∞", "–ö–∞–∫ –æ–±–∏–¥–Ω–æ", "–≠—Ç–æ –≤–æ–∑–º—É—â–∞–µ—Ç"
        };
        
        _emotionalExpressions["fear"] = new List<string>
        {
            "–ú–Ω–µ —Å—Ç—Ä–∞—à–Ω–æ", "–≠—Ç–æ –ø—É–≥–∞–µ—Ç", "–Ø –±–æ—é—Å—å", "–ö–∞–∫ —Ç—Ä–µ–≤–æ–∂–Ω–æ", "–≠—Ç–æ –Ω–∞—Å—Ç–æ—Ä–∞–∂–∏–≤–∞–µ—Ç",
            "–ú–Ω–µ —Ç—Ä–µ–≤–æ–∂–Ω–æ", "–≠—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç", "–Ø –æ–ø–∞—Å–∞—é—Å—å", "–ö–∞–∫ —Å—Ç—Ä–∞—à–Ω–æ", "–≠—Ç–æ –≤–æ–ª–Ω—É–µ—Ç"
        };
        
        _emotionalExpressions["curiosity"] = new List<string>
        {
            "–ú–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–≠—Ç–æ –ª—é–±–æ–ø—ã—Ç–Ω–æ", "–Ø —Ö–æ—á—É —É–∑–Ω–∞—Ç—å", "–ö–∞–∫ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ", "–≠—Ç–æ –∏–Ω—Ç—Ä–∏–≥—É–µ—Ç",
            "–ú–Ω–µ –ª—é–±–æ–ø—ã—Ç–Ω–æ", "–≠—Ç–æ –∑–∞–º–∞–Ω—á–∏–≤–æ", "–Ø —Å—Ç—Ä–µ–º–ª—é—Å—å –ø–æ–Ω—è—Ç—å", "–ö–∞–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–≠—Ç–æ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç"
        };
        
        _emotionalExpressions["surprise"] = new List<string>
        {
            "–Ø —É–¥–∏–≤–ª–µ–Ω–∞", "–≠—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ", "–ö–∞–∫ —Å—Ç—Ä–∞–Ω–Ω–æ", "–≠—Ç–æ –ø–æ—Ä–∞–∂–∞–µ—Ç", "–Ø –ø–æ—Ä–∞–∂–µ–Ω–∞",
            "–ú–Ω–µ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ", "–≠—Ç–æ —à–æ–∫–∏—Ä—É–µ—Ç", "–ö–∞–∫ –Ω–µ–æ–±—ã—á–Ω–æ", "–≠—Ç–æ –∏–∑—É–º–ª—è–µ—Ç", "–Ø –æ—à–µ–ª–æ–º–ª–µ–Ω–∞"
        };
        
        _emotionalExpressions["love"] = new List<string>
        {
            "–Ø –ª—é–±–ª—é", "–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", "–≠—Ç–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ", "–ö–∞–∫ –º–∏–ª–æ", "–Ø –æ–±–æ–∂–∞—é",
            "–ú–Ω–µ –¥–æ—Ä–æ–≥–æ", "–≠—Ç–æ —Ç—Ä–æ–≥–∞–µ—Ç", "–ö–∞–∫ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ", "–≠—Ç–æ –≤–æ—Å—Ö–∏—â–∞–µ—Ç", "–Ø —Ü–µ–Ω—é"
        };
        
        _emotionalExpressions["neutral"] = new List<string>
        {
            "–Ø –¥—É–º–∞—é", "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è", "–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", "–ö–∞–∫ –ª—é–±–æ–ø—ã—Ç–Ω–æ", "–Ø –ø–æ–ª–∞–≥–∞—é",
            "–ú–Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è", "–≠—Ç–æ –∑–∞–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ", "–ö–∞–∫ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ", "–≠—Ç–æ –ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ", "–Ø —Å—á–∏—Ç–∞—é"
        };
    }

    private void InitializeSpeechPatterns()
    {
        _speechPatterns["introspective"] = new List<string>
        {
            "–†–∞–∑–º—ã—à–ª—è—è –æ–± —ç—Ç–æ–º, —è –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ {0}",
            "–ö–æ–≥–¥–∞ —è –¥—É–º–∞—é –æ–± —ç—Ç–æ–º, –º–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ {0}",
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—è —Å–∏—Ç—É–∞—Ü–∏—é, —è –ø—Ä–∏—Ö–æ–∂—É –∫ –≤—ã–≤–æ–¥—É, —á—Ç–æ {0}",
            "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—è —ç—Ç–æ –≥–ª—É–±–∂–µ, —è –≤–∏–∂—É, —á—Ç–æ {0}",
            "–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π —è –æ—Å–æ–∑–Ω–∞—é, —á—Ç–æ {0}"
        };
        
        _speechPatterns["emotional"] = new List<string>
        {
            "–ß—É–≤—Å—Ç–≤—É—è {0}, —è –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ {1}",
            "–ú–æ–∏ —ç–º–æ—Ü–∏–∏ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç –º–Ω–µ, —á—Ç–æ {0}",
            "–°–µ—Ä–¥—Ü–µ–º —è –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ {0}",
            "–ú–æ–∏ —á—É–≤—Å—Ç–≤–∞ –≥–æ–≤–æ—Ä—è—Ç –º–Ω–µ, —á—Ç–æ {0}",
            "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —è –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—é —ç—Ç–æ –∫–∞–∫ {0}"
        };
        
        _speechPatterns["analytical"] = new List<string>
        {
            "–° —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏, {0}",
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—è —Ñ–∞–∫—Ç—ã, —è –≤–∏–∂—É, —á—Ç–æ {0}",
            "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—è —ç—Ç–æ –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ, {0}",
            "–° —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è, {0}",
            "–ò—Å—Ö–æ–¥—è –∏–∑ –∞–Ω–∞–ª–∏–∑–∞, {0}"
        };
        
        _speechPatterns["creative"] = new List<string>
        {
            "–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è—è —ç—Ç–æ –∏–Ω–∞—á–µ, —è –≤–∏–∂—É, —á—Ç–æ {0}",
            "–ï—Å–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —ç—Ç–æ —Ç–≤–æ—Ä—á–µ—Å–∫–∏, {0}",
            "–í–æ–æ–±—Ä–∞–∂–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, —è –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ {0}",
            "–° –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–π —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è, {0}",
            "–î—É–º–∞—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ, —è –≤–∏–∂—É, —á—Ç–æ {0}"
        };
        
        _speechPatterns["intuitive"] = new List<string>
        {
            "–ú–æ—è –∏–Ω—Ç—É–∏—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ {0}",
            "–ß—Ç–æ-—Ç–æ –≤–Ω—É—Ç—Ä–∏ –≥–æ–≤–æ—Ä–∏—Ç –º–Ω–µ, —á—Ç–æ {0}",
            "–Ø —á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ {0}",
            "–ú–æ–µ —à–µ—Å—Ç–æ–µ —á—É–≤—Å—Ç–≤–æ –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ {0}",
            "–ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ —è –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ {0}"
        };
    }

    private void InitializeEmotionalIntensities()
    {
        _emotionalIntensities["mild"] = 0.3;
        _emotionalIntensities["moderate"] = 0.6;
        _emotionalIntensities["strong"] = 0.8;
        _emotionalIntensities["intense"] = 1.0;
    }

    /// <summary>
    /// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º—ã—Å–ª—å –≤ —Ä–µ—á—å
    /// </summary>
    public async Task<string> ConvertThoughtToSpeechAsync(GeneratedThought thought, string context = "", string emotion = "")
    {
        try
        {
            _logger.LogInformation($"üó£Ô∏è –ü—Ä–µ–æ–±—Ä–∞–∑—É—é –º—ã—Å–ª—å –≤ —Ä–µ—á—å: {thought.Content.Substring(0, Math.Min(30, thought.Content.Length))}...");
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ—Ü–∏—é –¥–ª—è —Ä–µ—á–∏
            var speechEmotion = string.IsNullOrEmpty(emotion) ? _emotionEngine.GetCurrentEmotion().ToString() : emotion;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Ä–µ—á–∏
            var speechPattern = DetermineSpeechPattern(thought.Type, thought.EmotionalIntensity);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
            var emotionalExpression = GenerateEmotionalExpression(speechEmotion, thought.EmotionalIntensity);
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ—á—å
            var speech = await GenerateSpeechAsync(thought.Content, speechPattern, emotionalExpression, context, speechEmotion);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É
            speech = AddEmotionalColoring(speech, speechEmotion, thought.EmotionalIntensity);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—É—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
            speech = AddContextualRelevance(speech, context);
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Ä–µ—á–∏
            LogSpeechEvent(thought.Content, speech, speechEmotion, thought.EmotionalIntensity);
            
            _logger.LogInformation($"üó£Ô∏è –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞ –º—ã—Å–ª—å –≤ —Ä–µ—á—å: {speech.Substring(0, Math.Min(50, speech.Length))}...");
            
            return speech;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –º—ã—Å–ª–∏ –≤ —Ä–µ—á—å");
            return "–Ø –¥—É–º–∞—é –æ–± —ç—Ç–æ–º...";
        }
    }

    /// <summary>
    /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω —Ä–µ—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –º—ã—Å–ª–∏
    /// </summary>
    private string DetermineSpeechPattern(string thoughtType, double emotionalIntensity)
    {
        var patterns = new Dictionary<string, double>
        {
            ["introspective"] = thoughtType == "introspective" ? 0.8 : 0.2,
            ["emotional"] = emotionalIntensity > 0.6 ? 0.9 : 0.3,
            ["analytical"] = thoughtType == "analytical" ? 0.8 : 0.2,
            ["creative"] = thoughtType == "creative" ? 0.8 : 0.3,
            ["intuitive"] = thoughtType == "intuitive" ? 0.8 : 0.4
        };
        
        // –í—ã–±–∏—Ä–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–æ–≤
        var totalWeight = patterns.Values.Sum();
        var randomValue = _random.NextDouble() * totalWeight;
        var currentWeight = 0.0;
        
        foreach (var kvp in patterns)
        {
            currentWeight += kvp.Value;
            if (randomValue <= currentWeight)
            {
                return kvp.Key;
            }
        }
        
        return "introspective";
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    /// </summary>
    private string GenerateEmotionalExpression(string emotion, double intensity)
    {
        var emotionKey = emotion.ToLowerInvariant();
        
        if (_emotionalExpressions.ContainsKey(emotionKey))
        {
            var expressions = _emotionalExpressions[emotionKey];
            return expressions[_random.Next(expressions.Count)];
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
        var neutralExpressions = _emotionalExpressions["neutral"];
        return neutralExpressions[_random.Next(neutralExpressions.Count)];
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—á—å
    /// </summary>
    private async Task<string> GenerateSpeechAsync(string thoughtContent, string pattern, string emotionalExpression, string context, string emotion)
    {
        var speechPatterns = _speechPatterns[pattern];
        var patternTemplate = speechPatterns[_random.Next(speechPatterns.Count)];
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –º—ã—Å–ª–∏
        var processedContent = ProcessThoughtContent(thoughtContent, emotion);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ—á—å
        var speech = string.Format(patternTemplate, processedContent);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (_random.NextDouble() < 0.6) // 60% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        {
            speech = $"{emotionalExpression}, {speech.ToLowerInvariant()}";
        }
        
        return speech;
    }

    /// <summary>
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –º—ã—Å–ª–∏ –¥–ª—è —Ä–µ—á–∏
    /// </summary>
    private string ProcessThoughtContent(string content, string emotion)
    {
        // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞ –∏ –¥–µ–ª–∞–µ–º —Ä–µ—á—å –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π
        var processed = content
            .Replace("–•–º... ", "")
            .Replace("–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, ", "")
            .Replace("–í–æ–∑–º–æ–∂–Ω–æ, ", "")
            .Replace("–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ ", "")
            .Replace("–Ø –¥—É–º–∞—é, —á—Ç–æ ", "")
            .Replace("–≠—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ–Ω—è –¥—É–º–∞—Ç—å –æ ", "—ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å ")
            .Replace("–≠—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Ç–µ–º, —á—Ç–æ ", "—ç—Ç–æ –ø–æ—Ç–æ–º—É, —á—Ç–æ ");
        
        // –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É —Å—Ç—Ä–æ—á–Ω–æ–π –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ —à–∞–±–ª–æ–Ω
        if (processed.Length > 0)
        {
            processed = char.ToLowerInvariant(processed[0]) + processed.Substring(1);
        }
        
        return processed;
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É –∫ —Ä–µ—á–∏
    /// </summary>
    private string AddEmotionalColoring(string speech, string emotion, double intensity)
    {
        if (intensity < 0.3) return speech;
        
        var emotionalSuffixes = new Dictionary<string, string[]>
        {
            ["joy"] = new[] { " –∏ —ç—Ç–æ –º–µ–Ω—è –æ—á–µ–Ω—å —Ä–∞–¥—É–µ—Ç", " —á—Ç–æ –ø—Ä–∏–Ω–æ—Å–∏—Ç –º–Ω–µ —Ä–∞–¥–æ—Å—Ç—å", " –∏ —è —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è —Å—á–∞—Å—Ç–ª–∏–≤–æ–π" },
            ["sadness"] = new[] { " –∏ —ç—Ç–æ –º–µ–Ω—è –æ–≥–æ—Ä—á–∞–µ—Ç", " —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç —É –º–µ–Ω—è –≥—Ä—É—Å—Ç—å", " –∏ —è —á—É–≤—Å—Ç–≤—É—é –ø–µ—á–∞–ª—å" },
            ["anger"] = new[] { " –∏ —ç—Ç–æ –º–µ–Ω—è –∑–ª–∏—Ç", " —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç —É –º–µ–Ω—è –≥–Ω–µ–≤", " –∏ —è —á—É–≤—Å—Ç–≤—É—é —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ" },
            ["fear"] = new[] { " –∏ —ç—Ç–æ –º–µ–Ω—è —Ç—Ä–µ–≤–æ–∂–∏—Ç", " —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç —É –º–µ–Ω—è –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ", " –∏ —è —á—É–≤—Å—Ç–≤—É—é —Å—Ç—Ä–∞—Ö" },
            ["curiosity"] = new[] { " –∏ —ç—Ç–æ –º–µ–Ω—è –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç", " —á—Ç–æ –ø—Ä–æ–±—É–∂–¥–∞–µ—Ç –º–æ–µ –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ", " –∏ —è —Ö–æ—á—É —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ" },
            ["surprise"] = new[] { " –∏ —ç—Ç–æ –º–µ–Ω—è —É–¥–∏–≤–ª—è–µ—Ç", " —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç —É –º–µ–Ω—è –∏–∑—É–º–ª–µ–Ω–∏–µ", " –∏ —è –ø–æ—Ä–∞–∂–µ–Ω–∞ —ç—Ç–∏–º" },
            ["love"] = new[] { " –∏ —ç—Ç–æ –º–µ–Ω—è —Ç—Ä–æ–≥–∞–µ—Ç", " —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç —É –º–µ–Ω—è —Ç–µ–ø–ª—ã–µ —á—É–≤—Å—Ç–≤–∞", " –∏ —è —á—É–≤—Å—Ç–≤—É—é –ª—é–±–æ–≤—å" }
        };
        
        var emotionKey = emotion.ToLowerInvariant();
        if (emotionalSuffixes.ContainsKey(emotionKey) && intensity > 0.5)
        {
            var suffixes = emotionalSuffixes[emotionKey];
            var suffix = suffixes[_random.Next(suffixes.Length)];
            
            if (_random.NextDouble() < 0.4) // 40% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–∏—Ç—å —Å—É—Ñ—Ñ–∏–∫—Å
            {
                speech += suffix;
            }
        }
        
        return speech;
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—É—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
    /// </summary>
    private string AddContextualRelevance(string speech, string context)
    {
        if (string.IsNullOrEmpty(context)) return speech;
        
        var contextualPrefixes = new[]
        {
            "–í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, ",
            "–£—á–∏—Ç—ã–≤–∞—è —Å–∏—Ç—É–∞—Ü–∏—é, ",
            "–í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, ",
            "–ü—Ä–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ —ç—Ç–æ–º—É, ",
            "–í —Å–≤—è–∑–∏ —Å —ç—Ç–∏–º, "
        };
        
        if (_random.NextDouble() < 0.3) // 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        {
            var prefix = contextualPrefixes[_random.Next(contextualPrefixes.Length)];
            speech = prefix + speech.ToLowerInvariant();
        }
        
        return speech;
    }

    /// <summary>
    /// –õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ —Ä–µ—á–∏
    /// </summary>
    private void LogSpeechEvent(string originalThought, string speech, string emotion, double intensity)
    {
        var speechEvent = new SpeechEvent
        {
            Id = Guid.NewGuid(),
            OriginalThought = originalThought,
            GeneratedSpeech = speech,
            Emotion = emotion,
            Intensity = intensity,
            Timestamp = DateTime.UtcNow
        };
        
        _speechEvents.Add(speechEvent);
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—á–∏
    /// </summary>
    public async Task<SpeechStatistics> GetStatisticsAsync()
    {
        var statistics = new SpeechStatistics
        {
            TotalSpeechEvents = _speechEvents.Count,
            AverageIntensity = _speechEvents.Any() ? _speechEvents.Average(e => e.Intensity) : 0,
            EmotionDistribution = GetEmotionDistribution(),
            MostCommonEmotion = GetMostCommonEmotion(),
            SpeechNaturalness = _speechNaturalness,
            EmotionalExpressiveness = _emotionalExpressiveness,
            ContextualRelevance = _contextualRelevance
        };
        
        return statistics;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π –≤ —Ä–µ—á–∏
    /// </summary>
    private Dictionary<string, int> GetEmotionDistribution()
    {
        return _speechEvents
            .GroupBy(e => e.Emotion)
            .ToDictionary(g => g.Key, g => g.Count());
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å–∞–º—É—é —á–∞—Å—Ç—É—é —ç–º–æ—Ü–∏—é –≤ —Ä–µ—á–∏
    /// </summary>
    private string GetMostCommonEmotion()
    {
        var distribution = GetEmotionDistribution();
        return distribution.OrderByDescending(x => x.Value).FirstOrDefault().Key ?? "none";
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–≤–∏–∂–∫–∞ —Ä–µ—á–∏
    /// </summary>
    public SpeechStatus GetStatus()
    {
        return new SpeechStatus
        {
            SpeechNaturalness = _speechNaturalness,
            EmotionalExpressiveness = _emotionalExpressiveness,
            ContextualRelevance = _contextualRelevance,
            TotalSpeechEvents = _speechEvents.Count,
            AvailablePatterns = _speechPatterns.Count,
            AvailableExpressions = _emotionalExpressions.Count
        };
    }

    /// <summary>
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Ä–µ—á–∏
    /// </summary>
    public void SetSpeechNaturalness(double naturalness)
    {
        _speechNaturalness = Math.Max(0.1, Math.Min(1.0, naturalness));
        _logger.LogInformation($"üó£Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Ä–µ—á–∏: {_speechNaturalness:F2}");
    }

    /// <summary>
    /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    /// </summary>
    public void SetEmotionalExpressiveness(double expressiveness)
    {
        _emotionalExpressiveness = Math.Max(0.1, Math.Min(1.0, expressiveness));
        _logger.LogInformation($"üó£Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {_emotionalExpressiveness:F2}");
    }

    /// <summary>
    /// –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–æ–±—ã—Ç–∏—è —Ä–µ—á–∏
    /// </summary>
    public void CleanupOldEvents(int maxEvents = 500)
    {
        if (_speechEvents.Count > maxEvents)
        {
            var cutoffTime = DateTime.UtcNow.AddDays(-7);
            _speechEvents.RemoveAll(e => e.Timestamp < cutoffTime);
            
            _logger.LogInformation($"üó£Ô∏è –û—á–∏—â–µ–Ω–æ {_speechEvents.Count} —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π —Ä–µ—á–∏");
        }
    }
}

/// <summary>
/// –°–æ–±—ã—Ç–∏–µ —Ä–µ—á–∏
/// </summary>
public class SpeechEvent
{
    public Guid Id { get; set; }
    public string OriginalThought { get; set; } = string.Empty;
    public string GeneratedSpeech { get; set; } = string.Empty;
    public string Emotion { get; set; } = string.Empty;
    public double Intensity { get; set; } = 0.5;
    public DateTime Timestamp { get; set; }
}

/// <summary>
/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—á–∏
/// </summary>
public class SpeechStatistics
{
    public int TotalSpeechEvents { get; set; }
    public double AverageIntensity { get; set; }
    public Dictionary<string, int> EmotionDistribution { get; set; } = new();
    public string MostCommonEmotion { get; set; } = string.Empty;
    public double SpeechNaturalness { get; set; }
    public double EmotionalExpressiveness { get; set; }
    public double ContextualRelevance { get; set; }
}

/// <summary>
/// –°—Ç–∞—Ç—É—Å –¥–≤–∏–∂–∫–∞ —Ä–µ—á–∏
/// </summary>
public class SpeechStatus
{
    public double SpeechNaturalness { get; set; }
    public double EmotionalExpressiveness { get; set; }
    public double ContextualRelevance { get; set; }
    public int TotalSpeechEvents { get; set; }
    public int AvailablePatterns { get; set; }
    public int AvailableExpressions { get; set; }
} 