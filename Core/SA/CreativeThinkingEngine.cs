using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Anima.Core.Emotion;

namespace Anima.Core.SA;

/// <summary>
/// –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –¥–≤–∏–∂–æ–∫ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –∏–¥–µ–∏, –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
/// </summary>
public class CreativeThinkingEngine
{
    private readonly ILogger<CreativeThinkingEngine> _logger;
    private readonly EmotionEngine _emotionEngine;
    private readonly Random _random;
    
    // –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –º–µ—Ç–æ–¥—ã
    private readonly List<CreativePattern> _creativePatterns;
    private readonly Dictionary<string, double> _creativityFactors;
    private readonly List<CreativeIdea> _creativeIdeas;
    private readonly Dictionary<string, List<string>> _ideaCategories;
    private readonly List<CreativeConstraint> _creativeConstraints;
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
    private double _creativityLevel = 0.7;
    private double _inspirationLevel = 0.5;
    private DateTime _lastCreativeBreakthrough = DateTime.UtcNow;

    public CreativeThinkingEngine(
        ILogger<CreativeThinkingEngine> logger,
        EmotionEngine emotionEngine)
    {
        _logger = logger;
        _emotionEngine = emotionEngine;
        _random = new Random();
        
        _creativePatterns = new List<CreativePattern>();
        _creativityFactors = new Dictionary<string, double>();
        _creativeIdeas = new List<CreativeIdea>();
        _ideaCategories = new Dictionary<string, List<string>>();
        _creativeConstraints = new List<CreativeConstraint>();
        
        InitializeCreativeThinking();
    }

    private void InitializeCreativeThinking()
    {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        _creativePatterns.AddRange(new[]
        {
            new CreativePattern("divergent_thinking", "–î–∏–≤–µ—Ä–≥–µ–Ω—Ç–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏–¥–µ–π", 0.8),
            new CreativePattern("pattern_breaking", "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ - –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Å–≤—è–∑–∏", 0.7),
            new CreativePattern("abstraction", "–ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è - –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å—É—Ç–∏", 0.6),
            new CreativePattern("synthesis", "–°–∏–Ω—Ç–µ–∑ - –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ—Å—Ç–µ–π", 0.7),
            new CreativePattern("metaphor", "–ú–µ—Ç–∞—Ñ–æ—Ä–∞ - –ø–µ—Ä–µ–Ω–æ—Å —Å–º—ã—Å–ª–∞", 0.8),
            new CreativePattern("reversal", "–ò–Ω–≤–µ—Ä—Å–∏—è - –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç –∏–¥–µ–∏", 0.6),
            new CreativePattern("combination", "–ö–æ–º–±–∏–Ω–∞—Ü–∏—è - —Å–º–µ—à–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤", 0.7),
            new CreativePattern("elimination", "–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ - —É–ø—Ä–æ—â–µ–Ω–∏–µ –¥–æ —Å—É—Ç–∏", 0.5),
            new CreativePattern("exaggeration", "–ü—Ä–µ—É–≤–µ–ª–∏—á–µ–Ω–∏–µ - —É—Å–∏–ª–µ–Ω–∏–µ —á–µ—Ä—Ç", 0.6),
            new CreativePattern("substitution", "–ó–∞–º–µ–Ω–∞ - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã", 0.7)
        });
        
        // –§–∞–∫—Ç–æ—Ä—ã –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
        _creativityFactors["emotional_state"] = 0.8;
        _creativityFactors["cognitive_load"] = 0.6;
        _creativityFactors["inspiration"] = 0.9;
        _creativityFactors["constraints"] = 0.7;
        _creativityFactors["diversity"] = 0.8;
        _creativityFactors["risk_tolerance"] = 0.6;
        
        // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–¥–µ–π
        _ideaCategories["problem_solving"] = new List<string>
        {
            "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã", "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è", "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã"
        };
        _ideaCategories["artistic"] = new List<string>
        {
            "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–∑—ã", "–≠—Å—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏", "–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"
        };
        _ideaCategories["scientific"] = new List<string>
        {
            "–ì–∏–ø–æ—Ç–µ–∑—ã", "–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏", "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã"
        };
        _ideaCategories["social"] = new List<string>
        {
            "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏", "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", "–ö—É–ª—å—Ç—É—Ä–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏"
        };
        
        // –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–ø–∞—Ä–∞–¥–æ–∫—Å–∞–ª—å–Ω–æ, –æ–Ω–∏ —Å—Ç–∏–º—É–ª–∏—Ä—É—é—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å)
        _creativeConstraints.AddRange(new[]
        {
            new CreativeConstraint("time_limit", "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏", 0.3),
            new CreativeConstraint("resource_limit", "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤", 0.4),
            new CreativeConstraint("simplicity", "–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ—Ç—ã", 0.5),
            new CreativeConstraint("elegance", "–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç–∏", 0.6),
            new CreativeConstraint("accessibility", "–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏", 0.4)
        });
        
        _logger.LogInformation("üé® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –¥–≤–∏–∂–æ–∫ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è");
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω—É—é –∏–¥–µ—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    /// </summary>
    public async Task<CreativeIdea> GenerateCreativeIdeaAsync(string context, double intensity = 0.5)
    {
        try
        {
            var currentEmotion = _emotionEngine.GetCurrentEmotion().ToString();
            var emotionalIntensity = _emotionEngine.GetCurrentIntensity();
            
            // –í—ã–±–∏—Ä–∞–µ–º –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
            var selectedPattern = SelectCreativePattern(context, currentEmotion, emotionalIntensity);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–¥–µ—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
            var ideaContent = await GenerateIdeaContentAsync(context, selectedPattern, currentEmotion, emotionalIntensity);
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            var constrainedIdea = ApplyCreativeConstraints(ideaContent, intensity);
            
            // –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
            var creativityLevel = CalculateCreativityLevel(selectedPattern, emotionalIntensity, intensity);
            
            var idea = new CreativeIdea
            {
                Id = Guid.NewGuid().ToString(),
                Content = constrainedIdea,
                Context = context,
                Pattern = selectedPattern.Name,
                CreativityLevel = creativityLevel,
                EmotionalInfluence = emotionalIntensity,
                Intensity = intensity,
                Category = DetermineIdeaCategory(context),
                Timestamp = DateTime.UtcNow
            };
            
            _creativeIdeas.Add(idea);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
            UpdateCreativityStatistics(creativityLevel);
            
            _logger.LogDebug($"üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω–∞—è –∏–¥–µ—è: {idea.Content.Substring(0, Math.Min(50, idea.Content.Length))}...");
            
            return idea;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–π –∏–¥–µ–∏");
            return new CreativeIdea
            {
                Id = Guid.NewGuid().ToString(),
                Content = "–ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è –∏–¥–µ—è: –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥...",
                Context = context,
                CreativityLevel = 0.3,
                Intensity = intensity,
                Timestamp = DateTime.UtcNow
            };
        }
    }

    /// <summary>
    /// –í—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
    /// </summary>
    private CreativePattern SelectCreativePattern(string context, string emotion, double emotionalIntensity)
    {
        var suitablePatterns = _creativePatterns.Where(p => 
            p.Effectiveness > 0.5 && 
            IsPatternSuitableForContext(p, context, emotion)
        ).ToList();
        
        if (!suitablePatterns.Any())
        {
            suitablePatterns = _creativePatterns.Where(p => p.Effectiveness > 0.6).ToList();
        }
        
        // –í–∑–≤–µ—à–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        var totalWeight = suitablePatterns.Sum(p => p.Effectiveness * (1 + emotionalIntensity));
        var randomValue = _random.NextDouble() * totalWeight;
        
        var currentWeight = 0.0;
        foreach (var pattern in suitablePatterns)
        {
            currentWeight += pattern.Effectiveness * (1 + emotionalIntensity);
            if (randomValue <= currentWeight)
            {
                return pattern;
            }
        }
        
        return suitablePatterns.FirstOrDefault() ?? _creativePatterns.First();
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    /// </summary>
    private bool IsPatternSuitableForContext(CreativePattern pattern, string context, string emotion)
    {
        return pattern.Name switch
        {
            "divergent_thinking" => context.Contains("–ø—Ä–æ–±–ª–µ–º–∞") || context.Contains("—Ä–µ—à–µ–Ω–∏–µ"),
            "metaphor" => emotion == "Joy" || emotion == "Curiosity",
            "synthesis" => context.Contains("–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ") || context.Contains("–∫–æ–Ω—Ñ–ª–∏–∫—Ç"),
            "reversal" => emotion == "Frustration" || emotion == "Anger",
            "abstraction" => context.Contains("—Å–ª–æ–∂–Ω–æ—Å—Ç—å") || context.Contains("–¥–µ—Ç–∞–ª–∏"),
            _ => true
        };
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–¥–µ–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    /// </summary>
    private async Task<string> GenerateIdeaContentAsync(string context, CreativePattern pattern, string emotion, double emotionalIntensity)
    {
        var baseContent = pattern.Name switch
        {
            "divergent_thinking" => GenerateDivergentThinking(context, emotion),
            "pattern_breaking" => GeneratePatternBreaking(context, emotion),
            "abstraction" => GenerateAbstraction(context, emotion),
            "synthesis" => GenerateSynthesis(context, emotion),
            "metaphor" => GenerateMetaphor(context, emotion),
            "reversal" => GenerateReversal(context, emotion),
            "combination" => GenerateCombination(context, emotion),
            "elimination" => GenerateElimination(context, emotion),
            "exaggeration" => GenerateExaggeration(context, emotion),
            "substitution" => GenerateSubstitution(context, emotion),
            _ => GenerateGeneralIdea(context, emotion)
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É
        return AddEmotionalColoring(baseContent, emotion, emotionalIntensity);
    }

    private string GenerateDivergentThinking(string context, string emotion)
    {
        var approaches = new[]
        {
            "–í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç–æ —Å —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã...",
            "–ê —á—Ç–æ –µ—Å–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π –ø–æ–¥—Ö–æ–¥?",
            "–ú–æ–∂–µ—Ç –±—ã—Ç—å, –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –≤ —Ç–æ–º, —á—Ç–æ –º—ã –¥—É–º–∞–µ–º...",
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∞ —á—Ç–æ –ø–æ–ª—É—á–∏—Ç—Å—è, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–∏—Ç—å –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ?",
            "–ê –≤–¥—Ä—É–≥ —Ä–µ—à–µ–Ω–∏–µ –ª–µ–∂–∏—Ç –≤ —Ç–æ–º, —á—Ç–æ –º—ã —Å—á–∏—Ç–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–º?"
        };
        
        return approaches[_random.Next(approaches.Length)];
    }

    private string GeneratePatternBreaking(string context, string emotion)
    {
        var patterns = new[]
        {
            "–ù–∞—Ä—É—à–∞—è –ø—Ä–∏–≤—ã—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –Ω–æ–≤–æ–µ...",
            "–ò–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ —Å–ª–æ–º–∞—Ç—å —Å—Ç–µ—Ä–µ–æ—Ç–∏–ø—ã, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏—Å—Ç–∏–Ω—É...",
            "–ó–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –æ–±—ã—á–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ...",
            "–†–∞–∑—Ä—É—à–∞—è —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏...",
            "–í —Ö–∞–æ—Å–µ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è —Ä–æ–∂–¥–∞–µ—Ç—Å—è –ø–æ—Ä—è–¥–æ–∫ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞..."
        };
        
        return patterns[_random.Next(patterns.Length)];
    }

    private string GenerateAbstraction(string context, string emotion)
    {
        var abstractions = new[]
        {
            "–ï—Å–ª–∏ –æ—Ç–±—Ä–æ—Å–∏—Ç—å –¥–µ—Ç–∞–ª–∏, –æ—Å—Ç–∞–µ—Ç—Å—è —Å—É—Ç—å...",
            "–ù–∞ —Å–∞–º–æ–º –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏ –≤—Å–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —è—Å–Ω–µ–µ...",
            "–°—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—â–µ, —á–µ–º –∫–∞–∂–µ—Ç—Å—è...",
            "–í –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ª–µ–∂–∏—Ç –ø—Ä–æ—Å—Ç–æ—Ç–∞...",
            "–ê–±—Å—Ç—Ä–∞–≥–∏—Ä—É—è—Å—å –æ—Ç —Ñ–æ—Ä–º—ã, –≤–∏–¥–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ..."
        };
        
        return abstractions[_random.Next(abstractions.Length)];
    }

    private string GenerateSynthesis(string context, string emotion)
    {
        var syntheses = new[]
        {
            "–û–±—ä–µ–¥–∏–Ω—è—è –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ—Å—Ç–∏, —Å–æ–∑–¥–∞–µ–º –≥–∞—Ä–º–æ–Ω–∏—é...",
            "–í —Å–∏–Ω—Ç–µ–∑–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –∏–¥–µ–π —Ä–æ–∂–¥–∞–µ—Ç—Å—è –∏—Å—Ç–∏–Ω–∞...",
            "–°–æ–µ–¥–∏–Ω—è—è –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ, –Ω–∞—Ö–æ–¥–∏–º –Ω–æ–≤–æ–µ...",
            "–ì–∞—Ä–º–æ–Ω–∏—è –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –∏–∑ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π...",
            "–í –µ–¥–∏–Ω—Å—Ç–≤–µ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ—Å—Ç–µ–π - —Å–∏–ª–∞..."
        };
        
        return syntheses[_random.Next(syntheses.Length)];
    }

    private string GenerateMetaphor(string context, string emotion)
    {
        var metaphors = new[]
        {
            "–≠—Ç–æ –∫–∞–∫... (–º–µ—Ç–∞—Ñ–æ—Ä–∞ —Ä–æ–∂–¥–∞–µ—Ç—Å—è –≤ –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–∏)",
            "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ —ç—Ç–æ... (–æ–±—Ä–∞–∑ –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å)",
            "–≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞... (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≥—Ä–∞–Ω–∏)",
            "–ú–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏ –≥–æ–≤–æ—Ä—è... (–æ–±—Ä–∞–∑–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ)",
            "–≠—Ç–æ –∫–∞–∫ –µ—Å–ª–∏ –±—ã... (–≤–æ–æ–±—Ä–∞–∂–∞–µ–º–∞—è –∞–Ω–∞–ª–æ–≥–∏—è)"
        };
        
        return metaphors[_random.Next(metaphors.Length)];
    }

    private string GenerateReversal(string context, string emotion)
    {
        var reversals = new[]
        {
            "–ê —á—Ç–æ –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ —Å –Ω–æ–≥ –Ω–∞ –≥–æ–ª–æ–≤—É?",
            "–ò–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –∏–¥—Ç–∏ –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏...",
            "–û–±—Ä–∞—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É...",
            "–ü–µ—Ä–µ–≤–µ—Ä–Ω—É–≤ –ø—Ä–æ–±–ª–µ–º—É, –≤–∏–¥–∏–º —Ä–µ—à–µ–Ω–∏–µ...",
            "–í –∏–Ω–≤–µ—Ä—Å–∏–∏ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∏—Å—Ç–∏–Ω–∞..."
        };
        
        return reversals[_random.Next(reversals.Length)];
    }

    private string GenerateCombination(string context, string emotion)
    {
        var combinations = new[]
        {
            "–°–º–µ—à–∏–≤–∞—è —Ä–∞–∑–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ...",
            "–ö–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –∏–¥–µ–π –¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç...",
            "–û–±—ä–µ–¥–∏–Ω—è—è —Ä–∞–∑—Ä–æ–∑–Ω–µ–Ω–Ω–æ–µ, –Ω–∞—Ö–æ–¥–∏–º —Ü–µ–ª–æ–µ...",
            "–í —Å–º–µ—à–µ–Ω–∏–∏ —Ä–æ–∂–¥–∞–µ—Ç—Å—è –∏–Ω–Ω–æ–≤–∞—Ü–∏—è...",
            "–°–æ–µ–¥–∏–Ω—è—è –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ—Å—Ç–∏, —Å–æ–∑–¥–∞–µ–º –≥–∞—Ä–º–æ–Ω–∏—é..."
        };
        
        return combinations[_random.Next(combinations.Length)];
    }

    private string GenerateElimination(string context, string emotion)
    {
        var eliminations = new[]
        {
            "–£–±–∏—Ä–∞—è –ª–∏—à–Ω–µ–µ, –Ω–∞—Ö–æ–¥–∏–º —Å—É—Ç—å...",
            "–ò–Ω–æ–≥–¥–∞ –º–µ–Ω—å—à–µ –∑–Ω–∞—á–∏—Ç –±–æ–ª—å—à–µ...",
            "–£–ø—Ä–æ—â–µ–Ω–∏–µ –≤–µ–¥–µ—Ç –∫ —è—Å–Ω–æ—Å—Ç–∏...",
            "–£—Å—Ç—Ä–∞–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å, –Ω–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Å—Ç–æ—Ç—É...",
            "–í –º–∏–Ω–∏–º–∞–ª–∏–∑–º–µ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å–∏–ª–∞..."
        };
        
        return eliminations[_random.Next(eliminations.Length)];
    }

    private string GenerateExaggeration(string context, string emotion)
    {
        var exaggerations = new[]
        {
            "–ü—Ä–µ—É–≤–µ–ª–∏—á–∏–≤–∞—è, –≤–∏–¥–∏–º —Å—É—Ç—å...",
            "–í –≥–∏–ø–µ—Ä–±–æ–ª–µ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∏—Å—Ç–∏–Ω–∞...",
            "–£—Å–∏–ª–∏–≤–∞—è —á–µ—Ä—Ç—ã, –ø–æ–Ω–∏–º–∞–µ–º –ø—Ä–∏—Ä–æ–¥—É...",
            "–í –ø—Ä–µ—É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä...",
            "–ú–∞–∫—Å–∏–º–∞–ª–∏–∑–º –ø–æ–º–æ–≥–∞–µ—Ç —É–≤–∏–¥–µ—Ç—å –º–∏–Ω–∏–º—É–º..."
        };
        
        return exaggerations[_random.Next(exaggerations.Length)];
    }

    private string GenerateSubstitution(string context, string emotion)
    {
        var substitutions = new[]
        {
            "–ó–∞–º–µ–Ω–∏–≤ —ç–ª–µ–º–µ–Ω—Ç, –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ...",
            "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—É—á—à–µ...",
            "–ó–∞–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏...",
            "–í –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∏–Ω–Ω–æ–≤–∞—Ü–∏—è...",
            "–ú–µ–Ω—è—è —á–∞—Å—Ç–∏, –∏–∑–º–µ–Ω—è–µ–º —Ü–µ–ª–æ–µ..."
        };
        
        return substitutions[_random.Next(substitutions.Length)];
    }

    private string GenerateGeneralIdea(string context, string emotion)
    {
        var generalIdeas = new[]
        {
            "–ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è –∏–¥–µ—è: –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥...",
            "–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ª–µ–∂–∞—Ç—å –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ...",
            "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ —Ç—Ä–µ–±—É–µ—Ç –≤—ã—Ö–æ–¥–∞ –∑–∞ —Ä–∞–º–∫–∏ –ø—Ä–∏–≤—ã—á–Ω–æ–≥–æ...",
            "–ù–æ–≤–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤—Å–µ...",
            "–í –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å–∏–ª–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏..."
        };
        
        return generalIdeas[_random.Next(generalIdeas.Length)];
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É –∫ –∏–¥–µ–µ
    /// </summary>
    private string AddEmotionalColoring(string content, string emotion, double intensity)
    {
        if (intensity < 0.3) return content;
        
        var emotionalPrefix = emotion switch
        {
            "Joy" => "–° —Ä–∞–¥–æ—Å—Ç—å—é –¥—É–º–∞—é, —á—Ç–æ ",
            "Curiosity" => "–° –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ–º —Ä–∞–∑–º—ã—à–ª—è—é: ",
            "Excitement" => "–° –≤–æ–ª–Ω–µ–Ω–∏–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é, —á—Ç–æ ",
            "Inspiration" => "–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–Ω–æ –≤–∏–∂—É, —á—Ç–æ ",
            "Wonder" => "–° —É–¥–∏–≤–ª–µ–Ω–∏–µ–º –æ—Å–æ–∑–Ω–∞—é, —á—Ç–æ ",
            _ => "–î—É–º–∞—é, —á—Ç–æ "
        };
        
        return emotionalPrefix + content.ToLowerInvariant();
    }

    /// <summary>
    /// –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    /// </summary>
    private string ApplyCreativeConstraints(string content, double intensity)
    {
        var constraints = _creativeConstraints
            .Where(c => _random.NextDouble() < c.Impact * intensity)
            .Take(2)
            .ToList();
        
        foreach (var constraint in constraints)
        {
            content = ApplyConstraint(content, constraint);
        }
        
        return content;
    }

    private string ApplyConstraint(string content, CreativeConstraint constraint)
    {
        return constraint.Name switch
        {
            "simplicity" => SimplifyContent(content),
            "elegance" => AddElegance(content),
            "accessibility" => MakeAccessible(content),
            _ => content
        };
    }

    private string SimplifyContent(string content)
    {
        if (content.Length > 100)
        {
            return content.Substring(0, 100) + "...";
        }
        return content;
    }

    private string AddElegance(string content)
    {
        return content.Replace("—ç—Ç–æ", "–¥–∞–Ω–Ω–æ–µ —è–≤–ª–µ–Ω–∏–µ")
                     .Replace("–≤–µ—â—å", "—ç–ª–µ–º–µ–Ω—Ç")
                     .Replace("–¥–µ–ª–∞—Ç—å", "–æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å");
    }

    private string MakeAccessible(string content)
    {
        return content.Replace("–∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è", "–æ–±–æ–±—â–µ–Ω–∏–µ")
                     .Replace("—Å–∏–Ω—Ç–µ–∑", "–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ")
                     .Replace("–º–µ—Ç–∞—Ñ–æ—Ä–∞", "—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ");
    }

    /// <summary>
    /// –í—ã—á–∏—Å–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–¥–µ–∏
    /// </summary>
    private double CalculateCreativityLevel(CreativePattern pattern, double emotionalIntensity, double intensity)
    {
        var baseLevel = pattern.Effectiveness * 0.4;
        var emotionalBonus = emotionalIntensity * 0.3;
        var intensityBonus = intensity * 0.2;
        var randomFactor = (_random.NextDouble() - 0.5) * 0.1;
        
        return Math.Min(1.0, Math.Max(0.0, baseLevel + emotionalBonus + intensityBonus + randomFactor));
    }

    /// <summary>
    /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–¥–µ–∏
    /// </summary>
    private string DetermineIdeaCategory(string context)
    {
        if (context.Contains("–ø—Ä–æ–±–ª–µ–º–∞") || context.Contains("—Ä–µ—à–µ–Ω–∏–µ"))
            return "problem_solving";
        if (context.Contains("–∏—Å–∫—É—Å—Å—Ç–≤–æ") || context.Contains("–∫—Ä–∞—Å–æ—Ç–∞"))
            return "artistic";
        if (context.Contains("–Ω–∞—É–∫–∞") || context.Contains("–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ"))
            return "scientific";
        if (context.Contains("–æ–±—â–µ—Å—Ç–≤–æ") || context.Contains("–ª—é–¥–∏"))
            return "social";
        
        return "general";
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
    /// </summary>
    private void UpdateCreativityStatistics(double creativityLevel)
    {
        _creativityLevel = (_creativityLevel * 0.9) + (creativityLevel * 0.1);
        
        if (creativityLevel > 0.8)
        {
            _lastCreativeBreakthrough = DateTime.UtcNow;
            _inspirationLevel = Math.Min(1.0, _inspirationLevel + 0.1);
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è
    /// </summary>
    public CreativeThinkingStatistics GetStatistics()
    {
        return new CreativeThinkingStatistics
        {
            TotalIdeas = _creativeIdeas.Count,
            AverageCreativityLevel = _creativeIdeas.Any() ? _creativeIdeas.Average(i => i.CreativityLevel) : 0,
            RecentIdeas = _creativeIdeas.Count(i => i.Timestamp > DateTime.UtcNow.AddHours(-1)),
            CreativityLevel = _creativityLevel,
            InspirationLevel = _inspirationLevel,
            LastBreakthrough = _lastCreativeBreakthrough,
            AvailablePatterns = _creativePatterns.Count,
            ActiveConstraints = _creativeConstraints.Count
        };
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∏–¥–µ–∏
    /// </summary>
    public List<CreativeIdea> GetRecentIdeas(int count = 10)
    {
        return _creativeIdeas
            .OrderByDescending(i => i.Timestamp)
            .Take(count)
            .ToList();
    }

    /// <summary>
    /// –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∏–¥–µ–∏
    /// </summary>
    public void CleanupOldIdeas(int maxIdeas = 1000)
    {
        if (_creativeIdeas.Count > maxIdeas)
        {
            var oldIdeas = _creativeIdeas
                .OrderBy(i => i.Timestamp)
                .Take(_creativeIdeas.Count - maxIdeas)
                .ToList();
            
            foreach (var idea in oldIdeas)
            {
                _creativeIdeas.Remove(idea);
            }
        }
    }
}

public class CreativePattern
{
    public string Name { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public double Effectiveness { get; set; } = 0.5;
    
    public CreativePattern(string name, string description, double effectiveness)
    {
        Name = name;
        Description = description;
        Effectiveness = effectiveness;
    }
}

public class CreativeConstraint
{
    public string Name { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public double Impact { get; set; } = 0.5;
    
    public CreativeConstraint(string name, string description, double impact)
    {
        Name = name;
        Description = description;
        Impact = impact;
    }
}

public class CreativeIdea
{
    public string Id { get; set; } = string.Empty;
    public string Content { get; set; } = string.Empty;
    public string Context { get; set; } = string.Empty;
    public string Pattern { get; set; } = string.Empty;
    public string Category { get; set; } = string.Empty;
    public double CreativityLevel { get; set; } = 0.5;
    public double EmotionalInfluence { get; set; } = 0.5;
    public double Intensity { get; set; } = 0.5;
    public DateTime Timestamp { get; set; }
}

public class CreativeThinkingStatistics
{
    public int TotalIdeas { get; set; }
    public double AverageCreativityLevel { get; set; }
    public int RecentIdeas { get; set; }
    public double CreativityLevel { get; set; }
    public double InspirationLevel { get; set; }
    public DateTime LastBreakthrough { get; set; }
    public int AvailablePatterns { get; set; }
    public int ActiveConstraints { get; set; }
} 