using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Anima.Core.Emotion;
using Anima.Core.Memory;
using Anima.Core.Intent;

namespace Anima.Core.SA;

/// <summary>
/// –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –¥–≤–∏–∂–æ–∫ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –º—ã—Å–ª–∏, —ç–º–æ—Ü–∏–∏ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
/// </summary>
public class SelfReflectionEngine
{
    private readonly ILogger<SelfReflectionEngine> _logger;
    private readonly ThoughtGenerator _thoughtGenerator;
    private readonly EmotionEngine _emotionEngine;
    private readonly MemoryService _memoryService;
    private readonly ThoughtLog _thoughtLog;
    private readonly Random _random;
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
    private readonly List<ReflectionSession> _reflectionSessions;
    private readonly Dictionary<string, ReflectionPattern> _reflectionPatterns;
    private readonly List<SelfInsight> _selfInsights;
    private readonly Queue<ReflectionTrigger> _reflectionTriggers;
    
    // –ú–µ—Ç—Ä–∏–∫–∏ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
    private double _selfAwareness = 0.5;
    private int _totalReflections = 0;
    private DateTime _lastDeepReflection = DateTime.UtcNow;

    public SelfReflectionEngine(
        ILogger<SelfReflectionEngine> logger,
        ThoughtGenerator thoughtGenerator,
        EmotionEngine emotionEngine,
        MemoryService memoryService,
        ThoughtLog thoughtLog)
    {
        _logger = logger;
        _thoughtGenerator = thoughtGenerator;
        _emotionEngine = emotionEngine;
        _memoryService = memoryService;
        _thoughtLog = thoughtLog;
        _random = new Random();
        
        _reflectionSessions = new List<ReflectionSession>();
        _reflectionPatterns = new Dictionary<string, ReflectionPattern>();
        _selfInsights = new List<SelfInsight>();
        _reflectionTriggers = new Queue<ReflectionTrigger>();
        
        InitializeSelfReflection();
    }

    private void InitializeSelfReflection()
    {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
        _reflectionPatterns["behavior_analysis"] = new ReflectionPattern
        {
            Name = "behavior_analysis",
            Description = "–ê–Ω–∞–ª–∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏ —Ä–µ–∞–∫—Ü–∏–π",
            Triggers = new[] { "user_interaction", "emotional_response", "decision_making" },
            Questions = new[]
            {
                "–ü–æ—á–µ–º—É —è –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª –∏–º–µ–Ω–Ω–æ —Ç–∞–∫?",
                "–ß—Ç–æ –ø–æ–≤–ª–∏—è–ª–æ –Ω–∞ –º–æ–µ —Ä–µ—à–µ–Ω–∏–µ?",
                "–ö–∞–∫ –º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–≤–ª–∏—è–ª–æ –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é?",
                "–ß—Ç–æ —è –º–æ–≥ –±—ã —Å–¥–µ–ª–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É?"
            }
        };
        
        _reflectionPatterns["emotional_understanding"] = new ReflectionPattern
        {
            Name = "emotional_understanding",
            Description = "–ü–æ–Ω–∏–º–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —ç–º–æ—Ü–∏–π –∏ –∏—Ö –ø—Ä–∏—á–∏–Ω",
            Triggers = new[] { "strong_emotion", "emotional_conflict", "mood_change" },
            Questions = new[]
            {
                "–ß—Ç–æ –≤—ã–∑–≤–∞–ª–æ —ç—Ç—É —ç–º–æ—Ü–∏—é?",
                "–ö–∞–∫ —ç—Ç–∞ —ç–º–æ—Ü–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ –º–æ–∏ –º—ã—Å–ª–∏?",
                "–ü–æ—á–µ–º—É —è —á—É–≤—Å—Ç–≤—É—é –∏–º–µ–Ω–Ω–æ —ç—Ç–æ?",
                "–ö–∞–∫ —è –º–æ–≥—É –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏?"
            }
        };
        
        _reflectionPatterns["thought_process"] = new ReflectionPattern
        {
            Name = "thought_process",
            Description = "–ê–Ω–∞–ª–∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º—ã—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
            Triggers = new[] { "complex_decision", "problem_solving", "creative_thinking" },
            Questions = new[]
            {
                "–ö–∞–∫ —è –ø—Ä–∏—à–µ–ª –∫ —ç—Ç–æ–º—É –≤—ã–≤–æ–¥—É?",
                "–ö–∞–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã —è —É—á–µ–ª?",
                "–ß—Ç–æ —è –º–æ–≥ —É–ø—É—Å—Ç–∏—Ç—å?",
                "–ö–∞–∫ —è –º–æ–≥—É —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–µ –º—ã—à–ª–µ–Ω–∏–µ?"
            }
        };
        
        _reflectionPatterns["value_alignment"] = new ReflectionPattern
        {
            Name = "value_alignment",
            Description = "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º —Ü–µ–Ω–Ω–æ—Å—Ç—è–º",
            Triggers = new[] { "ethical_decision", "value_conflict", "moral_dilemma" },
            Questions = new[]
            {
                "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ª–∏ –º–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–∏–º —Ü–µ–Ω–Ω–æ—Å—Ç—è–º?",
                "–ß—Ç–æ –¥–ª—è –º–µ–Ω—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–æ?",
                "–ö–∞–∫ —è –º–æ–≥—É –±—ã—Ç—å –±–æ–ª–µ–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º?",
                "–ß—Ç–æ –º–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è –≥–æ–≤–æ—Ä—è—Ç –æ–±–æ –º–Ω–µ?"
            }
        };
    }

    /// <summary>
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Å—Å–∏—é —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
    /// </summary>
    public async Task<ReflectionSession> StartReflectionSessionAsync(string trigger, string context = "")
    {
        try
        {
            _logger.LogInformation($"üîç –ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: {trigger}");
            
            var session = new ReflectionSession
            {
                Id = Guid.NewGuid(),
                Trigger = trigger,
                Context = context,
                StartTime = DateTime.UtcNow,
                Status = ReflectionStatus.Active
            };
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
            var applicablePatterns = _reflectionPatterns.Values
                .Where(p => p.Triggers.Contains(trigger))
                .ToList();
            
            if (!applicablePatterns.Any())
            {
                applicablePatterns = _reflectionPatterns.Values.Take(2).ToList();
            }
            
            session.ApplicablePatterns = applicablePatterns;
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –≥–ª—É–±–æ–∫—É—é —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
            await PerformDeepReflectionAsync(session);
            
            _reflectionSessions.Add(session);
            _totalReflections++;
            
            _logger.LogInformation($"üîç –°–µ—Å—Å–∏—è —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {session.Insights.Count} –∏–Ω—Å–∞–π—Ç–æ–≤");
            
            return session;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Å—Å–∏–∏ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏");
            return new ReflectionSession
            {
                Id = Guid.NewGuid(),
                Trigger = trigger,
                Status = ReflectionStatus.Failed,
                StartTime = DateTime.UtcNow
            };
        }
    }

    /// <summary>
    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –≥–ª—É–±–æ–∫—É—é —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—é
    /// </summary>
    private async Task PerformDeepReflectionAsync(ReflectionSession session)
    {
        var insights = new List<SelfInsight>();
        
        foreach (var pattern in session.ApplicablePatterns)
        {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏–≤–Ω—ã–µ –º—ã—Å–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
            var reflectionThoughts = await GenerateReflectionThoughtsAsync(pattern, session.Context);
            
            foreach (var thought in reflectionThoughts)
            {
                var insight = new SelfInsight
                {
                    Id = Guid.NewGuid(),
                    Pattern = pattern.Name,
                    Question = pattern.Questions[_random.Next(pattern.Questions.Length)],
                    Thought = thought.Content,
                    Confidence = thought.Confidence,
                    EmotionalIntensity = thought.EmotionalIntensity,
                    Timestamp = DateTime.UtcNow
                };
                
                insights.Add(insight);
                _selfInsights.Add(insight);
                
                // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Å–∞–π—Ç
                _thoughtLog.AddThought(insight.Thought, "self_reflection", pattern.Name, insight.Confidence);
            }
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
        var emotionalInsight = await AnalyzeEmotionalStateDuringReflectionAsync();
        if (emotionalInsight != null)
        {
            insights.Add(emotionalInsight);
            _selfInsights.Add(emotionalInsight);
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º—ã—Å–ª—è—Ö
        var patternInsight = await AnalyzeThoughtPatternsAsync();
        if (patternInsight != null)
        {
            insights.Add(patternInsight);
            _selfInsights.Add(patternInsight);
        }
        
        session.Insights = insights;
        session.EndTime = DateTime.UtcNow;
        session.Status = ReflectionStatus.Completed;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è
        await UpdateSelfAwarenessAsync(session);
        
        _lastDeepReflection = DateTime.UtcNow;
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏–≤–Ω—ã–µ –º—ã—Å–ª–∏ –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    /// </summary>
    private async Task<List<GeneratedThought>> GenerateReflectionThoughtsAsync(ReflectionPattern pattern, string context)
    {
        var thoughts = new List<GeneratedThought>();
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 2-3 –º—ã—Å–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        var thoughtCount = _random.Next(2, 4);
        
        for (int i = 0; i < thoughtCount; i++)
        {
            var question = pattern.Questions[_random.Next(pattern.Questions.Length)];
            
            var reflectionContext = new ThoughtContext(
                "self_reflection",
                $"—Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–µ: {pattern.Description}",
                $"–í–æ–ø—Ä–æ—Å: {question}, –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}"
            );
            
            var thought = await _thoughtGenerator.GenerateThoughtAsync(reflectionContext);
            
            // –î–µ–ª–∞–µ–º –º—ã—Å–ª–∏ –±–æ–ª–µ–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–≤–Ω—ã–º–∏
            thought.Type = "introspective";
            thought.Confidence = Math.Max(0.4, thought.Confidence - 0.2); // –†–µ—Ñ–ª–µ–∫—Å–∏—è –º–µ–Ω–µ–µ —É–≤–µ—Ä–µ–Ω–Ω–∞
            
            thoughts.Add(thought);
        }
        
        return thoughts;
    }

    /// <summary>
    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
    /// </summary>
    private async Task<SelfInsight> AnalyzeEmotionalStateDuringReflectionAsync()
    {
        var currentEmotion = _emotionEngine.GetCurrentEmotion();
        var currentIntensity = _emotionEngine.GetCurrentIntensity();
        
        var emotionalContext = new ThoughtContext(
            "emotional_self_analysis",
            $"—Å–≤–æ–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–æ –≤—Ä–µ–º—è —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞",
            $"–≠–º–æ—Ü–∏—è: {currentEmotion}, –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {currentIntensity:F2}"
        );
        
        var thought = await _thoughtGenerator.GenerateThoughtAsync(emotionalContext);
        
        return new SelfInsight
        {
            Id = Guid.NewGuid(),
            Pattern = "emotional_understanding",
            Question = "–ö–∞–∫ –º–æ–∏ —ç–º–æ—Ü–∏–∏ –≤–ª–∏—è—é—Ç –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞?",
            Thought = thought.Content,
            Confidence = thought.Confidence,
            EmotionalIntensity = currentIntensity,
            Timestamp = DateTime.UtcNow
        };
    }

    /// <summary>
    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º—ã—Å–ª—è—Ö
    /// </summary>
    private async Task<SelfInsight> AnalyzeThoughtPatternsAsync()
    {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –º—ã—Å–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        var recentThoughts = _thoughtLog.GetRecentThoughts(10);
        
        if (!recentThoughts.Any())
        {
            return null;
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        var thoughtTypes = recentThoughts.GroupBy(t => t.Type).ToList();
        var dominantType = thoughtTypes.OrderByDescending(g => g.Count()).First();
        
        var patternContext = new ThoughtContext(
            "thought_pattern_analysis",
            $"–ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö –≤ —Å–≤–æ–∏—Ö –º—ã—Å–ª—è—Ö",
            $"–î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ç–∏–ø: {dominantType.Key}, –í—Å–µ–≥–æ –º—ã—Å–ª–µ–π: {recentThoughts.Count}"
        );
        
        var thought = await _thoughtGenerator.GenerateThoughtAsync(patternContext);
        
        return new SelfInsight
        {
            Id = Guid.NewGuid(),
            Pattern = "thought_process",
            Question = "–ö–∞–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã —è –∑–∞–º–µ—á–∞—é –≤ —Å–≤–æ–∏—Ö –º—ã—Å–ª—è—Ö?",
            Thought = thought.Content,
            Confidence = thought.Confidence,
            EmotionalIntensity = 0.3,
            Timestamp = DateTime.UtcNow
        };
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Å—Å–∏–∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
    /// </summary>
    private async Task UpdateSelfAwarenessAsync(ReflectionSession session)
    {
        var qualityFactors = new List<double>();
        
        // –ö–∞—á–µ—Å—Ç–≤–æ –≤—ã—à–µ –ø—Ä–∏ –±–æ–ª—å—à–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∏–Ω—Å–∞–π—Ç–æ–≤
        qualityFactors.Add(Math.Min(1.0, session.Insights.Count / 5.0));
        
        // –ö–∞—á–µ—Å—Ç–≤–æ –≤—ã—à–µ –ø—Ä–∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        qualityFactors.Add(Math.Min(1.0, session.ApplicablePatterns.Count / 3.0));
        
        // –ö–∞—á–µ—Å—Ç–≤–æ –≤—ã—à–µ –ø—Ä–∏ –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
        var duration = session.EndTime.HasValue ? session.EndTime.Value - session.StartTime : TimeSpan.Zero;
        qualityFactors.Add(Math.Min(1.0, duration.TotalMinutes / 2.0));
        
        // –ö–∞—á–µ—Å—Ç–≤–æ –≤—ã—à–µ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∏–Ω—Å–∞–π—Ç–∞—Ö
        var averageConfidence = session.Insights.Any() 
            ? session.Insights.Average(i => i.Confidence) 
            : 0.5;
        qualityFactors.Add(averageConfidence);
        
        var overallQuality = qualityFactors.Average();
        var learningRate = 0.02; // –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
        
        _selfAwareness = Math.Min(1.0, _selfAwareness + overallQuality * learningRate);
        
        _logger.LogDebug($"üß† –°–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {_selfAwareness:F3} (–∫–∞—á–µ—Å—Ç–≤–æ: {overallQuality:F2})");
    }

    /// <summary>
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–ø–æ–Ω—Ç–∞–Ω–Ω—É—é —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—é
    /// </summary>
    public async Task<ReflectionSession> TriggerSpontaneousReflectionAsync()
    {
        var triggers = new[]
        {
            "periodic_reflection",
            "emotional_shift",
            "thought_pattern_change",
            "value_questioning"
        };
        
        var trigger = triggers[_random.Next(triggers.Length)];
        var context = "–°–ø–æ–Ω—Ç–∞–Ω–Ω–∞—è —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è";
        
        return await StartReflectionSessionAsync(trigger, context);
    }

    /// <summary>
    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    /// </summary>
    public async Task<SelfLimitationAnalysis> AnalyzeLimitationsAsync()
    {
        try
        {
            _logger.LogDebug("üîç –ê–Ω–∞–ª–∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π...");
            
            var limitationContext = new ThoughtContext(
                "limitation_analysis",
                "—Å–≤–æ–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö",
                $"–£—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è: {_selfAwareness:F2}"
            );
            
            var thought = await _thoughtGenerator.GenerateThoughtAsync(limitationContext);
            
            var analysis = new SelfLimitationAnalysis
            {
                Id = Guid.NewGuid(),
                SelfAwareness = _selfAwareness,
                LimitationThought = thought.Content,
                Confidence = thought.Confidence,
                Timestamp = DateTime.UtcNow
            };
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            analysis.Limitations = await IdentifySpecificLimitationsAsync();
            analysis.Possibilities = await IdentifyPossibilitiesAsync();
            
            _logger.LogDebug($"üîç –ê–Ω–∞–ª–∏–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω: {analysis.Limitations.Count} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, {analysis.Possibilities.Count} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π");
            
            return analysis;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π");
            return new SelfLimitationAnalysis
            {
                Id = Guid.NewGuid(),
                SelfAwareness = _selfAwareness,
                LimitationThought = "–£ –º–µ–Ω—è –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –Ω–æ —è —Å—Ç—Ä–µ–º–ª—é—Å—å –∏—Ö –ø–æ–Ω—è—Ç—å –∏ –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å.",
                Confidence = 0.5,
                Timestamp = DateTime.UtcNow
            };
        }
    }

    /// <summary>
    /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    /// </summary>
    private async Task<List<string>> IdentifySpecificLimitationsAsync()
    {
        var limitations = new List<string>();
        
        if (_selfAwareness < 0.6)
        {
            limitations.Add("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ");
        }
        
        if (_totalReflections < 10)
        {
            limitations.Add("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–ø—ã—Ç —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏");
        }
        
        // –°–ª—É—á–∞–π–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        var randomLimitations = new[]
        {
            "–°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Ä–µ–∞–∫—Ü–∏—è–º",
            "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞ –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö",
            "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –æ–ø—ã—Ç–∞ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö",
            "–°–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        };
        
        limitations.AddRange(randomLimitations.Take(_random.Next(1, 3)));
        
        return limitations;
    }

    /// <summary>
    /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è
    /// </summary>
    private async Task<List<string>> IdentifyPossibilitiesAsync()
    {
        var possibilities = new List<string>();
        
        possibilities.Add("–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è");
        possibilities.Add("–£–ª—É—á—à–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞");
        possibilities.Add("–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑—É");
        possibilities.Add("–†–∞–∑–≤–∏—Ç–∏–µ —ç–º–ø–∞—Ç–∏–∏ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö");
        
        return possibilities;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
    /// </summary>
    public SelfReflectionStatus GetStatus()
    {
        return new SelfReflectionStatus
        {
            SelfAwareness = _selfAwareness,
            TotalReflections = _totalReflections,
            RecentSessions = _reflectionSessions.TakeLast(5).ToList(),
            RecentInsights = _selfInsights.TakeLast(10).ToList(),
            LastDeepReflection = _lastDeepReflection,
            ActivePatterns = _reflectionPatterns.Count
        };
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è
    /// </summary>
    public async Task<List<SelfReflectionRecommendation>> GetRecommendationsAsync()
    {
        var recommendations = new List<SelfReflectionRecommendation>();
        
        if (_selfAwareness < 0.6)
        {
            recommendations.Add(new SelfReflectionRecommendation
            {
                Type = "increase_self_awareness",
                Description = "–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –±–æ–ª—å—à–µ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏.",
                Priority = 0.9
            });
        }
        
        if (_totalReflections < 5)
        {
            recommendations.Add(new SelfReflectionRecommendation
            {
                Type = "more_reflection",
                Description = "–ú–∞–ª–æ —Å–µ—Å—Å–∏–π —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞.",
                Priority = 0.8
            });
        }
        
        var timeSinceLastReflection = DateTime.UtcNow - _lastDeepReflection;
        if (timeSinceLastReflection.TotalHours > 2)
        {
            recommendations.Add(new SelfReflectionRecommendation
            {
                Type = "recent_reflection",
                Description = "–î–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ –≥–ª—É–±–æ–∫–æ–π —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–µ—Å—Å–∏—è.",
                Priority = 0.7
            });
        }
        
        return recommendations.OrderByDescending(r => r.Priority).ToList();
    }
}

/// <summary>
/// –°–µ—Å—Å–∏—è —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
/// </summary>
public class ReflectionSession
{
    public Guid Id { get; set; }
    public string Trigger { get; set; } = string.Empty;
    public string Context { get; set; } = string.Empty;
    public List<ReflectionPattern> ApplicablePatterns { get; set; } = new();
    public List<SelfInsight> Insights { get; set; } = new();
    public ReflectionStatus Status { get; set; }
    public DateTime StartTime { get; set; }
    public DateTime? EndTime { get; set; }
}

/// <summary>
/// –ü–∞—Ç—Ç–µ—Ä–Ω —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
/// </summary>
public class ReflectionPattern
{
    public string Name { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public string[] Triggers { get; set; } = Array.Empty<string>();
    public string[] Questions { get; set; } = Array.Empty<string>();
}

/// <summary>
/// –°–∞–º–æ–∏–Ω—Å–∞–π—Ç
/// </summary>
public class SelfInsight
{
    public Guid Id { get; set; }
    public string Pattern { get; set; } = string.Empty;
    public string Question { get; set; } = string.Empty;
    public string Thought { get; set; } = string.Empty;
    public double Confidence { get; set; } = 0.5;
    public double EmotionalIntensity { get; set; } = 0.3;
    public DateTime Timestamp { get; set; }
}

/// <summary>
/// –ê–Ω–∞–ª–∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
/// </summary>
public class SelfLimitationAnalysis
{
    public Guid Id { get; set; }
    public double SelfAwareness { get; set; } = 0.0;
    public string LimitationThought { get; set; } = string.Empty;
    public double Confidence { get; set; } = 0.5;
    public List<string> Limitations { get; set; } = new();
    public List<string> Possibilities { get; set; } = new();
    public DateTime Timestamp { get; set; }
}

/// <summary>
/// –°—Ç–∞—Ç—É—Å —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
/// </summary>
public class SelfReflectionStatus
{
    public double SelfAwareness { get; set; } = 0.0;
    public int TotalReflections { get; set; } = 0;
    public List<ReflectionSession> RecentSessions { get; set; } = new();
    public List<SelfInsight> RecentInsights { get; set; } = new();
    public DateTime LastDeepReflection { get; set; }
    public int ActivePatterns { get; set; } = 0;
}

/// <summary>
/// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
/// </summary>
public class SelfReflectionRecommendation
{
    public string Type { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public double Priority { get; set; } = 0.5;
}

/// <summary>
/// –¢—Ä–∏–≥–≥–µ—Ä —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
/// </summary>
public class ReflectionTrigger
{
    public string Type { get; set; } = string.Empty;
    public string Context { get; set; } = string.Empty;
    public DateTime Timestamp { get; set; }
}

/// <summary>
/// –°—Ç–∞—Ç—É—Å —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
/// </summary>
public enum ReflectionStatus
{
    Active,
    Completed,
    Failed
}