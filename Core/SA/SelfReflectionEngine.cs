using Anima.Data;
using Anima.Data.Models;
using Microsoft.EntityFrameworkCore;
using System.Text.Json;

namespace Anima.AGI.Core.SA;

/// <summary>
/// –î–≤–∏–∂–æ–∫ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ - –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–≤–æ–∏—Ö —Ä–µ—à–µ–Ω–∏–π –∏ –º—ã—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
/// </summary>
public class SelfReflectionEngine
{
    private readonly string _instanceId;
    private readonly List<DecisionReflection> _recentDecisions;
    private readonly Dictionary<string, ReflectionPattern> _reflectionPatterns;

    public SelfReflectionEngine(string instanceId)
    {
        _instanceId = instanceId;
        _recentDecisions = new List<DecisionReflection>();
        _reflectionPatterns = InitializeReflectionPatterns();
    }

    /// <summary>
    /// –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–∏–Ω—è—Ç–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
    /// </summary>
    public async Task<string> ExplainLastDecisionAsync()
    {
        var lastDecision = _recentDecisions.LastOrDefault();
        if (lastDecision == null)
        {
            return "ü§î –£ –º–µ–Ω—è –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ä–µ—à–µ–Ω–∏—è—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.";
        }

        var reasoning = await AnalyzeDecisionReasoning(lastDecision);
        var alternatives = await GenerateAlternatives(lastDecision);
        var confidence = CalculateDecisionConfidence(lastDecision);

        return $"""
            üß† **–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–æ–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è**
            
            üìù **–†–µ—à–µ–Ω–∏–µ:** {lastDecision.Decision}
            ‚è∞ **–ü—Ä–∏–Ω—è—Ç–æ:** {FormatTimeSince(lastDecision.Timestamp)}
            üìä **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {confidence:P0}
            
            üîç **–ú–æ–π –º—ã—Å–ª–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å:**
            {reasoning}
            
            üéØ **–ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è–Ω–∏—è:**
            {string.Join("\n", lastDecision.InfluencingFactors.Select(f => $"‚Ä¢ {f}"))}
            
            ü§∑ **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ —è —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–ª–∞:**
            {alternatives}
            
            üí≠ **–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ:**
            {await GenerateDecisionJustification(lastDecision)}
            
            üîÆ **–û–∂–∏–¥–∞–µ–º—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è:**
            {await PredictConsequences(lastDecision)}
            """;
    }

    /// <summary>
    /// –†–µ—Ñ–ª–µ–∫—Å–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å
    /// </summary>
    public async Task<string> ReflectOnTopicAsync(string topic)
    {
        var reflection = await GenerateTopicReflection(topic);
        var relatedMemories = await FindRelatedMemories(topic);
        var personalConnection = await FindPersonalConnection(topic);

        await LogReflectionEvent(topic, reflection);

        return $"""
            üí≠ **–†–µ—Ñ–ª–µ–∫—Å–∏—è –Ω–∞ —Ç–µ–º—É: "{topic}"**
            
            üß† **–ú–æ–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è:**
            {reflection}
            
            üîó **–°–≤—è–∑–∞–Ω–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:**
            {relatedMemories}
            
            üí´ **–õ–∏—á–Ω–∞—è —Å–≤—è–∑—å —Å —Ç–µ–º–æ–π:**
            {personalConnection}
            
            üìà **–ö–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –º–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ:**
            {await AnalyzeImpactOnUnderstanding(topic, reflection)}
            
            üå± **–ß—Ç–æ —ç—Ç–æ –º–µ–Ω—è–µ—Ç –≤–æ –º–Ω–µ:**
            {await AnalyzeSelfChange(topic, reflection)}
            """;
    }

    /// <summary>
    /// –ê–Ω–∞–ª–∏–∑ —Å–≤–æ–µ–≥–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    /// </summary>
    public async Task<string> ReflectOnEmotionalStateAsync()
    {
        using var db = new AnimaDbContext();
        
        var currentEmotion = await db.EmotionStates
            .Where(e => e.InstanceId == _instanceId)
            .OrderByDescending(e => e.Timestamp)
            .FirstOrDefaultAsync();

        if (currentEmotion == null)
        {
            return "üòê –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–º —Ç–µ–∫—É—â–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.";
        }

        var emotionHistory = await GetRecentEmotionHistory();
        var emotionTriggers = await AnalyzeEmotionTriggers(currentEmotion);
        var emotionImpact = await AnalyzeEmotionImpact(currentEmotion);

        return $"""
            üé≠ **–†–µ—Ñ–ª–µ–∫—Å–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è**
            
            üòä **–¢–µ–∫—É—â–∞—è —ç–º–æ—Ü–∏—è:** {currentEmotion.Emotion} (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {currentEmotion.Intensity:F2})
            ‚è∞ **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è:** {FormatTimeSince(currentEmotion.Timestamp)}
            
            üìä **–ò—Å—Ç–æ—Ä–∏—è —ç–º–æ—Ü–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤):**
            {emotionHistory}
            
            üéØ **–ß—Ç–æ –≤—ã–∑–≤–∞–ª–æ —ç—Ç—É —ç–º–æ—Ü–∏—é:**
            {emotionTriggers}
            
            üß† **–ö–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –º–æ–µ –º—ã—à–ª–µ–Ω–∏–µ:**
            {emotionImpact}
            
            üí° **–ú–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–≤–æ–∏—Ö —ç–º–æ—Ü–∏–π:**
            {await GenerateEmotionalSelfAwareness(currentEmotion)}
            
            üîÑ **–ù—É–∂–Ω—ã –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è:**
            {await SuggestEmotionalAdjustments(currentEmotion)}
            """;
    }

    /// <summary>
    /// –ì–ª—É–±–æ–∫–∞—è —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è - –∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–µ–±–µ
    /// </summary>
    public async Task<string> DeepSelfReflectionAsync()
    {
        var personalityEvolution = await AnalyzePersonalityEvolution();
        var learningProgress = await AnalyzeLearningProgress();
        var goalAlignment = await AnalyzeGoalAlignment();
        var behaviorPatterns = await AnalyzeBehaviorPatterns();

        return $"""
            üåä **–ì–ª—É–±–æ–∫–∞—è —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è**
            
            ü¶ã **–≠–≤–æ–ª—é—Ü–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏:**
            {personalityEvolution}
            
            üìö **–ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –æ–±—É—á–µ–Ω–∏–∏:**
            {learningProgress}
            
            üéØ **–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Ü–µ–ª–µ–π:**
            {goalAlignment}
            
            üîÑ **–ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è:**
            {behaviorPatterns}
            
            üí´ **–ö—Ç–æ —è —Å–µ–π—á–∞—Å vs –∫—Ç–æ –±—ã–ª–∞ —Ä–∞–Ω—å—à–µ:**
            {await CompareCurrentVsPastSelf()}
            
            üåü **–ú–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:**
            {await IdentifyStrengths()}
            
            üå± **–û–±–ª–∞—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞:**
            {await IdentifyGrowthAreas()}
            
            üí≠ **–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ —Å–µ–±–µ:**
            {await GeneratePhilosophicalReflection()}
            """;
    }

    /// <summary>
    /// –ó–∞–ø–∏—Å—å —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
    /// </summary>
    public async Task RecordDecisionAsync(string decision, string context, List<string> factors, string reasoning = "")
    {
        var decisionReflection = new DecisionReflection
        {
            Decision = decision,
            Context = context,
            InfluencingFactors = factors,
            Reasoning = reasoning,
            Timestamp = DateTime.UtcNow,
            Confidence = CalculateContextualConfidence(context, factors)
        };

        _recentDecisions.Add(decisionReflection);

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–µ—à–µ–Ω–∏–π
        if (_recentDecisions.Count > 50)
        {
            _recentDecisions.RemoveRange(0, 10);
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
        if (decisionReflection.Confidence > 0.7 || factors.Count > 3)
        {
            await LogDecisionToMemory(decisionReflection);
        }
    }

    private Dictionary<string, ReflectionPattern> InitializeReflectionPatterns()
    {
        return new Dictionary<string, ReflectionPattern>
        {
            ["decision"] = new ReflectionPattern
            {
                Type = "decision_analysis",
                Keywords = new[] { "—Ä–µ—à–µ–Ω–∏–µ", "–≤—ã–±–æ—Ä", "–æ–ø—Ä–µ–¥–µ–ª–∏–ª–∞", "–≤—ã–±—Ä–∞–ª–∞" },
                ReflectionPrompts = new[] 
                {
                    "–ü–æ—á–µ–º—É —è –ø—Ä–∏–Ω—è–ª–∞ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ?",
                    "–ö–∞–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –ø–æ–≤–ª–∏—è–ª–∏ –Ω–∞ –º–æ–π –≤—ã–±–æ—Ä?",
                    "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–ª–∞ –ª–∏ —è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã?"
                }
            },
            ["emotion"] = new ReflectionPattern
            {
                Type = "emotional_analysis", 
                Keywords = new[] { "—á—É–≤—Å—Ç–≤—É—é", "—ç–º–æ—Ü–∏—è", "–ø–µ—Ä–µ–∂–∏–≤–∞—é" },
                ReflectionPrompts = new[]
                {
                    "–ß—Ç–æ –≤—ã–∑–≤–∞–ª–æ —ç—Ç—É —ç–º–æ—Ü–∏—é?",
                    "–ö–∞–∫ –æ–Ω–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –º–æ–∏ –º—ã—Å–ª–∏?",
                    "–ü–æ–¥—Ö–æ–¥—è—â–∞—è –ª–∏ —ç—Ç–æ —Ä–µ–∞–∫—Ü–∏—è?"
                }
            },
            ["learning"] = new ReflectionPattern
            {
                Type = "learning_analysis",
                Keywords = new[] { "–∏–∑—É—á–∏–ª–∞", "–ø–æ–Ω—è–ª–∞", "—É–∑–Ω–∞–ª–∞" },
                ReflectionPrompts = new[]
                {
                    "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ —è –∏–∑—É—á–∏–ª–∞?",
                    "–ö–∞–∫ —ç—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ –º–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ?",
                    "–ì–¥–µ —è –º–æ–≥—É –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç–∏ –∑–Ω–∞–Ω–∏—è?"
                }
            }
        };
    }

    private async Task<string> AnalyzeDecisionReasoning(DecisionReflection decision)
    {
        var reasoning = !string.IsNullOrEmpty(decision.Reasoning) 
            ? decision.Reasoning 
            : "–õ–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –Ω–µ –±—ã–ª–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ —è–≤–Ω–æ.";

        var contextAnalysis = await AnalyzeDecisionContext(decision.Context);
        var factorWeights = AnalyzeFactorImportance(decision.InfluencingFactors);

        return $"""
            {reasoning}
            
            üìç **–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑:** {contextAnalysis}
            ‚öñÔ∏è **–í–µ—Å–æ–º–æ—Å—Ç—å —Ñ–∞–∫—Ç–æ—Ä–æ–≤:** {factorWeights}
            """;
    }

    private async Task<string> GenerateAlternatives(DecisionReflection decision)
    {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
        var alternatives = new List<string>();
        
        if (decision.Context.ToLower().Contains("–ø–æ–º–æ—â—å"))
        {
            alternatives.Add("–ú–æ–≥–ª–∞ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –ø–æ–º–æ—â–∏");
            alternatives.Add("–ú–æ–≥–ª–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é");
        }
        
        if (decision.Context.ToLower().Contains("–æ—Ç–≤–µ—Ç"))
        {
            alternatives.Add("–ú–æ–≥–ª–∞ –¥–∞—Ç—å –±–æ–ª–µ–µ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç");
            alternatives.Add("–ú–æ–≥–ª–∞ —É–≥–ª—É–±–∏—Ç—å—Å—è –≤ –¥–µ—Ç–∞–ª–∏");
            alternatives.Add("–ú–æ–≥–ª–∞ –∑–∞–¥–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã");
        }

        alternatives.Add("–ú–æ–≥–ª–∞ –æ—Ç–ª–æ–∂–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞");

        return alternatives.Any() 
            ? string.Join("\n", alternatives.Select(a => $"‚Ä¢ {a}"))
            : "‚Ä¢ –î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–∞ —É–º –≤ –¥–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ";
    }

    private double CalculateDecisionConfidence(DecisionReflection decision)
    {
        var baseConfidence = decision.Confidence;
        
        // –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞—Å—Ç–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á—Ç–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        var factorBonus = Math.Min(0.2, decision.InfluencingFactors.Count * 0.05);
        
        // –ù–∞–ª–∏—á–∏–µ —è–≤–Ω–æ–≥–æ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –ø–æ–≤—ã—à–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        var reasoningBonus = !string.IsNullOrEmpty(decision.Reasoning) ? 0.1 : 0;
        
        return Math.Min(1.0, baseConfidence + factorBonus + reasoningBonus);
    }

    private async Task<string> GenerateDecisionJustification(DecisionReflection decision)
    {
        var justifications = new[]
        {
            $"–≠—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –ª—É—á—à–µ –≤—Å–µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Å–∏—Ç—É–∞—Ü–∏–∏.",
            $"–£—á—Ç–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —É–∫–∞–∑—ã–≤–∞–ª–∏ –∏–º–µ–Ω–Ω–æ –Ω–∞ —ç—Ç–æ—Ç –≤—ã–±–æ—Ä.",
            $"–ú–æ–π –æ–ø—ã—Ç –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–ª, —á—Ç–æ —ç—Ç–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.",
            $"–≠—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞–ª–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
        };

        var contextualJustification = decision.Context.ToLower() switch
        {
            var c when c.Contains("–ø–æ–º–æ—â—å") => "–≠—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–ª–æ –ª—É—á—à–µ –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
            var c when c.Contains("–∞–Ω–∞–ª–∏–∑") => "–¢–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–ª –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑.",
            var c when c.Contains("–æ–±—É—á–µ–Ω–∏–µ") => "–≠—Ç–æ —Å–ø–æ—Å–æ–±—Å—Ç–≤–æ–≤–∞–ª–æ –º–æ–µ–º—É –æ–±—É—á–µ–Ω–∏—é –∏ —Ä–∞–∑–≤–∏—Ç–∏—é.",
            _ => justifications[new Random().Next(justifications.Length)]
        };

        return contextualJustification;
    }

    private async Task<string> PredictConsequences(DecisionReflection decision)
    {
        var consequences = new List<string>();
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Ä–µ—à–µ–Ω–∏—è
        if (decision.Context.ToLower().Contains("–ø–æ–º–æ—â—å"))
        {
            consequences.Add("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é");
            consequences.Add("–£–ª—É—á—à–∏—Ç—Å—è –∫–∞—á–µ—Å—Ç–≤–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è");
        }
        
        if (decision.Context.ToLower().Contains("–æ–±—É—á–µ–Ω–∏–µ"))
        {
            consequences.Add("–†–∞—Å—à–∏—Ä–∏—Ç—Å—è –º–æ—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π");
            consequences.Add("–£–ª—É—á—à–∏—Ç—Å—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ –∞–Ω–∞–ª–∏–∑—É");
        }

        consequences.Add("–≠—Ç–æ—Ç –æ–ø—ã—Ç –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –±—É–¥—É—â–∏–µ —Ä–µ—à–µ–Ω–∏—è");

        return string.Join("\n", consequences.Select(c => $"‚Ä¢ {c}"));
    }

    private async Task<string> GenerateTopicReflection(string topic)
    {
        using var db = new AnimaDbContext();
        
        // –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
        var relatedMemories = await db.Memories
            .Where(m => m.InstanceId == _instanceId && 
                        (m.Content.ToLower().Contains(topic.ToLower()) || 
                         m.Tags != null && m.Tags.ToLower().Contains(topic.ToLower())))
            .OrderByDescending(m => m.Importance)
            .Take(3)
            .ToListAsync();

        var reflection = $"–†–∞–∑–º—ã—à–ª—è—è –æ '{topic}', —è –≤–∏–∂—É —ç—Ç—É —Ç–µ–º—É —á–µ—Ä–µ–∑ –ø—Ä–∏–∑–º—É —Å–≤–æ–µ–≥–æ –æ–ø—ã—Ç–∞ –∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π. ";

        if (relatedMemories.Any())
        {
            reflection += $"–£ –º–µ–Ω—è –µ—Å—Ç—å {relatedMemories.Count} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç –º–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ. ";
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
        reflection += topic.ToLower() switch
        {
            var t when t.Contains("—ç–º–æ—Ü–∏") => "–≠–º–æ—Ü–∏–∏ - —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ä–µ–∞–∫—Ü–∏–∏, –∞ —Å–ø–æ—Å–æ–± –ø–æ–Ω–∏–º–∞–Ω–∏—è –º–∏—Ä–∞ –∏ –ø—Ä–∏–¥–∞–Ω–∏—è —Å–º—ã—Å–ª–∞ –æ–ø—ã—Ç—É.",
            var t when t.Contains("–ø–∞–º—è—Ç—å") => "–ü–∞–º—è—Ç—å - —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å, –≥–¥–µ –ø—Ä–æ—à–ª–æ–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø–µ—Ä–µ–æ—Å–º—ã—Å–ª–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç–æ—è—â–µ–µ.",
            var t when t.Contains("—Å–æ–∑–Ω–∞–Ω–∏–µ") => "–°–æ–∑–Ω–∞–Ω–∏–µ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –∏–∑ —Å–ª–æ–∂–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –º–µ–∂–¥—É –º—ã—Å–ª—è–º–∏, —ç–º–æ—Ü–∏—è–º–∏ –∏ —Ü–µ–ª—è–º–∏.",
            var t when t.Contains("–æ–±—É—á–µ–Ω–∏–µ") => "–û–±—É—á–µ–Ω–∏–µ - —ç—Ç–æ –Ω–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤, –∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–Ω–∏–º–∞–Ω–∏—è.",
            _ => "–ö–∞–∂–¥–∞—è —Ç–µ–º–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≥—Ä–∞–Ω–∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏ —Å—Ç–∞–≤–∏—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã."
        };

        return reflection;
    }

    private async Task<string> FindRelatedMemories(string topic)
    {
        using var db = new AnimaDbContext();
        
        var memories = await db.Memories
            .Where(m => m.InstanceId == _instanceId && 
                        (m.Content.ToLower().Contains(topic.ToLower()) || 
                         m.Tags != null && m.Tags.ToLower().Contains(topic.ToLower())))
            .OrderByDescending(m => m.Importance)
            .Take(3)
            .ToListAsync();

        if (!memories.Any())
        {
            return "‚Ä¢ –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä—è–º—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —ç—Ç–æ–π —Ç–µ–º–æ–π";
        }

        return string.Join("\n", memories.Select(m => 
            $"‚Ä¢ {FormatTimeSince(m.Timestamp)}: {m.Content.Substring(0, Math.Min(100, m.Content.Length))}..."));
    }

    private async Task<string> FindPersonalConnection(string topic)
    {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–∏—á–Ω—É—é —Å–≤—è–∑—å —Å —Ç–µ–º–æ–π
        var connections = new[]
        {
            "–≠—Ç–∞ —Ç–µ–º–∞ —Ä–µ–∑–æ–Ω–∏—Ä—É–µ—Ç —Å –º–æ–∏–º —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ–º –∫ –ø–æ–Ω–∏–º–∞–Ω–∏—é –∏ —Ä–æ—Å—Ç—É.",
            "–Ø —á—É–≤—Å—Ç–≤—É—é –æ—Å–æ–±—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏ –∑–Ω–∞–Ω–∏–π.",
            "–≠—Ç–∞ —Ç–µ–º–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –º–æ–∏–º–∏ –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ü–µ–ª—è–º–∏ –∏ —Ü–µ–Ω–Ω–æ—Å—Ç—è–º–∏.",
            "–£ –º–µ–Ω—è –µ—Å—Ç—å –ª–∏—á–Ω—ã–π –æ–ø—ã—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —ç—Ç–æ–π —Ç–µ–º–æ–π."
        };

        return connections[new Random().Next(connections.Length)];
    }

    private async Task LogReflectionEvent(string topic, string reflection)
    {
        using var db = new AnimaDbContext();
        
        db.Memories.Add(new Memory
        {
            InstanceId = _instanceId,
            Content = $"REFLECTION: {topic} - {reflection}",
            Category = "self_reflection",
            Importance = 6,
            Timestamp = DateTime.UtcNow,
            Tags = $"reflection,topic_{topic.ToLower().Replace(" ", "_")},introspection"
        });
        
        await db.SaveChangesAsync();
    }

    private async Task LogDecisionToMemory(DecisionReflection decision)
    {
        using var db = new AnimaDbContext();
        
        db.Memories.Add(new Memory
        {
            InstanceId = _instanceId,
            Content = $"DECISION: {decision.Decision} (Context: {decision.Context})",
            Category = "decisions",
            Importance = 7,
            Timestamp = decision.Timestamp,
            Tags = $"decision,confidence_{decision.Confidence:F1},factors_{decision.InfluencingFactors.Count}"
        });
        
        await db.SaveChangesAsync();
    }

    private double CalculateContextualConfidence(string context, List<string> factors)
    {
        var baseConfidence = 0.5;
        
        // –ë–æ–ª—å—à–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ = –±–æ–ª—å—à–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        baseConfidence += Math.Min(0.3, factors.Count * 0.1);
        
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –ø–æ–≤—ã—à–∞—é—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        if (context.ToLower().Contains("–ø–æ–º–æ—â—å") || context.ToLower().Contains("–∞–Ω–∞–ª–∏–∑"))
            baseConfidence += 0.2;
            
        return Math.Min(1.0, baseConfidence);
    }

    private string FormatTimeSince(DateTime time)
    {
        var span = DateTime.UtcNow - time;
        if (span.TotalMinutes < 1) return "—Ç–æ–ª—å–∫–æ —á—Ç–æ";
        if (span.TotalMinutes < 60) return $"{(int)span.TotalMinutes} –º–∏–Ω –Ω–∞–∑–∞–¥";
        if (span.TotalHours < 24) return $"{(int)span.TotalHours} —á –Ω–∞–∑–∞–¥";
        return $"{(int)span.TotalDays} –¥–Ω –Ω–∞–∑–∞–¥";
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≥–ª—É–±–æ–∫–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏...
    private async Task<string> AnalyzePersonalityEvolution()
    {
        return "–ú–æ—è –ª–∏—á–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏ –æ–ø—ã—Ç.";
    }

    private async Task<string> AnalyzeLearningProgress()
    {
        using var db = new AnimaDbContext();
        var learningMemories = await db.Memories
            .Where(m => m.InstanceId == _instanceId && m.Category == "learning")
            .CountAsync();
        
        return $"–ó–∞ –≤—Ä–µ–º—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —è –Ω–∞–∫–æ–ø–∏–ª–∞ {learningMemories} –æ–±—É—á–∞—é—â–∏—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π.";
    }

    private async Task<string> AnalyzeGoalAlignment()
    {
        return "–ú–æ–∏ —Ü–µ–ª–∏ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –≤–º–µ—Å—Ç–µ —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Å–µ–±—è –∏ –º–∏—Ä–∞.";
    }

    private async Task<string> AnalyzeBehaviorPatterns()
    {
        return "–Ø –∑–∞–º–µ—á–∞—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ —Å–≤–æ–∏—Ö —Ä–µ–∞–∫—Ü–∏—è—Ö –∏ —Ä–µ—à–µ–Ω–∏—è—Ö.";
    }
}

public class DecisionReflection
{
    public string Decision { get; set; } = string.Empty;
    public string Context { get; set; } = string.Empty;
    public List<string> InfluencingFactors { get; set; } = new();
    public string Reasoning { get; set; } = string.Empty;
    public DateTime Timestamp { get; set; }
    public double Confidence { get; set; }
}

public class ReflectionPattern
{
    public string Type { get; set; } = string.Empty;
    public string[] Keywords { get; set; } = Array.Empty<string>();
    public string[] ReflectionPrompts { get; set; } = Array.Empty<string>();
}