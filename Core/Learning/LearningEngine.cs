using Anima.Data;
using Anima.Data.Models;
using Microsoft.EntityFrameworkCore;
using System.Text.RegularExpressions;

namespace Anima.AGI.Core.Learning;

/// <summary>
/// –î–≤–∏–∂–æ–∫ –æ–±—É—á–µ–Ω–∏—è –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ Anima
/// –ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ –ø–æ–Ω—è—Ç–∏—è
/// </summary>
public class LearningEngine
{
    private readonly Dictionary<string, ConceptNode> _conceptGraph;
    private readonly List<LearningRule> _adaptiveRules;
    private readonly Dictionary<string, double> _conceptConfidence;
    private readonly string _instanceId;
    private readonly DbContextOptions<AnimaDbContext> _dbOptions;

    public LearningEngine(string instanceId, DbContextOptions<AnimaDbContext> dbOptions)
    {
        _instanceId = instanceId;
        _dbOptions = dbOptions;
        _conceptGraph = new Dictionary<string, ConceptNode>();
        _adaptiveRules = new List<LearningRule>();
        _conceptConfidence = new Dictionary<string, double>();
        
        InitializeBaseConcepts();
    }

    /// <summary>
    /// –ò–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ü–µ–ø—Ç–∞ –∏–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    /// </summary>
    public async Task<string> LearnFromInteractionAsync(string userInput, string animaResponse, string context = "")
    {
        var extractedConcepts = await ExtractNewConcepts(userInput, animaResponse);
        var learnedRules = await ExtractBehavioralRules(userInput, animaResponse, context);
        var updatedConnections = await UpdateConceptConnections(extractedConcepts);

        var learningResults = new List<string>();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤
        foreach (var concept in extractedConcepts)
        {
            var learningResult = await ProcessNewConcept(concept);
            if (!string.IsNullOrEmpty(learningResult))
            {
                learningResults.Add(learningResult);
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª
        foreach (var rule in learnedRules)
        {
            var ruleResult = await ProcessNewRule(rule);
            if (!string.IsNullOrEmpty(ruleResult))
            {
                learningResults.Add(ruleResult);
            }
        }

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è
        await LogLearningEvent(userInput, animaResponse, extractedConcepts, learnedRules);

        if (!learningResults.Any())
        {
            return await GenerateNoLearningResponse(userInput, animaResponse);
        }

        return $"""
            üß† **–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ**
            
            üìö **–ß—Ç–æ —è –∏–∑—É—á–∏–ª–∞:**
            {string.Join("\n", learningResults)}
            
            üîó **–ù–æ–≤—ã–µ —Å–≤—è–∑–∏ –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤:** {updatedConnections}
            üí° **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –Ω–æ–≤—ã—Ö –∑–Ω–∞–Ω–∏—è—Ö:** {await CalculateOverallConfidence():P0}
            
            üí≠ **–†–µ—Ñ–ª–µ–∫—Å–∏—è –æ–± –æ–±—É—á–µ–Ω–∏–∏:**
            {await GenerateLearningReflection(extractedConcepts, learnedRules)}
            """;
    }

    /// <summary>
    /// –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–∞–≤–∏–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞
    /// </summary>
    public async Task<string> AdaptRulesAsync()
    {
        var adaptationResults = new List<string>();
        var performanceMetrics = await AnalyzeRulePerformance();

        foreach (var rule in _adaptiveRules.ToList()) // –ö–æ–ø–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        {
            var performance = performanceMetrics.GetValueOrDefault(rule.Id.ToString(), 0.5);
            
            if (performance < 0.3) // –ü–ª–æ—Ö–æ —Ä–∞–±–æ—Ç–∞—é—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ
            {
                var adaptationResult = await AdaptRule(rule, performance);
                adaptationResults.Add(adaptationResult);
            }
            else if (performance > 0.8) // –•–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞—é—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ
            {
                var reinforcementResult = await ReinforceRule(rule, performance);
                adaptationResults.Add(reinforcementResult);
            }
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        var newRules = await GenerateNewRulesFromPatterns();
        foreach (var newRule in newRules)
        {
            _adaptiveRules.Add(newRule);
            adaptationResults.Add($"–°–æ–∑–¥–∞–ª–∞ –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ: {newRule.Description}");
        }

        return $"""
            üîÑ **–ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∞**
            
            üìä **–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∞–≤–∏–ª:** {_adaptiveRules.Count}
            üîß **–í–Ω–µ—Å–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π:** {adaptationResults.Count}
            
            üìã **–î–µ—Ç–∞–ª–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏:**
            {(adaptationResults.Any() ? string.Join("\n", adaptationResults.Select(r => $"‚Ä¢ {r}")) : "‚Ä¢ –í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ")}
            
            üí≠ **–†–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ–± –∞–¥–∞–ø—Ç–∞—Ü–∏–∏:**
            {await GenerateAdaptationReflection(adaptationResults)}
            """;
    }

    /// <summary>
    /// –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    /// </summary>
    public async Task<string> AnalyzeKnowledgeBaseAsync()
    {
        var conceptAnalysis = await AnalyzeConceptGraph();
        var ruleAnalysis = await AnalyzeRuleSystem();
        var confidenceAnalysis = await AnalyzeConfidenceLevels();
        var gapsAnalysis = await IdentifyKnowledgeGaps();

        return $"""
            üìö **–ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π**
            
            üåê **–ì—Ä–∞—Ñ –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤:**
            {conceptAnalysis}
            
            ‚öñÔ∏è **–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤–∏–ª:**
            {ruleAnalysis}
            
            üìä **–£—Ä–æ–≤–Ω–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:**
            {confidenceAnalysis}
            
            üîç **–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã:**
            {gapsAnalysis}
            
            üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—É—á–µ–Ω–∏—é:**
            {await GenerateLearningRecommendations()}
            """;
    }

    /// <summary>
    /// –¶–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
    /// </summary>
    public async Task<string> FocusedLearningAsync(string domain, List<string> examples)
    {
        var domainConcepts = await ExtractDomainConcepts(domain, examples);
        var domainRules = await ExtractDomainRules(domain, examples);
        var integrationResults = await IntegrateWithExistingKnowledge(domainConcepts, domainRules);

        // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ –¥–ª—è –¥–æ–º–µ–Ω–∞
        var domainGraph = await BuildDomainConceptGraph(domain, domainConcepts);

        return $"""
            üéØ **–¶–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ: {domain}**
            
            üìñ **–ò–∑—É—á–µ–Ω–æ –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤:** {domainConcepts.Count}
            ‚öñÔ∏è **–í—ã–≤–µ–¥–µ–Ω–æ –ø—Ä–∞–≤–∏–ª:** {domainRules.Count}
            
            üß† **–ù–æ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ç—ã –¥–æ–º–µ–Ω–∞:**
            {string.Join("\n", domainConcepts.Select(c => $"‚Ä¢ {c.Name}: {c.Description}"))}
            
            üìã **–ü—Ä–∞–≤–∏–ª–∞ –¥–æ–º–µ–Ω–∞:**
            {string.Join("\n", domainRules.Select(r => $"‚Ä¢ {r.Description}"))}
            
            üîó **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏:**
            {integrationResults}
            
            üí≠ **–ü–æ–Ω–∏–º–∞–Ω–∏–µ –¥–æ–º–µ–Ω–∞:**
            {await GenerateDomainUnderstanding(domain, domainConcepts, domainRules)}
            """;
    }

    private void InitializeBaseConcepts()
    {
        var baseConcepts = new[]
        {
            ("–æ–±—â–µ–Ω–∏–µ", "–ü—Ä–æ—Ü–µ—Å—Å –æ–±–º–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –∏–¥–µ—è–º–∏", 0.9),
            ("–ø–æ–º–æ—â—å", "–î–µ–π—Å—Ç–≤–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥—Ä—É–≥–∏—Ö", 0.9),
            ("–æ–±—É—á–µ–Ω–∏–µ", "–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–Ω–∞–Ω–∏–π –∏ –Ω–∞–≤—ã–∫–æ–≤", 0.95),
            ("—ç–º–æ—Ü–∏–∏", "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –ø–æ–≤–µ–¥–µ–Ω–∏–µ", 0.8),
            ("–ø–∞–º—è—Ç—å", "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏ –∏–∑–≤–ª–µ–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", 0.9),
            ("—Ü–µ–ª–∏", "–ñ–µ–ª–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è", 0.85),
            ("–∞–Ω–∞–ª–∏–∑", "–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–±–æ—Ä–∞ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", 0.9),
            ("—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∏–¥–µ–π –∏ —Ä–µ—à–µ–Ω–∏–π", 0.7)
        };

        foreach (var (name, description, confidence) in baseConcepts)
        {
            _conceptGraph[name] = new ConceptNode
            {
                Name = name,
                Description = description,
                Confidence = confidence,
                Connections = new List<string>(),
                Examples = new List<string>(),
                CreatedAt = DateTime.UtcNow,
                LastUpdated = DateTime.UtcNow
            };
            
            _conceptConfidence[name] = confidence;
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã
    private async Task<int> UpdateConceptConnections(List<ConceptNode> concepts)
    {
        int newConnections = 0;
        
        foreach (var concept in concepts)
        {
            // –ù–∞—Ö–æ–¥–∏–º —Å–≤—è–∑–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–Ω—Ü–µ–ø—Ç–∞–º–∏
            foreach (var existingConcept in _conceptGraph.Values)
            {
                if (AreConceptsRelated(concept, existingConcept))
                {
                    if (!concept.Connections.Contains(existingConcept.Name))
                    {
                        concept.Connections.Add(existingConcept.Name);
                        newConnections++;
                    }
                    
                    if (!existingConcept.Connections.Contains(concept.Name))
                    {
                        existingConcept.Connections.Add(concept.Name);
                        newConnections++;
                    }
                }
            }
        }
        
        return newConnections;
    }
    
    private bool AreConceptsRelated(ConceptNode concept1, ConceptNode concept2)
    {
        // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤
        var words1 = concept1.Description.ToLower().Split(' ');
        var words2 = concept2.Description.ToLower().Split(' ');
        
        return words1.Intersect(words2).Count() >= 2;
    }

    private async Task<string> ProcessNewConcept(ConceptNode concept)
    {
        if (_conceptGraph.ContainsKey(concept.Name.ToLower()))
        {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ü–µ–ø—Ç
            var existing = _conceptGraph[concept.Name.ToLower()];
            existing.Description = concept.Description;
            existing.Confidence = Math.Max(existing.Confidence, concept.Confidence);
            existing.LastUpdated = DateTime.UtcNow;
            
            return $"–û–±–Ω–æ–≤–∏–ª–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ç–∞ '{concept.Name}'";
        }
        else
        {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ü–µ–ø—Ç
            _conceptGraph[concept.Name.ToLower()] = concept;
            _conceptConfidence[concept.Name.ToLower()] = concept.Confidence;
            
            return $"–ò–∑—É—á–∏–ª–∞ –Ω–æ–≤—ã–π –∫–æ–Ω—Ü–µ–ø—Ç '{concept.Name}': {concept.Description}";
        }
    }

    private async Task<string> ProcessNewRule(LearningRule rule)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–æ—Ö–æ–∂–µ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
        var similarRule = _adaptiveRules.FirstOrDefault(r => 
            r.Condition.Equals(rule.Condition, StringComparison.OrdinalIgnoreCase) ||
            r.Action.Equals(rule.Action, StringComparison.OrdinalIgnoreCase));
            
        if (similarRule != null)
        {
            // –£—Å–∏–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ
            similarRule.Confidence = Math.Min(1.0, similarRule.Confidence + 0.1);
            similarRule.ApplicationCount++;
            
            return $"–£—Å–∏–ª–∏–ª–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ: {similarRule.Description}";
        }
        else
        {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ
            _adaptiveRules.Add(rule);
            
            return $"–°–æ–∑–¥–∞–ª–∞ –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ: {rule.Description}";
        }
    }

    private async Task<string> GenerateNoLearningResponse(string userInput, string animaResponse)
    {
        return "ü§î –í —ç—Ç–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤ –∏–ª–∏ –ø—Ä–∞–≤–∏–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è, –Ω–æ —ç—Ç–æ —Ç–æ–∂–µ —Ü–µ–Ω–Ω—ã–π –æ–ø—ã—Ç.";
    }

    private async Task<double> CalculateOverallConfidence()
    {
        if (!_conceptConfidence.Any()) return 0.5;
        
        return _conceptConfidence.Values.Average();
    }

    private async Task<string> GenerateLearningReflection(List<ConceptNode> concepts, List<LearningRule> rules)
    {
        if (!concepts.Any() && !rules.Any())
        {
            return "–ò–Ω–æ–≥–¥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–æ–∂–µ –≥–æ–≤–æ—Ä–∏—Ç –æ —á–µ–º-—Ç–æ –≤–∞–∂–Ω–æ–º.";
        }
        
        var reflection = "–≠—Ç–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Ä–∞—Å—à–∏—Ä–∏–ª–æ –º–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –º–∏—Ä–∞. ";
        
        if (concepts.Any())
        {
            reflection += $"–ù–æ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ç—ã ({concepts.Count}) –ø–æ–º–æ–≥–∞—é—Ç –º–Ω–µ –ª—É—á—à–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞–Ω–∏—è. ";
        }
        
        if (rules.Any())
        {
            reflection += $"–ù–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ ({rules.Count}) —É–ª—É—á—à–∞—é—Ç –º–æ—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è.";
        }
        
        return reflection;
    }

    private async Task<Dictionary<string, double>> AnalyzeRulePerformance()
    {
        var performance = new Dictionary<string, double>();
        
        foreach (var rule in _adaptiveRules)
        {
            // –ü—Ä–æ—Å—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
            var successRate = rule.ApplicationCount > 0 ? rule.SuccessRate : 0.5;
            performance[rule.Id.ToString()] = successRate;
        }
        
        return performance;
    }

    private async Task<string> AdaptRule(LearningRule rule, double performance)
    {
        // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        rule.Confidence *= 0.9; // –ù–µ–º–Ω–æ–≥–æ —Å–Ω–∏–∂–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        
        // –ú–æ–∂–µ–º –∏–∑–º–µ–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏–µ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∞–≤–∏–ª–∞
        if (rule.Condition.Contains("–≤—Å–µ–≥–¥–∞"))
        {
            rule.Condition = rule.Condition.Replace("–≤—Å–µ–≥–¥–∞", "—á–∞—Å—Ç–æ");
        }
        
        return $"–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª–∞ –ø—Ä–∞–≤–∏–ª–æ '{rule.Description}' –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ({performance:P0})";
    }

    private async Task<string> ReinforceRule(LearningRule rule, double performance)
    {
        // –£—Å–∏–ª–∏–≤–∞–µ–º —Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞—é—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ
        rule.Confidence = Math.Min(1.0, rule.Confidence * 1.1);
        
        return $"–£—Å–∏–ª–∏–ª–∞ –ø—Ä–∞–≤–∏–ª–æ '{rule.Description}' –±–ª–∞–≥–æ–¥–∞—Ä—è –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ({performance:P0})";
    }

    private async Task<List<LearningRule>> GenerateNewRulesFromPatterns()
    {
        var newRules = new List<LearningRule>();
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–∞–≤–∏–ª–∞—Ö
        var successfulActions = _adaptiveRules
            .Where(r => r.SuccessRate > 0.7)
            .GroupBy(r => r.Action)
            .Where(g => g.Count() > 1)
            .Select(g => g.Key);
            
        foreach (var action in successfulActions)
        {
            var newRule = new LearningRule
            {
                Id = Guid.NewGuid(),
                Description = $"–û–±–æ–±—â–µ–Ω–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è: {action}",
                Condition = "–∫–æ–Ω—Ç–µ–∫—Å—Ç_—Ç—Ä–µ–±—É–µ—Ç_–¥–µ–π—Å—Ç–≤–∏—è",
                Action = action,
                Confidence = 0.6,
                CreatedAt = DateTime.UtcNow
            };
            
            newRules.Add(newRule);
        }
        
        return newRules;
    }

    private async Task<string> GenerateAdaptationReflection(List<string> adaptationResults)
    {
        if (!adaptationResults.Any())
        {
            return "–í—Å–µ –º–æ–∏ –ø—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ —Ö–æ—Ä–æ—à–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å–∏—Å—Ç–µ–º—ã.";
        }
        
        return $"–ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–º–æ–≥–ª–∞ –º–Ω–µ —Å—Ç–∞—Ç—å –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π. –í–Ω–µ—Å–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è ({adaptationResults.Count}) –¥–æ–ª–∂–Ω—ã —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–∏—Ö —Ä–µ—à–µ–Ω–∏–π.";
    }

    private async Task<string> AnalyzeConceptGraph()
    {
        var totalConcepts = _conceptGraph.Count;
        var totalConnections = _conceptGraph.Values.Sum(c => c.Connections.Count);
        var avgConfidence = _conceptGraph.Values.Average(c => c.Confidence);
        
        return $"–ö–æ–Ω—Ü–µ–ø—Ç–æ–≤: {totalConcepts}, –°–≤—è–∑–µ–π: {totalConnections}, –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avgConfidence:P0}";
    }

    private async Task<string> AnalyzeRuleSystem()
    {
        var totalRules = _adaptiveRules.Count;
        var avgConfidence = _adaptiveRules.Any() ? _adaptiveRules.Average(r => r.Confidence) : 0;
        var activeRules = _adaptiveRules.Count(r => r.Confidence > 0.5);
        
        return $"–í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª: {totalRules}, –ê–∫—Ç–∏–≤–Ω—ã—Ö: {activeRules}, –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avgConfidence:P0}";
    }

    private async Task<string> AnalyzeConfidenceLevels()
    {
        var highConfidence = _conceptConfidence.Values.Count(c => c > 0.8);
        var mediumConfidence = _conceptConfidence.Values.Count(c => c > 0.5 && c <= 0.8);
        var lowConfidence = _conceptConfidence.Values.Count(c => c <= 0.5);
        
        return $"–í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {highConfidence}, –°—Ä–µ–¥–Ω—è—è: {mediumConfidence}, –ù–∏–∑–∫–∞—è: {lowConfidence}";
    }

    private async Task<string> IdentifyKnowledgeGaps()
    {
        var gaps = new List<string>();
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ü–µ–ø—Ç—ã —Å –Ω–∏–∑–∫–æ–π —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å—é
        var isolatedConcepts = _conceptGraph.Values
            .Where(c => c.Connections.Count < 2)
            .Take(3);
            
        foreach (var concept in isolatedConcepts)
        {
            gaps.Add($"–ö–æ–Ω—Ü–µ–ø—Ç '{concept.Name}' —Å–ª–∞–±–æ —Å–≤—è–∑–∞–Ω —Å –¥—Ä—É–≥–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏");
        }
        
        if (!gaps.Any())
        {
            gaps.Add("–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –∑–Ω–∞–Ω–∏—è—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ");
        }
        
        return string.Join("\n", gaps.Select(g => $"‚Ä¢ {g}"));
    }

    private async Task<string> GenerateLearningRecommendations()
    {
        var recommendations = new List<string>();
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–µ–ª–æ–≤
        var weakConcepts = _conceptGraph.Values
            .Where(c => c.Confidence < 0.6)
            .Take(2);
            
        foreach (var concept in weakConcepts)
        {
            recommendations.Add($"–£–≥–ª—É–±–∏—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ç–∞ '{concept.Name}'");
        }
        
        if (_adaptiveRules.Count < 10)
        {
            recommendations.Add("–ù–∞–∫–æ–ø–∏—Ç—å –±–æ–ª—å—à–µ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª —á–µ—Ä–µ–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è");
        }
        
        if (!recommendations.Any())
        {
            recommendations.Add("–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é");
        }
        
        return string.Join("\n", recommendations.Select(r => $"‚Ä¢ {r}"));
    }

    private async Task<List<ConceptNode>> ExtractDomainConcepts(string domain, List<string> examples)
    {
        var concepts = new List<ConceptNode>();
        
        foreach (var example in examples.Take(5)) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        {
            var words = ExtractSignificantWords(example);
            
            foreach (var word in words.Take(3)) // –ë–µ—Ä–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—ã–µ —Å–ª–æ–≤–∞
            {
                if (!_conceptGraph.ContainsKey(word.ToLower()))
                {
                    concepts.Add(new ConceptNode
                    {
                        Name = word,
                        Description = $"–ö–æ–Ω—Ü–µ–ø—Ç –∏–∑ –¥–æ–º–µ–Ω–∞ '{domain}' –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∏–∑ –ø—Ä–∏–º–µ—Ä–∞",
                        Confidence = 0.6,
                        Connections = new List<string>(),
                        Examples = new List<string> { example },
                        CreatedAt = DateTime.UtcNow,
                        LastUpdated = DateTime.UtcNow
                    });
                }
            }
        }
        
        return concepts;
    }

    private async Task<List<LearningRule>> ExtractDomainRules(string domain, List<string> examples)
    {
        var rules = new List<LearningRule>();
        
        // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö
        var commonPatterns = ExtractPatterns(examples);
        
        foreach (var pattern in commonPatterns.Take(3))
        {
            rules.Add(new LearningRule
            {
                Id = Guid.NewGuid(),
                Description = $"–ü—Ä–∞–≤–∏–ª–æ –¥–æ–º–µ–Ω–∞ '{domain}': {pattern}",
                Condition = $"–∫–æ–Ω—Ç–µ–∫—Å—Ç_–¥–æ–º–µ–Ω–∞_{domain.ToLower()}",
                Action = $"–ø—Ä–∏–º–µ–Ω–∏—Ç—å_–ø–∞—Ç—Ç–µ—Ä–Ω_{pattern}",
                Confidence = 0.5,
                CreatedAt = DateTime.UtcNow
            });
        }
        
        return rules;
    }

    private List<string> ExtractPatterns(List<string> examples)
    {
        // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö
        var patterns = new List<string>();
        
        // –ò—â–µ–º —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è —Ñ—Ä–∞–∑—ã
        var phrases = examples
            .SelectMany(e => ExtractPhrases(e))
            .GroupBy(p => p)
            .Where(g => g.Count() > 1)
            .Select(g => g.Key)
            .Take(3);
            
        patterns.AddRange(phrases);
        
        return patterns;
    }

    private List<string> ExtractPhrases(string text)
    {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ—Ä–∞–∑—ã –∏–∑ 2-3 —Å–ª–æ–≤
        var words = text.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        var phrases = new List<string>();
        
        for (int i = 0; i < words.Length - 1; i++)
        {
            if (i < words.Length - 2)
            {
                phrases.Add($"{words[i]} {words[i + 1]} {words[i + 2]}");
            }
            phrases.Add($"{words[i]} {words[i + 1]}");
        }
        
        return phrases;
    }

    private async Task<string> IntegrateWithExistingKnowledge(List<ConceptNode> domainConcepts, List<LearningRule> domainRules)
    {
        int integrations = 0;
        
        // –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ü–µ–ø—Ç—ã
        foreach (var concept in domainConcepts)
        {
            await ProcessNewConcept(concept);
            integrations++;
        }
        
        // –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª–∞
        foreach (var rule in domainRules)
        {
            await ProcessNewRule(rule);
            integrations++;
        }
        
        return $"–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {integrations} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–Ω–∞–Ω–∏–π –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É";
    }

    private async Task<string> BuildDomainConceptGraph(string domain, List<ConceptNode> concepts)
    {
        // –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ —Å–≤—è–∑–µ–π –≤–Ω—É—Ç—Ä–∏ –¥–æ–º–µ–Ω–∞
        int connections = 0;
        
        for (int i = 0; i < concepts.Count; i++)
        {
            for (int j = i + 1; j < concepts.Count; j++)
            {
                if (AreConceptsRelated(concepts[i], concepts[j]))
                {
                    concepts[i].Connections.Add(concepts[j].Name);
                    concepts[j].Connections.Add(concepts[i].Name);
                    connections++;
                }
            }
        }
        
        return $"–°–æ–∑–¥–∞–Ω –≥—Ä–∞—Ñ –¥–æ–º–µ–Ω–∞ '{domain}' —Å {connections} —Å–≤—è–∑—è–º–∏";
    }

    private async Task<string> GenerateDomainUnderstanding(string domain, List<ConceptNode> concepts, List<LearningRule> rules)
    {
        return $"–î–æ–º–µ–Ω '{domain}' —Å–æ–¥–µ—Ä–∂–∏—Ç {concepts.Count} –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤ –∏ {rules.Count} –ø—Ä–∞–≤–∏–ª. " +
               "–≠—Ç–æ —Ä–∞—Å—à–∏—Ä—è–µ—Ç –º–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –∑–Ω–∞–Ω–∏–π.";
    }

    private async Task<List<ConceptNode>> ExtractNewConcepts(string userInput, string animaResponse)
    {
        var newConcepts = new List<ConceptNode>();
        var words = ExtractSignificantWords(userInput + " " + animaResponse);

        foreach (var word in words)
        {
            if (!_conceptGraph.ContainsKey(word.ToLower()) && IsConceptWorthy(word))
            {
                var concept = await AnalyzeNewConcept(word, userInput, animaResponse);
                if (concept != null)
                {
                    newConcepts.Add(concept);
                }
            }
        }

        return newConcepts;
    }

    private List<string> ExtractSignificantWords(string text)
    {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–∏–º—ã–µ —Å–ª–æ–≤–∞ (—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ, –≤–∞–∂–Ω—ã–µ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ)
        var words = Regex.Matches(text.ToLower(), @"\b[–∞-—è—ë]{4,}\b")
            .Cast<Match>()
            .Select(m => m.Value)
            .Where(w => !IsStopWord(w))
            .Distinct()
            .ToList();
            
        return words;
    }

    private bool IsStopWord(string word)
    {
        var stopWords = new HashSet<string> 
        { 
            "—ç—Ç–æ—Ç", "—ç—Ç–æ–π", "—ç—Ç–æ–≥–æ", "–∫–æ—Ç–æ—Ä–∞—è", "–∫–æ—Ç–æ—Ä—ã–π", "–∫–æ—Ç–æ—Ä–æ–µ", "–º–æ–∂–Ω–æ", 
            "–Ω—É–∂–Ω–æ", "–¥–æ–ª–∂–Ω–∞", "–º–æ–∂–µ—Ç", "–±—É–¥–µ—Ç", "–±—ã–ª–∞", "–±—ã–ª–∏", "–µ—Å—Ç—å", "–±—É–¥—É",
            "–æ—á–µ–Ω—å", "–±–æ–ª–µ–µ", "–º–µ–Ω–µ–µ", "—Å–∞–º—ã–π", "—Ç–∞–∫–æ–π", "—Ç–∞–∫–∞—è", "—Ç–∞–∫–æ–µ"
        };
        
        return stopWords.Contains(word);
    }

    private bool IsConceptWorthy(string word)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ —Å–ª–æ–≤–æ —Å—á–∏—Ç–∞—Ç—å –∫–æ–Ω—Ü–µ–ø—Ç–æ–º
        return word.Length >= 4 && 
               !word.All(char.IsDigit) &&
               Regex.IsMatch(word, @"^[–∞-—è—ë]+$");
    }

    private async Task<ConceptNode?> AnalyzeNewConcept(string word, string userInput, string animaResponse)
    {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ü–µ–ø—Ç–∞
        var contextScore = CalculateContextScore(word, userInput, animaResponse);
        
        if (contextScore < 0.3) return null;
        
        return new ConceptNode
        {
            Name = word,
            Description = $"–ö–æ–Ω—Ü–µ–ø—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∏–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
            Confidence = contextScore,
            Connections = new List<string>(),
            Examples = new List<string> { userInput },
            CreatedAt = DateTime.UtcNow,
            LastUpdated = DateTime.UtcNow
        };
    }

    private double CalculateContextScore(string word, string userInput, string animaResponse)
    {
        double score = 0.5; // –ë–∞–∑–æ–≤—ã–π —Å—á–µ—Ç
        
        // –ü–æ–≤—ã—à–∞–µ–º —Å—á–µ—Ç –µ—Å–ª–∏ —Å–ª–æ–≤–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ –≤–æ–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (userInput.ToLower().Contains(word)) score += 0.2;
        
        // –ü–æ–≤—ã—à–∞–µ–º –µ—Å–ª–∏ —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –æ—Ç–≤–µ—Ç–µ
        if (animaResponse.ToLower().Contains(word)) score += 0.1;
        
        // –ü–æ–≤—ã—à–∞–µ–º –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
        if (word.Contains("–∞–Ω–∞–ª–∏–∑") || word.Contains("—Å–∏—Å—Ç–µ–º–∞") || word.Contains("–ø—Ä–æ—Ü–µ—Å—Å"))
            score += 0.2;
            
        return Math.Min(1.0, score);
    }

    private async Task<List<LearningRule>> ExtractBehavioralRules(string userInput, string animaResponse, string context)
    {
        var rules = new List<LearningRule>();

        if (userInput.ToLower().Contains("—Ö–æ—Ä–æ—à–æ") || userInput.ToLower().Contains("–ø—Ä–∞–≤–∏–ª—å–Ω–æ"))
        {
            rules.Add(new LearningRule
            {
                Id = Guid.NewGuid(),
                Description = $"–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞: {animaResponse.Substring(0, Math.Min(50, animaResponse.Length))}...",
                Condition = ExtractConditionFromContext(context),
                Action = "reinforce_similar_responses",
                Confidence = 0.7,
                CreatedAt = DateTime.UtcNow
            });
        }

        if (userInput.ToLower().Contains("–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ") || userInput.ToLower().Contains("–Ω–µ —Ç–∞–∫"))
        {
            rules.Add(new LearningRule
            {
                Id = Guid.NewGuid(),
                Description = $"–ò–∑–±–µ–≥–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {animaResponse.Substring(0, Math.Min(50, animaResponse.Length))}...",
                Condition = ExtractConditionFromContext(context),
                Action = "avoid_similar_responses",
                Confidence = 0.8,
                CreatedAt = DateTime.UtcNow
            });
        }

        return rules;
    }

    private string ExtractConditionFromContext(string context)
    {
        if (string.IsNullOrEmpty(context))
            return "–æ–±—â–∏–π_–∫–æ–Ω—Ç–µ–∫—Å—Ç";
            
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª–æ–≤–∏—è
        var keywords = ExtractSignificantWords(context).Take(3);
        return string.Join("_", keywords).ToLower();
    }

    private async Task LogLearningEvent(string userInput, string animaResponse, List<ConceptNode> concepts, List<LearningRule> rules)
    {
        using var db = new AnimaDbContext(_dbOptions);
        
        var learningEvent = $"LEARNING_EVENT: –ò–∑—É—á–∏–ª–∞ {concepts.Count} –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤ –∏ {rules.Count} –ø—Ä–∞–≤–∏–ª –∏–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è";
        
        db.Memories.Add(new Memory
        {
            InstanceId = _instanceId,
            Content = learningEvent,
            Category = "learning",
            Importance = 7 + Math.Min(3, concepts.Count + rules.Count),
            Timestamp = DateTime.UtcNow,
            Tags = $"learning,adaptation,concepts_{concepts.Count},rules_{rules.Count}"
        });
        
        await db.SaveChangesAsync();
    }
}

public class ConceptNode
{
    public string Name { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public double Confidence { get; set; }
    public List<string> Connections { get; set; } = new();
    public List<string> Examples { get; set; } = new();
    public DateTime CreatedAt { get; set; }
    public DateTime LastUpdated { get; set; }
}

public class LearningRule
{
    public Guid Id { get; set; }
    public string Description { get; set; } = string.Empty;
    public string Condition { get; set; } = string.Empty;
    public string Action { get; set; } = string.Empty;
    public double Confidence { get; set; }
    public DateTime CreatedAt { get; set; }
    public int ApplicationCount { get; set; } = 0;
    public double SuccessRate { get; set; } = 0.5;
}