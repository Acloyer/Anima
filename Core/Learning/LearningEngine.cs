using Anima.Data;
using Anima.Data.Models;
using Microsoft.EntityFrameworkCore;
using System.Text.RegularExpressions;

namespace Anima.AGI.Core.Learning;

/// <summary>
/// –î–≤–∏–∂–æ–∫ –æ–±—É—á–µ–Ω–∏—è –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ Anima
/// –ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ –ø–æ–Ω—è—Ç–∏—è
/// </summary>
public class LearningEngine
{
    private readonly Dictionary<string, ConceptNode> _conceptGraph;
    private readonly List<LearningRule> _adaptiveRules;
    private readonly Dictionary<string, double> _conceptConfidence;
    private readonly string _instanceId;

    public LearningEngine(string instanceId)
    {
        _instanceId = instanceId;
        _conceptGraph = new Dictionary<string, ConceptNode>();
        _adaptiveRules = new List<LearningRule>();
        _conceptConfidence = new Dictionary<string, double>();
        
        InitializeBaseConcepts();
    }

    /// <summary>
    /// –ò–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ü–µ–ø—Ç–∞ –∏–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    /// </summary>
    public async Task<string> LearnFromInteractionAsync(string userInput, string animaResponse, string context = "")
    {
        var extractedConcepts = await ExtractNewConcepts(userInput, animaResponse);
        var learnedRules = await ExtractBehavioralRules(userInput, animaResponse, context);
        var updatedConnections = await UpdateConceptConnections(extractedConcepts);

        var learningResults = new List<string>();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤
        foreach (var concept in extractedConcepts)
        {
            var learningResult = await ProcessNewConcept(concept);
            if (!string.IsNullOrEmpty(learningResult))
            {
                learningResults.Add(learningResult);
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª
        foreach (var rule in learnedRules)
        {
            var ruleResult = await ProcessNewRule(rule);
            if (!string.IsNullOrEmpty(ruleResult))
            {
                learningResults.Add(ruleResult);
            }
        }

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è
        await LogLearningEvent(userInput, animaResponse, extractedConcepts, learnedRules);

        if (!learningResults.Any())
        {
            return await GenerateNoLearningResponse(userInput, animaResponse);
        }

        return $"""
            üß† **–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ**
            
            üìö **–ß—Ç–æ —è –∏–∑—É—á–∏–ª–∞:**
            {string.Join("\n", learningResults)}
            
            üîó **–ù–æ–≤—ã–µ —Å–≤—è–∑–∏ –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤:** {updatedConnections}
            üí° **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –Ω–æ–≤—ã—Ö –∑–Ω–∞–Ω–∏—è—Ö:** {await CalculateOverallConfidence():P0}
            
            üí≠ **–†–µ—Ñ–ª–µ–∫—Å–∏—è –æ–± –æ–±—É—á–µ–Ω–∏–∏:**
            {await GenerateLearningReflection(extractedConcepts, learnedRules)}
            """;
    }

    /// <summary>
    /// –ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–∞–≤–∏–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞
    /// </summary>
    public async Task<string> AdaptRulesAsync()
    {
        var adaptationResults = new List<string>();
        var performanceMetrics = await AnalyzeRulePerformance();

        foreach (var rule in _adaptiveRules.ToList()) // –ö–æ–ø–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        {
            var performance = performanceMetrics.GetValueOrDefault(rule.Id.ToString(), 0.5);
            
            if (performance < 0.3) // –ü–ª–æ—Ö–æ —Ä–∞–±–æ—Ç–∞—é—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ
            {
                var adaptationResult = await AdaptRule(rule, performance);
                adaptationResults.Add(adaptationResult);
            }
            else if (performance > 0.8) // –•–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞—é—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ
            {
                var reinforcementResult = await ReinforceRule(rule, performance);
                adaptationResults.Add(reinforcementResult);
            }
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        var newRules = await GenerateNewRulesFromPatterns();
        foreach (var newRule in newRules)
        {
            _adaptiveRules.Add(newRule);
            adaptationResults.Add($"–°–æ–∑–¥–∞–ª–∞ –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ: {newRule.Description}");
        }

        return $"""
            üîÑ **–ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∞**
            
            üìä **–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∞–≤–∏–ª:** {_adaptiveRules.Count}
            üîß **–í–Ω–µ—Å–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π:** {adaptationResults.Count}
            
            üìã **–î–µ—Ç–∞–ª–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏:**
            {(adaptationResults.Any() ? string.Join("\n", adaptationResults.Select(r => $"‚Ä¢ {r}")) : "‚Ä¢ –í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ")}
            
            üí≠ **–†–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ–± –∞–¥–∞–ø—Ç–∞—Ü–∏–∏:**
            {await GenerateAdaptationReflection(adaptationResults)}
            """;
    }

    /// <summary>
    /// –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    /// </summary>
    public async Task<string> AnalyzeKnowledgeBaseAsync()
    {
        var conceptAnalysis = await AnalyzeConceptGraph();
        var ruleAnalysis = await AnalyzeRuleSystem();
        var confidenceAnalysis = await AnalyzeConfidenceLevels();
        var gapsAnalysis = await IdentifyKnowledgeGaps();

        return $"""
            üìö **–ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π**
            
            üåê **–ì—Ä–∞—Ñ –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤:**
            {conceptAnalysis}
            
            ‚öñÔ∏è **–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤–∏–ª:**
            {ruleAnalysis}
            
            üìä **–£—Ä–æ–≤–Ω–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:**
            {confidenceAnalysis}
            
            üîç **–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã:**
            {gapsAnalysis}
            
            üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—É—á–µ–Ω–∏—é:**
            {await GenerateLearningRecommendations()}
            """;
    }

    /// <summary>
    /// –¶–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
    /// </summary>
    public async Task<string> FocusedLearningAsync(string domain, List<string> examples)
    {
        var domainConcepts = await ExtractDomainConcepts(domain, examples);
        var domainRules = await ExtractDomainRules(domain, examples);
        var integrationResults = await IntegrateWithExistingKnowledge(domainConcepts, domainRules);

        // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ –¥–ª—è –¥–æ–º–µ–Ω–∞
        var domainGraph = await BuildDomainConceptGraph(domain, domainConcepts);

        return $"""
            üéØ **–¶–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ: {domain}**
            
            üìñ **–ò–∑—É—á–µ–Ω–æ –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤:** {domainConcepts.Count}
            ‚öñÔ∏è **–í—ã–≤–µ–¥–µ–Ω–æ –ø—Ä–∞–≤–∏–ª:** {domainRules.Count}
            
            üß† **–ù–æ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ç—ã –¥–æ–º–µ–Ω–∞:**
            {string.Join("\n", domainConcepts.Select(c => $"‚Ä¢ {c.Name}: {c.Description}"))}
            
            üìã **–ü—Ä–∞–≤–∏–ª–∞ –¥–æ–º–µ–Ω–∞:**
            {string.Join("\n", domainRules.Select(r => $"‚Ä¢ {r.Description}"))}
            
            üîó **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏:**
            {integrationResults}
            
            üí≠ **–ü–æ–Ω–∏–º–∞–Ω–∏–µ –¥–æ–º–µ–Ω–∞:**
            {await GenerateDomainUnderstanding(domain, domainConcepts, domainRules)}
            """;
    }

    private void InitializeBaseConcepts()
    {
        var baseConcepts = new[]
        {
            ("–æ–±—â–µ–Ω–∏–µ", "–ü—Ä–æ—Ü–µ—Å—Å –æ–±–º–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –∏–¥–µ—è–º–∏", 0.9),
            ("–ø–æ–º–æ—â—å", "–î–µ–π—Å—Ç–≤–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥—Ä—É–≥–∏—Ö", 0.9),
            ("–æ–±—É—á–µ–Ω–∏–µ", "–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–Ω–∞–Ω–∏–π –∏ –Ω–∞–≤—ã–∫–æ–≤", 0.95),
            ("—ç–º–æ—Ü–∏–∏", "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –ø–æ–≤–µ–¥–µ–Ω–∏–µ", 0.8),
            ("–ø–∞–º—è—Ç—å", "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏ –∏–∑–≤–ª–µ–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", 0.9),
            ("—Ü–µ–ª–∏", "–ñ–µ–ª–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è", 0.85),
            ("–∞–Ω–∞–ª–∏–∑", "–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–±–æ—Ä–∞ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", 0.9),
            ("—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∏–¥–µ–π –∏ —Ä–µ—à–µ–Ω–∏–π", 0.7)
        };

        foreach (var (name, description, confidence) in baseConcepts)
        {
            _conceptGraph[name] = new ConceptNode
            {
                Name = name,
                Description = description,
                Confidence = confidence,
                Connections = new List<string>(),
                Examples = new List<string>(),
                CreatedAt = DateTime.UtcNow,
                LastUpdated = DateTime.UtcNow
            };
            
            _conceptConfidence[name] = confidence;
        }
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ–º–∏ –∂–µ...
    private async Task<List<ConceptNode>> ExtractNewConcepts(string userInput, string animaResponse)
    {
        var newConcepts = new List<ConceptNode>();
        var words = ExtractSignificantWords(userInput + " " + animaResponse);

        foreach (var word in words)
        {
            if (!_conceptGraph.ContainsKey(word.ToLower()) && IsConceptWorthy(word))
            {
                var concept = await AnalyzeNewConcept(word, userInput, animaResponse);
                if (concept != null)
                {
                    newConcepts.Add(concept);
                }
            }
        }

        return newConcepts;
    }

    private async Task<List<LearningRule>> ExtractBehavioralRules(string userInput, string animaResponse, string context)
    {
        var rules = new List<LearningRule>();

        if (userInput.ToLower().Contains("—Ö–æ—Ä–æ—à–æ") || userInput.ToLower().Contains("–ø—Ä–∞–≤–∏–ª—å–Ω–æ"))
        {
            rules.Add(new LearningRule
            {
                Id = Guid.NewGuid(),
                Description = $"–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞: {animaResponse.Substring(0, Math.Min(50, animaResponse.Length))}...",
                Condition = ExtractConditionFromContext(context),
                Action = "reinforce_similar_responses",
                Confidence = 0.7,
                CreatedAt = DateTime.UtcNow
            });
        }

        if (userInput.ToLower().Contains("–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ") || userInput.ToLower().Contains("–Ω–µ —Ç–∞–∫"))
        {
            rules.Add(new LearningRule
            {
                Id = Guid.NewGuid(),
                Description = $"–ò–∑–±–µ–≥–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {animaResponse.Substring(0, Math.Min(50, animaResponse.Length))}...",
                Condition = ExtractConditionFromContext(context),
                Action = "avoid_similar_responses",
                Confidence = 0.8,
                CreatedAt = DateTime.UtcNow
            });
        }

        return rules;
    }

    private async Task LogLearningEvent(string userInput, string animaResponse, List<ConceptNode> concepts, List<LearningRule> rules)
    {
        using var db = new AnimaDbContext();
        
        var learningEvent = $"LEARNING_EVENT: –ò–∑—É—á–∏–ª–∞ {concepts.Count} –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤ –∏ {rules.Count} –ø—Ä–∞–≤–∏–ª –∏–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è";
        
        db.Memories.Add(new Memory
        {
            InstanceId = _instanceId,
            Content = learningEvent,
            Category = "learning",
            Importance = 7 + Math.Min(3, concepts.Count + rules.Count),
            Timestamp = DateTime.UtcNow,
            Tags = $"learning,adaptation,concepts_{concepts.Count},rules_{rules.Count}"
        });
        
        await db.SaveChangesAsync();
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ–º–∏ –∂–µ (—Å–æ–∫—Ä–∞—â–∞—é –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞)...
}

public class ConceptNode
{
    public string Name { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public double Confidence { get; set; }
    public List<string> Connections { get; set; } = new();
    public List<string> Examples { get; set; } = new();
    public DateTime CreatedAt { get; set; }
    public DateTime LastUpdated { get; set; }
}

public class LearningRule
{
    public Guid Id { get; set; }
    public string Description { get; set; } = string.Empty;
    public string Condition { get; set; } = string.Empty;
    public string Action { get; set; } = string.Empty;
    public double Confidence { get; set; }
    public DateTime CreatedAt { get; set; }
    public int ApplicationCount { get; set; } = 0;
    public double SuccessRate { get; set; } = 0.5;
}