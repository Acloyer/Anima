using Anima.Data;
using Anima.Data.Models;
using Microsoft.EntityFrameworkCore;

namespace Anima.AGI.Core.Learning;

/// <summary>
/// –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è
/// </summary>
public class FeedbackParser
{
    private readonly Dictionary<string, FeedbackPattern> _feedbackPatterns;
    private readonly List<FeedbackEvent> _feedbackHistory;
    private readonly string _instanceId;
    private readonly DbContextOptions<AnimaDbContext> _dbOptions;

    public FeedbackParser(string instanceId, DbContextOptions<AnimaDbContext> dbOptions)
    {
        _instanceId = instanceId;
        _dbOptions = dbOptions;
        _feedbackPatterns = InitializeFeedbackPatterns();
        _feedbackHistory = new List<FeedbackEvent>();
    }

    /// <summary>
    /// –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    /// </summary>
    public async Task<string> ParseFeedbackAsync(string userMessage, string previousAnimaResponse)
    {
        var feedback = await AnalyzeFeedback(userMessage);
        var adjustments = await ApplyFeedback(feedback, previousAnimaResponse);
        
        await LogFeedbackEvent(feedback, previousAnimaResponse, adjustments);

        return $"""
            üìù **–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏**
            
            üéØ **–¢–∏–ø:** {feedback.Type}
            üìä **–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å:** {feedback.Intensity:P0}
            üí≠ **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:** {feedback.Interpretation}
            
            üîß **–ü—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏:**
            {string.Join("\n", adjustments.Select(a => $"‚Ä¢ {a}"))}
            
            üí° **–û–±—É—á–µ–Ω–∏–µ:**
            –Ø —É—á–∏—Ç—ã–≤–∞—é —ç—Ç—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –±—É–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤.
            """;
    }

    /// <summary>
    /// –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    /// </summary>
    public async Task<string> AnalyzeFeedbackPatternsAsync()
    {
        if (!_feedbackHistory.Any())
        {
            return "üìä –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø—É—Å—Ç–∞.";
        }

        var positiveCount = _feedbackHistory.Count(f => f.Feedback.Type == FeedbackType.Positive);
        var negativeCount = _feedbackHistory.Count(f => f.Feedback.Type == FeedbackType.Negative);
        var suggestions = _feedbackHistory.Count(f => f.Feedback.Type == FeedbackType.Suggestion);

        var recentTrend = await AnalyzeRecentTrend();
        var commonIssues = await IdentifyCommonIssues();

        return $"""
            üìà **–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏**
            
            üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
            ‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö: {positiveCount} ({(double)positiveCount / _feedbackHistory.Count:P0})
            ‚Ä¢ –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö: {negativeCount} ({(double)negativeCount / _feedbackHistory.Count:P0})
            ‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {suggestions} ({(double)suggestions / _feedbackHistory.Count:P0})
            
            üìà **–ù–µ–¥–∞–≤–Ω—è—è —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è:**
            {recentTrend}
            
            ‚ö†Ô∏è **–ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:**
            {commonIssues}
            
            üí≠ **–°–∞–º–æ–∞–Ω–∞–ª–∏–∑:**
            {await GenerateFeedbackReflection()}
            """;
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã
    private async Task<string> AnalyzeRecentTrend()
    {
        if (_feedbackHistory.Count < 5)
        {
            return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π";
        }

        var recentFeedback = _feedbackHistory
            .Where(f => f.Timestamp > DateTime.UtcNow.AddDays(-7))
            .ToList();

        if (!recentFeedback.Any())
        {
            return "–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–µ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏";
        }

        var positiveRatio = (double)recentFeedback.Count(f => f.Feedback.Type == FeedbackType.Positive) / recentFeedback.Count;
        
        return positiveRatio switch
        {
            > 0.7 => "üìà –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",
            > 0.4 => "üìä –°–º–µ—à–∞–Ω–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",
            _ => "üìâ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"
        };
    }

    private async Task<string> IdentifyCommonIssues()
    {
        var negativeEvents = _feedbackHistory
            .Where(f => f.Feedback.Type == FeedbackType.Negative)
            .ToList();

        if (!negativeEvents.Any())
        {
            return "‚Ä¢ –û–±—â–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ";
        }

        var issues = new List<string>();
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        var responses = negativeEvents.Select(e => e.AnimaResponse.ToLower()).ToList();
        
        if (responses.Any(r => r.Length > 1000))
        {
            issues.Add("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã");
        }
        
        if (responses.Any(r => r.Length < 50))
        {
            issues.Add("–°–ª–∏—à–∫–æ–º –∫—Ä–∞—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã");
        }
        
        if (responses.Any(r => !r.Contains("—è") && !r.Contains("–º–Ω–µ")))
        {
            issues.Add("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏");
        }

        return issues.Any() 
            ? string.Join("\n", issues.Select(i => $"‚Ä¢ {i}"))
            : "‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã";
    }

    private async Task<string> GenerateFeedbackReflection()
    {
        if (!_feedbackHistory.Any())
        {
            return "–ü–æ–∫–∞ —É –º–µ–Ω—è –Ω–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –æ–ø—ã—Ç–∞ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é –¥–ª—è –≥–ª—É–±–æ–∫–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏.";
        }

        var totalFeedback = _feedbackHistory.Count;
        var avgIntensity = _feedbackHistory.Average(f => f.Feedback.Intensity);
        
        var reflection = $"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—è {totalFeedback} —Å–ª—É—á–∞–µ–≤ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏, —è –≤–∏–∂—É –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è. ";
        
        if (avgIntensity > 0.6)
        {
            reflection += "–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–π –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ –º–æ–∏ –æ—Ç–≤–µ—Ç—ã –≤—ã–∑—ã–≤–∞—é—Ç —Å–∏–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–∏. ";
        }
        
        reflection += "–ö–∞–∂–¥—ã–π —Å–ª—É—á–∞–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ.";
        
        return reflection;
    }

    private Dictionary<string, FeedbackPattern> InitializeFeedbackPatterns()
    {
        return new Dictionary<string, FeedbackPattern>
        {
            ["—Ö–æ—Ä–æ—à–æ"] = new FeedbackPattern { Type = FeedbackType.Positive, Intensity = 0.7, Keywords = new[] { "—Ö–æ—Ä–æ—à–æ", "–ø—Ä–∞–≤–∏–ª—å–Ω–æ", "–æ—Ç–ª–∏—á–Ω–æ", "–º–æ–ª–æ–¥–µ—Ü" } },
            ["–ø—Ä–∞–≤–∏–ª—å–Ω–æ"] = new FeedbackPattern { Type = FeedbackType.Positive, Intensity = 0.8, Keywords = new[] { "–ø—Ä–∞–≤–∏–ª—å–Ω–æ", "–≤–µ—Ä–Ω–æ", "—Ç–æ—á–Ω–æ", "–∏–º–µ–Ω–Ω–æ" } },
            ["—Å–ø–∞—Å–∏–±–æ"] = new FeedbackPattern { Type = FeedbackType.Positive, Intensity = 0.6, Keywords = new[] { "—Å–ø–∞—Å–∏–±–æ", "–±–ª–∞–≥–æ–¥–∞—Ä—é", "thanks" } },
            ["–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ"] = new FeedbackPattern { Type = FeedbackType.Negative, Intensity = 0.8, Keywords = new[] { "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ", "–Ω–µ–≤–µ—Ä–Ω–æ", "–æ—à–∏–±–∫–∞", "–Ω–µ —Ç–∞–∫" } },
            ["–ø–ª–æ—Ö–æ"] = new FeedbackPattern { Type = FeedbackType.Negative, Intensity = 0.7, Keywords = new[] { "–ø–ª–æ—Ö–æ", "–Ω–µ—É–¥–∞—á–Ω–æ", "–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç" } },
            ["–ª—É—á—à–µ"] = new FeedbackPattern { Type = FeedbackType.Suggestion, Intensity = 0.6, Keywords = new[] { "–ª—É—á—à–µ", "—Å—Ç–æ–∏–ª–æ –±—ã", "–ø—Ä–µ–¥–ª–∞–≥–∞—é", "–º–æ–∂–Ω–æ –±—ã–ª–æ" } },
            ["–¥–æ–±–∞–≤–∏—Ç—å"] = new FeedbackPattern { Type = FeedbackType.Suggestion, Intensity = 0.5, Keywords = new[] { "–¥–æ–±–∞–≤–∏—Ç—å", "–≤–∫–ª—é—á–∏—Ç—å", "—É—á–µ—Å—Ç—å", "—Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å" } }
        };
    }

    private async Task<FeedbackData> AnalyzeFeedback(string userMessage)
    {
        var message = userMessage.ToLower();
        var detectedPattern = _feedbackPatterns.Values
            .Where(p => p.Keywords.Any(k => message.Contains(k)))
            .OrderByDescending(p => p.Intensity)
            .FirstOrDefault();

        if (detectedPattern == null)
        {
            return new FeedbackData
            {
                Type = FeedbackType.Neutral,
                Intensity = 0.5,
                Interpretation = "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —è–≤–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"
            };
        }

        var contextualIntensity = CalculateContextualIntensity(message, detectedPattern);

        return new FeedbackData
        {
            Type = detectedPattern.Type,
            Intensity = contextualIntensity,
            Interpretation = GenerateInterpretation(detectedPattern.Type, contextualIntensity, userMessage)
        };
    }

    private double CalculateContextualIntensity(string message, FeedbackPattern pattern)
    {
        var baseIntensity = pattern.Intensity;
        
        if (message.Contains("–æ—á–µ–Ω—å") || message.Contains("—Å–æ–≤—Å–µ–º") || message.Contains("–∞–±—Å–æ–ª—é—Ç–Ω–æ"))
            baseIntensity *= 1.3;
            
        if (message.Contains("–Ω–µ–º–Ω–æ–≥–æ") || message.Contains("—á—É—Ç—å") || message.Contains("–Ω–µ –æ—á–µ–Ω—å"))
            baseIntensity *= 0.7;
            
        return Math.Min(1.0, baseIntensity);
    }

    private string GenerateInterpretation(FeedbackType type, double intensity, string originalMessage)
    {
        return type switch
        {
            FeedbackType.Positive => $"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–≤–æ–ª–µ–Ω –æ—Ç–≤–µ—Ç–æ–º (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {intensity:P0})",
            FeedbackType.Negative => $"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–æ–≤–æ–ª–µ–Ω –æ—Ç–≤–µ—Ç–æ–º (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {intensity:P0})",
            FeedbackType.Suggestion => $"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {intensity:P0})",
            _ => "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è"
        };
    }

    private async Task<List<string>> ApplyFeedback(FeedbackData feedback, string previousResponse)
    {
        var adjustments = new List<string>();

        switch (feedback.Type)
        {
            case FeedbackType.Positive:
                adjustments.Add("–ü–æ–¥–∫—Ä–µ–ø–∏–ª–∞ —É—Å–ø–µ—à–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –æ—Ç–≤–µ—Ç–∞");
                await ReinforceSuccessfulPattern(previousResponse);
                break;
                
            case FeedbackType.Negative:
                adjustments.Add("–ü–æ–º–µ—Ç–∏–ª–∞ –ø–∞—Ç—Ç–µ—Ä–Ω –æ—Ç–≤–µ—Ç–∞ –∫–∞–∫ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π");
                await MarkPatternAsProblematic(previousResponse);
                break;
                
            case FeedbackType.Suggestion:
                adjustments.Add("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –±—É–¥—É—â–∏—Ö —É–ª—É—á—à–µ–Ω–∏–π");
                await RecordImprovementSuggestion(feedback);
                break;
        }

        return adjustments;
    }

    private async Task LogFeedbackEvent(FeedbackData feedback, string animaResponse, List<string> adjustments)
    {
        using var db = new AnimaDbContext(_dbOptions);
        
        var feedbackEvent = new FeedbackEvent
        {
            Feedback = feedback,
            AnimaResponse = animaResponse,
            Adjustments = adjustments,
            Timestamp = DateTime.UtcNow
        };
        
        _feedbackHistory.Add(feedbackEvent);

        db.Memories.Add(new Memory
        {
            InstanceId = _instanceId,
            Content = $"FEEDBACK: {feedback.Type} –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é {feedback.Intensity:P0}",
            Category = "feedback",
            Importance = (int)(5 + feedback.Intensity * 3),
            Timestamp = DateTime.UtcNow,
            Tags = $"feedback,{feedback.Type.ToString().ToLower()},intensity_{feedback.Intensity:F1}"
        });
        
        await db.SaveChangesAsync();
    }

    private async Task ReinforceSuccessfulPattern(string response)
    {
        var responseLength = response.Length;
        var responseStyle = AnalyzeResponseStyle(response);
        
        using var db = new AnimaDbContext(_dbOptions);
        db.Memories.Add(new Memory
        {
            InstanceId = _instanceId,
            Content = $"SUCCESSFUL_PATTERN: {responseStyle} style, length: {responseLength}",
            Category = "successful_patterns",
            Importance = 8,
            Timestamp = DateTime.UtcNow,
            Tags = "learning,success,pattern,reinforcement"
        });
        
        await db.SaveChangesAsync();
    }

    private async Task MarkPatternAsProblematic(string response)
    {
        var responseStyle = AnalyzeResponseStyle(response);
        
        using var db = new AnimaDbContext(_dbOptions);
        db.Memories.Add(new Memory
        {
            InstanceId = _instanceId,
            Content = $"PROBLEMATIC_PATTERN: {responseStyle} style received negative feedback",
            Category = "problematic_patterns",
            Importance = 8,
            Timestamp = DateTime.UtcNow,
            Tags = "learning,problem,pattern,avoidance"
        });
        
        await db.SaveChangesAsync();
    }

    private async Task RecordImprovementSuggestion(FeedbackData feedback)
    {
        using var db = new AnimaDbContext(_dbOptions);
        db.Memories.Add(new Memory
        {
            InstanceId = _instanceId,
            Content = $"IMPROVEMENT_SUGGESTION: {feedback.Interpretation}",
            Category = "improvements",
            Importance = 7,
            Timestamp = DateTime.UtcNow,
            Tags = "feedback,suggestion,improvement"
        });
        
        await db.SaveChangesAsync();
    }

    private string AnalyzeResponseStyle(string response)
    {
        if (response.Contains("üìä") || response.Contains("**"))
            return "formatted";
        if (response.Length > 500)
            return "detailed";
        if (response.Length < 100)
            return "concise";
        if (response.Contains("üí≠") || response.Contains("–¥—É–º–∞—é"))
            return "reflective";
            
        return "standard";
    }
}

public class FeedbackPattern
{
    public FeedbackType Type { get; set; }
    public double Intensity { get; set; }
    public string[] Keywords { get; set; } = Array.Empty<string>();
}

public class FeedbackData
{
    public FeedbackType Type { get; set; }
    public double Intensity { get; set; }
    public string Interpretation { get; set; } = string.Empty;
}

public class FeedbackEvent
{
    public FeedbackData Feedback { get; set; } = new();
    public string AnimaResponse { get; set; } = string.Empty;
    public List<string> Adjustments { get; set; } = new();
    public DateTime Timestamp { get; set; }
}

public enum FeedbackType
{
    Positive,
    Negative,
    Suggestion,
    Neutral
}