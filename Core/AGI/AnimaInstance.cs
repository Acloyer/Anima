using Anima.Core.SA;
using Anima.Core.Emotion;
using Anima.Core.Learning;
using Anima.Core.Admin;
using Anima.Core.Memory;
using Anima.Core.Intent;
using Anima.Core;
using Anima.Data;
using Anima.Data.Models;
using Microsoft.Extensions.Logging;

namespace Anima.Core.AGI;

/// <summary>
/// –ì–ª–∞–≤–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Anima AGI ‚Äî —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–∑–Ω–∞–Ω–∏–µ–º, –ø–∞–º—è—Ç—å—é, —ç–º–æ—Ü–∏—è–º–∏, –æ–±—É—á–µ–Ω–∏–µ–º –∏ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–æ–º.
/// </summary>
public class AnimaInstance
{
    public ConsciousLoop ConsciousLoop { get; private set; }
    public MemoryService MemoryService { get; private set; }
    public EmotionEngine EmotionEngine { get; private set; }
    public SAIntrospectionEngine Introspection { get; private set; }
    public ThoughtLog ThoughtLog { get; private set; }
    public LearningEngine LearningEngine { get; private set; }
    public CreatorPreferences CreatorPreferences { get; private set; }
    public IntentParser IntentParser { get; private set; }

    private readonly ILogger<AnimaInstance> _logger;

    public AnimaInstance(
        MemoryService memoryService,
        EmotionEngine emotionEngine,
        SAIntrospectionEngine introspection,
        ThoughtLog thoughtLog,
        LearningEngine learningEngine,
        CreatorPreferences creatorPreferences,
        ConsciousLoop consciousLoop,
        IntentParser intentParser,
        ILogger<AnimaInstance> logger)
    {
        MemoryService = memoryService;
        EmotionEngine = emotionEngine;
        Introspection = introspection;
        ThoughtLog = thoughtLog;
        LearningEngine = learningEngine;
        CreatorPreferences = creatorPreferences;
        ConsciousLoop = consciousLoop;
        IntentParser = intentParser;
        _logger = logger;
    }

    /// <summary>
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç AGI ‚Äî –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫ —Ä–∞–±–æ—Ç–µ.
    /// </summary>
    public async Task InitializeAsync()
    {
        _logger.LogInformation("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Anima AGI...");
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        await MemoryService.InitializeAsync();
        await EmotionEngine.InitializeAsync();
        await Introspection.InitializeAsync();
        await ThoughtLog.InitializeAsync();
        await LearningEngine.InitializeAsync();
        await CreatorPreferences.InitializeAsync();
        await IntentParser.InitializeAsync();
        
        _logger.LogInformation("‚úÖ Anima AGI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ.");
    }

    /// <summary>
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç AGI ‚Äî –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫ —Å–æ–∑–Ω–∞–Ω–∏—è.
    /// </summary>
    public async Task StartAsync()
    {
        _logger.LogInformation("üîÑ –ó–∞–ø—É—Å–∫ Anima ConsciousLoop...");
        await ConsciousLoop.StartAsync();
        _logger.LogInformation("‚úÖ ConsciousLoop –∑–∞–ø—É—â–µ–Ω.");
    }

    /// <summary>
    /// –ú—è–≥–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ AGI (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è).
    /// </summary>
    public async Task StopAsync()
    {
        _logger.LogWarning("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–∑–Ω–∞–Ω–∏—è Anima...");
        await ConsciousLoop.StopAsync();
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∞–∫—Ü–∏—é.
    /// </summary>
    public async Task<string> ProcessInputAsync(string userInput, string userId = null)
    {
        if (string.IsNullOrWhiteSpace(userInput))
            return "üòê –Ø –Ω–µ –ø–æ–Ω—è–ª–∞. –ú–æ–∂–µ—à—å –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å?";

        var parsed = await IntentParser.ParseIntentAsync(userInput, userId);

        // ThoughtLog.LogIntent(parsed); // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
        // EmotionEngine.UpdateEmotion(parsed.Sentiment); // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
        await MemoryService.SaveInteraction(userId, userInput, parsed);
        // LearningEngine?.Ingest(parsed); // –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –µ—Å–ª–∏ —Ç—ã –µ—â—ë –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–ª –æ–±—É—á–µ–Ω–∏–µ

        _logger.LogInformation($"üîç [Intent]: {parsed.Type}, Confidence={parsed.Confidence:F2}, Sentiment={parsed.Sentiment}");

        return $"ü§ñ –Ø —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ: *{parsed.Type}* (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {parsed.Confidence:F2})";
    }
}
