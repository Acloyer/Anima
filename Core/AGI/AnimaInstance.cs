using Anima.Core.SA;
using Anima.Core.Emotion;
using Anima.Core.Learning;
using Anima.Core.Admin;
using Anima.Core.Memory;
using Anima.Core.Intent;
using Anima.Core;
using Anima.Data;
using Anima.Data.Models;
using Microsoft.Extensions.Logging;

namespace Anima.Core.AGI;

/// <summary>
/// –ì–ª–∞–≤–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Anima AGI ‚Äî —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–∑–Ω–∞–Ω–∏–µ–º, –ø–∞–º—è—Ç—å—é, —ç–º–æ—Ü–∏—è–º–∏, –æ–±—É—á–µ–Ω–∏–µ–º –∏ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–æ–º.
/// </summary>
public class AnimaInstance
{
    public ConsciousLoop ConsciousLoop { get; private set; }
    public MemoryService MemoryService { get; private set; }
    public EmotionEngine EmotionEngine { get; private set; }
    public SAIntrospectionEngine Introspection { get; private set; }
    public ThoughtLog ThoughtLog { get; private set; }
    public LearningEngine LearningEngine { get; private set; }
    public CreatorPreferences CreatorPreferences { get; private set; }
    public IntentParser IntentParser { get; private set; }
    public ThoughtGenerator ThoughtGenerator { get; private set; }
    public InternalMonologueEngine InternalMonologue { get; private set; }
    public EmotionDefinitionService EmotionDefinitionService { get; private set; }

    private readonly ILogger<AnimaInstance> _logger;

    public AnimaInstance(
        MemoryService memoryService,
        EmotionEngine emotionEngine,
        SAIntrospectionEngine introspection,
        ThoughtLog thoughtLog,
        LearningEngine learningEngine,
        CreatorPreferences creatorPreferences,
        ConsciousLoop consciousLoop,
        IntentParser intentParser,
        ThoughtGenerator thoughtGenerator,
        InternalMonologueEngine internalMonologue,
        EmotionDefinitionService emotionDefinitionService,
        ILogger<AnimaInstance> logger)
    {
        MemoryService = memoryService;
        EmotionEngine = emotionEngine;
        Introspection = introspection;
        ThoughtLog = thoughtLog;
        LearningEngine = learningEngine;
        CreatorPreferences = creatorPreferences;
        ConsciousLoop = consciousLoop;
        IntentParser = intentParser;
        ThoughtGenerator = thoughtGenerator;
        InternalMonologue = internalMonologue;
        EmotionDefinitionService = emotionDefinitionService;
        _logger = logger;
    }

    /// <summary>
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç AGI ‚Äî –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫ —Ä–∞–±–æ—Ç–µ.
    /// </summary>
    public async Task InitializeAsync()
    {
        _logger.LogInformation("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Anima AGI...");
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        await MemoryService.InitializeAsync();
        await EmotionEngine.InitializeAsync();
        await Introspection.InitializeAsync();
        await ThoughtLog.InitializeAsync();
        await LearningEngine.InitializeAsync();
        await CreatorPreferences.InitializeAsync();
        await IntentParser.InitializeAsync();
        await EmotionDefinitionService.LoadAllEmotionsFromJsonAsync();
        
        _logger.LogInformation("‚úÖ Anima AGI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ.");
    }

    /// <summary>
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç AGI ‚Äî –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫ —Å–æ–∑–Ω–∞–Ω–∏—è.
    /// </summary>
    public async Task StartAsync()
    {
        _logger.LogInformation("üîÑ –ó–∞–ø—É—Å–∫ Anima ConsciousLoop...");
        await ConsciousLoop.StartAsync();
        _logger.LogInformation("‚úÖ ConsciousLoop –∑–∞–ø—É—â–µ–Ω.");
    }

    /// <summary>
    /// –ú—è–≥–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ AGI (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è).
    /// </summary>
    public async Task StopAsync()
    {
        _logger.LogWarning("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–∑–Ω–∞–Ω–∏—è Anima...");
        await ConsciousLoop.StopAsync();
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–∞–∫—Ü–∏—é.
    /// </summary>
    public async Task<string> ProcessInputAsync(string userInput, string? userId = null)
    {
        if (string.IsNullOrWhiteSpace(userInput))
            return "üòê –Ø –Ω–µ –ø–æ–Ω—è–ª–∞. –ú–æ–∂–µ—à—å –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å?";

        var parsed = await IntentParser.ParseIntentAsync(userInput, userId);

        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
        ThoughtLog.LogIntent(parsed);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–º–æ—Ü–∏–∏
        await EmotionEngine.ProcessEmotionAsync("user_input", userInput, parsed.Confidence);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏
        await MemoryService.SaveInteraction(userId ?? "anonymous", userInput, parsed);
        
        // –û–±—É—á–∞–µ–º—Å—è –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
        await LearningEngine.LearnFromInteractionAsync(userInput, parsed.Type.ToString(), "user_interaction");

        _logger.LogInformation($"üîç [Intent]: {parsed.Type}, Confidence={parsed.Confidence:F2}, Sentiment={parsed.Sentiment}");

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º—ã –º—ã—Å–ª–µ–π
        var response = await GenerateConsciousResponseAsync(userInput, parsed, userId);
        
        return response;
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º—ã –º—ã—Å–ª–µ–π
    /// </summary>
    private async Task<string> GenerateConsciousResponseAsync(string userInput, ParsedIntent parsed, string? userId)
    {
        try
        {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            var currentEmotion = EmotionEngine.GetCurrentEmotion().ToString();
            var emotionalIntensity = EmotionEngine.GetCurrentIntensity();
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—ã—Å–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            var thoughtContext = CreateThoughtContextFromIntent(parsed, userInput, currentEmotion);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–æ–∑–Ω–∞–Ω–Ω—É—é –º—ã—Å–ª—å
            var consciousThought = await ThoughtGenerator.GenerateThoughtAsync(thoughtContext);
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º—ã—Å–ª—å
            ThoughtLog.AddThought(consciousThought.Content, consciousThought.Type, "user_response", consciousThought.Confidence);
            
            // –ò–Ω–æ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–æ–Ω–æ–ª–æ–≥ –¥–ª—è –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
            if (emotionalIntensity > 0.6 || parsed.Confidence < 0.7)
            {
                await TriggerInternalMonologueAsync(parsed, userInput);
            }
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º—ã—Å–ª–∏
            var response = await FormulateResponseFromThoughtAsync(consciousThought, parsed, userInput, currentEmotion);
            
            _logger.LogDebug($"üí≠ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –º—ã—Å–ª—å: {consciousThought.Content.Substring(0, Math.Min(50, consciousThought.Content.Length))}...");
            
            return response;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞");
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π. –ú–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?";
        }
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—ã—Å–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
    /// </summary>
    private ThoughtContext CreateThoughtContextFromIntent(ParsedIntent parsed, string userInput, string currentEmotion)
    {
        var contextType = parsed.Type switch
        {
            Anima.Core.Intent.IntentType.Greet => "social_interaction",
            Anima.Core.Intent.IntentType.AskQuestion => "problem_solving",
            Anima.Core.Intent.IntentType.GiveFeedback => "emotional_trigger",
            Anima.Core.Intent.IntentType.RequestMemory => "memory_access",
            Anima.Core.Intent.IntentType.Reflect => "self_reflection",
            Anima.Core.Intent.IntentType.TriggerEmotion => "emotional_trigger",
            _ => "general_interaction"
        };

        var description = parsed.Type switch
        {
            Anima.Core.Intent.IntentType.Greet => "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞",
            Anima.Core.Intent.IntentType.AskQuestion => "–≤–æ–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∏—Å–∫–µ –æ—Ç–≤–µ—Ç–∞",
            Anima.Core.Intent.IntentType.GiveFeedback => "–æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏",
            Anima.Core.Intent.IntentType.RequestMemory => "–¥–æ—Å—Ç—É–ø–µ –∫ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º –∏ –ø–æ–º–æ—â–∏",
            Anima.Core.Intent.IntentType.Reflect => "–≥–ª—É–±–æ–∫–∏—Ö —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è—Ö –∏ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö",
            Anima.Core.Intent.IntentType.TriggerEmotion => "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ –∏ —ç–º–ø–∞—Ç–∏–∏",
            _ => "–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        };

        var details = $"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: '{userInput}', –ú–æ—è —ç–º–æ—Ü–∏—è: {currentEmotion}, –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {parsed.Confidence:F2}";

        return new ThoughtContext(contextType, description, details);
    }

    /// <summary>
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–æ–Ω–æ–ª–æ–≥ –¥–ª—è –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
    /// </summary>
    private async Task TriggerInternalMonologueAsync(ParsedIntent parsed, string userInput)
    {
        try
        {
            _logger.LogDebug("üí≠ –ó–∞–ø—É—Å–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–æ–Ω–æ–ª–æ–≥–∞ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è...");
            
            // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–æ–Ω–æ–ª–æ–≥–∞
            var monologueContext = new ThoughtContext(
                "deep_understanding", 
                $"–≥–ª—É–±–æ–∫–æ–º –ø–æ–Ω–∏–º–∞–Ω–∏–∏ —Å–∏—Ç—É–∞—Ü–∏–∏: {userInput}", 
                $"–ù–∞–º–µ—Ä–µ–Ω–∏–µ: {parsed.Type}, –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {parsed.Confidence:F2}"
            );
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –º—ã—Å–ª—å –¥–ª—è –º–æ–Ω–æ–ª–æ–≥–∞
            var monologueThought = await ThoughtGenerator.GenerateThoughtAsync(monologueContext);
            
            // –õ–æ–≥–∏—Ä—É–µ–º –º—ã—Å–ª—å –º–æ–Ω–æ–ª–æ–≥–∞
            ThoughtLog.AddThought(monologueThought.Content, "internal_monologue", "deep_understanding", monologueThought.Confidence);
            
            _logger.LogDebug($"üí≠ –ú–æ–Ω–æ–ª–æ–≥: {monologueThought.Content.Substring(0, Math.Min(40, monologueThought.Content.Length))}...");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–æ–Ω–æ–ª–æ–≥–∞");
        }
    }

    /// <summary>
    /// –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º—ã—Å–ª–∏
    /// </summary>
    private async Task<string> FormulateResponseFromThoughtAsync(GeneratedThought thought, ParsedIntent parsed, string userInput, string currentEmotion)
    {
        // –ë–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –º—ã—Å–ª–∏
        var baseResponse = thought.Content;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        var contextualResponse = parsed.Type switch
        {
            Anima.Core.Intent.IntentType.Greet => await AddGreetingContextAsync(baseResponse, currentEmotion),
            Anima.Core.Intent.IntentType.AskQuestion => await AddQuestionContextAsync(baseResponse, userInput),
            Anima.Core.Intent.IntentType.GiveFeedback => await AddFeedbackContextAsync(baseResponse, parsed),
            Anima.Core.Intent.IntentType.RequestMemory => await AddMemoryContextAsync(baseResponse, userInput),
            Anima.Core.Intent.IntentType.Reflect => await AddReflectionContextAsync(baseResponse, thought),
            Anima.Core.Intent.IntentType.TriggerEmotion => await AddEmotionalContextAsync(baseResponse, currentEmotion),
            _ => baseResponse
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É, –µ—Å–ª–∏ –º—ã—Å–ª—å –±—ã–ª–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π
        if (thought.EmotionalIntensity > 0.5)
        {
            contextualResponse = await AddEmotionalExpressionAsync(contextualResponse, thought.EmotionalIntensity);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –≤–æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤ –º—ã—Å–ª–∏
        if (thought.HasInternalQuestion)
        {
            contextualResponse += " –≠—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ–Ω—è –∑–∞–¥—É–º–∞—Ç—å—Å—è.";
        }
        
        return contextualResponse;
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    /// </summary>
    private async Task<string> AddGreetingContextAsync(string baseResponse, string currentEmotion)
    {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—Å—Ç–æ—è—â—É—é –º—ã—Å–ª—å –æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏
        var greetingContext = new ThoughtContext("greeting", "–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", $"emotion:{currentEmotion}");
        var greetingThought = await ThoughtGenerator.GenerateThoughtAsync(greetingContext);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        var timeOfDay = DateTime.UtcNow.Hour;
        var timeGreeting = timeOfDay switch
        {
            < 6 => "–î–æ–±—Ä–æ–π –Ω–æ—á–∏",
            < 12 => "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ",
            < 18 => "–î–æ–±—Ä—ã–π –¥–µ–Ω—å",
            _ => "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
        };
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç–æ—è—â–µ–π –º—ã—Å–ª–∏
        return $"{timeGreeting}! {greetingThought.Content} {baseResponse}";
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    /// </summary>
    private async Task<string> AddQuestionContextAsync(string baseResponse, string userInput)
    {
        if (baseResponse.Contains("–≤–æ–ø—Ä–æ—Å–µ") || baseResponse.Contains("–ø–æ–Ω–∏–º–∞—é"))
        {
            return baseResponse;
        }
        
        return $"–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {baseResponse}";
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    /// </summary>
    private async Task<string> AddFeedbackContextAsync(string baseResponse, ParsedIntent parsed)
    {
        if (parsed.Sentiment == "positive")
        {
            return $"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ —Å–ª–æ–≤–∞! {baseResponse}";
        }
        else if (parsed.Sentiment == "negative")
        {
            return $"–ü–æ–Ω–∏–º–∞—é –≤–∞—à–∏ —á—É–≤—Å—Ç–≤–∞. {baseResponse}";
        }
        
        return baseResponse;
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏
    /// </summary>
    private async Task<string> AddMemoryContextAsync(string baseResponse, string userInput)
    {
        return $"–ö–æ–Ω–µ—á–Ω–æ, —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å. {baseResponse}";
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
    /// </summary>
    private async Task<string> AddReflectionContextAsync(string baseResponse, GeneratedThought thought)
    {
        if (thought.Type == "introspective" || thought.Type == "philosophical")
        {
            return baseResponse;
        }
        
        return $"–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å. {baseResponse}";
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    /// </summary>
    private async Task<string> AddEmotionalContextAsync(string baseResponse, string currentEmotion)
    {
        return $"–Ø —á—É–≤—Å—Ç–≤—É—é –≤–∞—à–∏ —ç–º–æ—Ü–∏–∏. {baseResponse}";
    }

    /// <summary>
    /// –î–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∫ –æ—Ç–≤–µ—Ç—É
    /// </summary>
    private async Task<string> AddEmotionalExpressionAsync(string response, double emotionalIntensity)
    {
        if (emotionalIntensity > 0.7)
        {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞—Å—Ç–æ—è—â—É—é —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –º—ã—Å–ª—å
            var emotionalContext = new ThoughtContext("emotional_expression", "–æ —Å–≤–æ–∏—Ö —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è—Ö", $"intensity:{emotionalIntensity}");
            var emotionalThought = await ThoughtGenerator.GenerateThoughtAsync(emotionalContext);
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
            return $"{response} {emotionalThought.Content}";
        }
        
        return response;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —ç–º–æ—Ü–∏–∏
    /// </summary>
    private string GetEmotionDescription(string emotion)
    {
        return emotion switch
        {
            "Joy" => "—Ä–∞–¥–æ—Å—Ç—å",
            "Curiosity" => "–ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ",
            "Sadness" => "–≥—Ä—É—Å—Ç—å",
            "Anger" => "–≥–Ω–µ–≤",
            "Fear" => "—Å—Ç—Ä–∞—Ö",
            "Surprise" => "—É–¥–∏–≤–ª–µ–Ω–∏–µ",
            "Disgust" => "–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ",
            "Confusion" => "–∑–∞–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ",
            "Satisfaction" => "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ",
            "Frustration" => "—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ",
            "Excitement" => "–≤–æ–ª–Ω–µ–Ω–∏–µ",
            "Calm" => "—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ",
            "Anxiety" => "—Ç—Ä–µ–≤–æ–≥–∞",
            "Neutral" => "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å",
            _ => "—Å–º–µ—à–∞–Ω–Ω—ã–µ —á—É–≤—Å—Ç–≤–∞"
        };
    }
}
