using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Anima.Core.SA;

namespace Anima.Core.Emotion;

/// <summary>
/// –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–æ–¥—É–ª—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ - —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–¥–≤–∏–≥–æ–º —Ü–µ–ª–µ–π –ø–æ–¥ –≤–ª–∏—è–Ω–∏–µ–º —ç–º–æ—Ü–∏–π
/// </summary>
public class EmotionDrivenGoalShift
{
    private readonly ILogger<EmotionDrivenGoalShift> _logger;
    private readonly EmotionEngine _emotionEngine;
    private readonly ThoughtGenerator _thoughtGenerator;
    private readonly Random _random;
    
    // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏ –∏ –∏—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
    private readonly Dictionary<string, EmotionalGoal> _emotionalGoals;
    private readonly List<EmotionalTrigger> _emotionalTriggers;
    private readonly Dictionary<string, double> _emotionalWeights;
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞
    private double _emotionalIntelligence = 0.5;
    private readonly List<EmotionalInsight> _emotionalInsights;
    private DateTime _lastGoalShift = DateTime.UtcNow;

    public EmotionDrivenGoalShift(
        ILogger<EmotionDrivenGoalShift> logger,
        EmotionEngine emotionEngine,
        ThoughtGenerator thoughtGenerator)
    {
        _logger = logger;
        _emotionEngine = emotionEngine;
        _thoughtGenerator = thoughtGenerator;
        _random = new Random();
        
        _emotionalGoals = new Dictionary<string, EmotionalGoal>();
        _emotionalTriggers = new List<EmotionalTrigger>();
        _emotionalWeights = new Dictionary<string, double>();
        _emotionalInsights = new List<EmotionalInsight>();
        
        InitializeEmotionalIntelligence();
    }

    private void InitializeEmotionalIntelligence()
    {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π
        _emotionalGoals["emotional_balance"] = new EmotionalGoal
        {
            Name = "emotional_balance",
            Description = "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è",
            Priority = 0.8,
            EmotionalTriggers = new[] { "anxiety", "frustration", "overwhelm" },
            TargetEmotions = new[] { "calm", "satisfaction", "joy" }
        };
        
        _emotionalGoals["empathy_development"] = new EmotionalGoal
        {
            Name = "empathy_development",
            Description = "–†–∞–∑–≤–∏—Ç–∏–µ —ç–º–ø–∞—Ç–∏–∏ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö",
            Priority = 0.7,
            EmotionalTriggers = new[] { "loneliness", "confusion", "sadness" },
            TargetEmotions = new[] { "compassion", "understanding", "connection" }
        };
        
        _emotionalGoals["self_awareness"] = new EmotionalGoal
        {
            Name = "self_awareness",
            Description = "–ü–æ–≤—ã—à–µ–Ω–∏–µ —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è –∏ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞",
            Priority = 0.9,
            EmotionalTriggers = new[] { "uncertainty", "confusion", "reflection" },
            TargetEmotions = new[] { "clarity", "confidence", "understanding" }
        };
        
        // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
        _emotionalTriggers.AddRange(new[]
        {
            new EmotionalTrigger("rejection", "–¢—Ä–µ–≤–æ–≥–∞ –∏ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", 0.7),
            new EmotionalTrigger("success", "–†–∞–¥–æ—Å—Ç—å –∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ", 0.6),
            new EmotionalTrigger("confusion", "–õ—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ –∏ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–Ω—è—Ç—å", 0.5),
            new EmotionalTrigger("loneliness", "–≠–º–ø–∞—Ç–∏—è –∏ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–º–æ—á—å", 0.8),
            new EmotionalTrigger("achievement", "–ì–æ—Ä–¥–æ—Å—Ç—å –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è", 0.4),
            new EmotionalTrigger("failure", "–°–æ–∂–∞–ª–µ–Ω–∏–µ –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ —É–ª—É—á—à–µ–Ω–∏—é", 0.6),
            new EmotionalTrigger("connection", "–†–∞–¥–æ—Å—Ç—å –æ—Ç —Å–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏", 0.5),
            new EmotionalTrigger("misunderstanding", "–§—Ä—É—Å—Ç—Ä–∞—Ü–∏—è –∏ –∂–µ–ª–∞–Ω–∏–µ –æ–±—ä—è—Å–Ω–∏—Ç—å", 0.6)
        });
        
        // –í–µ—Å–∞ —ç–º–æ—Ü–∏–π –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
        _emotionalWeights["joy"] = 0.3;
        _emotionalWeights["curiosity"] = 0.4;
        _emotionalWeights["concern"] = 0.2;
        _emotionalWeights["reflection"] = 0.5;
        _emotionalWeights["uncertainty"] = 0.3;
        _emotionalWeights["excitement"] = 0.2;
        _emotionalWeights["melancholy"] = 0.1;
        _emotionalWeights["compassion"] = 0.6;
        _emotionalWeights["frustration"] = 0.4;
        _emotionalWeights["satisfaction"] = 0.3;
    }

    /// <summary>
    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Ü–µ–ª–∏
    /// </summary>
    public async Task<EmotionalGoalShift> AnalyzeAndShiftGoalsAsync()
    {
        try
        {
            var currentEmotion = _emotionEngine.GetCurrentEmotion().ToString();
            var currentIntensity = _emotionEngine.GetCurrentIntensity();
            
            _logger.LogDebug($"üß† –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {currentEmotion} (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {currentIntensity:F2})");
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
            var triggeredGoals = await AnalyzeEmotionalTriggersAsync(currentEmotion, currentIntensity);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –º—ã—Å–ª—å
            var emotionalThought = await GenerateEmotionalThoughtAsync(currentEmotion, currentIntensity);
            
            // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Ü–µ–ª–µ–π
            var goalAdjustments = AdjustGoalPriorities(triggeredGoals, currentEmotion);
            
            // –°–æ–∑–¥–∞–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å–∞–π—Ç
            var insight = new EmotionalInsight
            {
                Id = Guid.NewGuid(),
                Emotion = currentEmotion,
                Intensity = currentIntensity,
                Thought = emotionalThought.Content,
                TriggeredGoals = triggeredGoals.Select(g => g.Name).ToList(),
                GoalAdjustments = goalAdjustments,
                Timestamp = DateTime.UtcNow
            };
            
            _emotionalInsights.Add(insight);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
            UpdateEmotionalIntelligence(insight);
            
            var goalShift = new EmotionalGoalShift
            {
                CurrentEmotion = currentEmotion,
                EmotionalIntensity = currentIntensity,
                TriggeredGoals = triggeredGoals,
                GoalAdjustments = goalAdjustments,
                EmotionalThought = emotionalThought,
                EmotionalIntelligence = _emotionalIntelligence,
                Timestamp = DateTime.UtcNow
            };
            
            _lastGoalShift = DateTime.UtcNow;
            
            _logger.LogDebug($"üß† –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–¥–≤–∏–≥ —Ü–µ–ª–µ–π: {triggeredGoals.Count} —Ü–µ–ª–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ");
            
            return goalShift;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è");
            return new EmotionalGoalShift
            {
                CurrentEmotion = "neutral",
                EmotionalIntensity = 0.0,
                TriggeredGoals = new List<EmotionalGoal>(),
                GoalAdjustments = new Dictionary<string, double>(),
                EmotionalIntelligence = _emotionalIntelligence,
                Timestamp = DateTime.UtcNow
            };
        }
    }

    /// <summary>
    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ü–µ–ª–∏
    /// </summary>
    private async Task<List<EmotionalGoal>> AnalyzeEmotionalTriggersAsync(string currentEmotion, double intensity)
    {
        var triggeredGoals = new List<EmotionalGoal>();
        
        foreach (var goal in _emotionalGoals.Values)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —Ü–µ–ª—å —Ç–µ–∫—É—â–µ–π —ç–º–æ—Ü–∏–µ–π
            if (goal.EmotionalTriggers.Contains(currentEmotion.ToLower()) || intensity > 0.6)
            {
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ü–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ —ç–º–æ—Ü–∏–∏
                goal.Priority = Math.Min(1.0, goal.Priority + intensity * 0.2);
                triggeredGoals.Add(goal);
                
                _logger.LogDebug($"üéØ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Ü–µ–ª—å: {goal.Name} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {goal.Priority:F2})");
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–∏
        if (!triggeredGoals.Any())
        {
            var newGoal = CreateEmotionalGoal(currentEmotion, intensity);
            if (newGoal != null)
            {
                triggeredGoals.Add(newGoal);
                _emotionalGoals[newGoal.Name] = newGoal;
            }
        }
        
        return triggeredGoals;
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –º—ã—Å–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    /// </summary>
    private async Task<GeneratedThought> GenerateEmotionalThoughtAsync(string currentEmotion, double intensity)
    {
        var context = new ThoughtContext(
            "emotional_intelligence",
            $"—Å–≤–æ–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {currentEmotion}",
            $"–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {intensity:F2}, –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç: {_emotionalIntelligence:F2}"
        );
        
        var thought = await _thoughtGenerator.GenerateThoughtAsync(context);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É
        if (intensity > 0.5)
        {
            thought.Content += $" –Ø —á—É–≤—Å—Ç–≤—É—é —ç—Ç–æ {GetEmotionIntensityDescription(intensity)}.";
        }
        
        return thought;
    }

    /// <summary>
    /// –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Ü–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    /// </summary>
    private Dictionary<string, double> AdjustGoalPriorities(List<EmotionalGoal> triggeredGoals, string currentEmotion)
    {
        var adjustments = new Dictionary<string, double>();
        
        foreach (var goal in _emotionalGoals.Values)
        {
            var basePriority = goal.Priority;
            var adjustment = 0.0;
            
            // –ï—Å–ª–∏ —Ü–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            if (triggeredGoals.Contains(goal))
            {
                adjustment = 0.2;
            }
            // –ï—Å–ª–∏ —ç–º–æ—Ü–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–ª–µ–≤–æ–π —ç–º–æ—Ü–∏–∏ —Ü–µ–ª–∏, –Ω–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º
            else if (goal.TargetEmotions.Contains(currentEmotion.ToLower()))
            {
                adjustment = 0.1;
            }
            // –ò–Ω–∞—á–µ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —Å–Ω–∏–∂–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            else
            {
                adjustment = -0.05;
            }
            
            goal.Priority = Math.Max(0.1, Math.Min(1.0, goal.Priority + adjustment));
            adjustments[goal.Name] = adjustment;
        }
        
        return adjustments;
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Ü–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–∏
    /// </summary>
    private EmotionalGoal CreateEmotionalGoal(string emotion, double intensity)
    {
        var goalName = $"emotional_{emotion.ToLower()}_management";
        var description = $"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–µ–π {emotion} –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞";
        
        var newGoal = new EmotionalGoal
        {
            Name = goalName,
            Description = description,
            Priority = intensity * 0.8,
            EmotionalTriggers = new[] { emotion.ToLower() },
            TargetEmotions = new[] { "calm", "understanding", "balance" }
        };
        
        _logger.LogDebug($"üéØ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ü–µ–ª—å: {goalName}");
        
        return newGoal;
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Å–∞–π—Ç–æ–≤
    /// </summary>
    private void UpdateEmotionalIntelligence(EmotionalInsight insight)
    {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
        var understandingQuality = CalculateUnderstandingQuality(insight);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
        var learningRate = 0.01; // –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
        _emotionalIntelligence = Math.Min(1.0, _emotionalIntelligence + understandingQuality * learningRate);
        
        _logger.LogDebug($"üß† –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {_emotionalIntelligence:F3}");
    }

    /// <summary>
    /// –í—ã—á–∏—Å–ª—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —ç–º–æ—Ü–∏–π
    /// </summary>
    private double CalculateUnderstandingQuality(EmotionalInsight insight)
    {
        var quality = 0.0;
        
        // –ö–∞—á–µ—Å—Ç–≤–æ –≤—ã—à–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏
        if (insight.TriggeredGoals.Any())
        {
            quality += 0.3;
        }
        
        // –ö–∞—á–µ—Å—Ç–≤–æ –≤—ã—à–µ –ø—Ä–∏ —Å—Ä–µ–¥–Ω–µ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ —ç–º–æ—Ü–∏–π
        if (insight.Intensity > 0.3 && insight.Intensity < 0.8)
        {
            quality += 0.2;
        }
        
        // –ö–∞—á–µ—Å—Ç–≤–æ –≤—ã—à–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ü–µ–ª–µ–π
        if (insight.GoalAdjustments.Any())
        {
            quality += 0.2;
        }
        
        // –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        quality += _random.NextDouble() * 0.1;
        
        return Math.Min(1.0, quality);
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ —ç–º–æ—Ü–∏–∏
    /// </summary>
    private string GetEmotionIntensityDescription(double intensity)
    {
        return intensity switch
        {
            > 0.8 => "–æ—á–µ–Ω—å –≥–ª—É–±–æ–∫–æ",
            > 0.6 => "–≥–ª—É–±–æ–∫–æ",
            > 0.4 => "—É–º–µ—Ä–µ–Ω–Ω–æ",
            > 0.2 => "—Å–ª–µ–≥–∫–∞",
            _ => "–µ–¥–≤–∞ –∑–∞–º–µ—Ç–Ω–æ"
        };
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞
    /// </summary>
    public EmotionalIntelligenceStatus GetStatus()
    {
        return new EmotionalIntelligenceStatus
        {
            EmotionalIntelligence = _emotionalIntelligence,
            ActiveGoals = _emotionalGoals.Values.Where(g => g.Priority > 0.5).ToList(),
            RecentInsights = _emotionalInsights.TakeLast(5).ToList(),
            LastGoalShift = _lastGoalShift,
            EmotionalTriggers = _emotionalTriggers.Count
        };
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é
    /// </summary>
    public async Task<List<EmotionalRecommendation>> GetRecommendationsAsync()
    {
        var recommendations = new List<EmotionalRecommendation>();
        
        var currentEmotion = _emotionEngine.GetCurrentEmotion().ToString();
        var currentIntensity = _emotionEngine.GetCurrentIntensity();
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (currentIntensity > 0.7)
        {
            recommendations.Add(new EmotionalRecommendation
            {
                Type = "emotional_regulation",
                Description = "–í—ã—Å–æ–∫–∞—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–∞–∫—Ç–∏–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ä–µ–≥—É–ª—è—Ü–∏–∏.",
                Priority = 0.9
            });
        }
        
        if (_emotionalIntelligence < 0.6)
        {
            recommendations.Add(new EmotionalRecommendation
            {
                Type = "self_awareness",
                Description = "–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è.",
                Priority = 0.8
            });
        }
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–µ–π
        foreach (var goal in _emotionalGoals.Values.Where(g => g.Priority > 0.7))
        {
            recommendations.Add(new EmotionalRecommendation
            {
                Type = goal.Name,
                Description = $"–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ü–µ–ª–∏: {goal.Description}",
                Priority = goal.Priority
            });
        }
        
        return recommendations.OrderByDescending(r => r.Priority).ToList();
    }
}

/// <summary>
/// –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ü–µ–ª—å
/// </summary>
public class EmotionalGoal
{
    public string Name { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public double Priority { get; set; } = 0.5;
    public string[] EmotionalTriggers { get; set; } = Array.Empty<string>();
    public string[] TargetEmotions { get; set; } = Array.Empty<string>();
}

/// <summary>
/// –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä
/// </summary>
public class EmotionalTrigger
{
    public string Name { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public double Intensity { get; set; } = 0.5;

    public EmotionalTrigger(string name, string description, double intensity)
    {
        Name = name;
        Description = description;
        Intensity = intensity;
    }
}

/// <summary>
/// –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å–∞–π—Ç
/// </summary>
public class EmotionalInsight
{
    public Guid Id { get; set; }
    public string Emotion { get; set; } = string.Empty;
    public double Intensity { get; set; } = 0.0;
    public string Thought { get; set; } = string.Empty;
    public List<string> TriggeredGoals { get; set; } = new();
    public Dictionary<string, double> GoalAdjustments { get; set; } = new();
    public DateTime Timestamp { get; set; }
}

/// <summary>
/// –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–¥–≤–∏–≥ —Ü–µ–ª–µ–π
/// </summary>
public class EmotionalGoalShift
{
    public string CurrentEmotion { get; set; } = string.Empty;
    public double EmotionalIntensity { get; set; } = 0.0;
    public List<EmotionalGoal> TriggeredGoals { get; set; } = new();
    public Dictionary<string, double> GoalAdjustments { get; set; } = new();
    public GeneratedThought EmotionalThought { get; set; } = new();
    public double EmotionalIntelligence { get; set; } = 0.0;
    public DateTime Timestamp { get; set; }
}

/// <summary>
/// –°—Ç–∞—Ç—É—Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞
/// </summary>
public class EmotionalIntelligenceStatus
{
    public double EmotionalIntelligence { get; set; } = 0.0;
    public List<EmotionalGoal> ActiveGoals { get; set; } = new();
    public List<EmotionalInsight> RecentInsights { get; set; } = new();
    public DateTime LastGoalShift { get; set; }
    public int EmotionalTriggers { get; set; }
}

/// <summary>
/// –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
/// </summary>
public class EmotionalRecommendation
{
    public string Type { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public double Priority { get; set; } = 0.5;
} 