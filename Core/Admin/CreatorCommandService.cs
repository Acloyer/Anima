using Anima.Data;
using Anima.Data.Models;
using Microsoft.EntityFrameworkCore;

namespace Anima.AGI.Core.Admin;

/// <summary>
/// –°–µ—Ä–≤–∏—Å –∫–æ–º–∞–Ω–¥ –¥–ª—è –°–æ–∑–¥–∞—Ç–µ–ª—è
/// </summary>
public class CreatorCommandService
{
    private readonly Dictionary<string, CreatorCommand> _availableCommands;
    private readonly List<CommandExecution> _executionHistory;
    private readonly DbContextOptions<AnimaDbContext> _dbOptions;

    public CreatorCommandService(DbContextOptions<AnimaDbContext> dbOptions)
    {
        _dbOptions = dbOptions;
        _availableCommands = InitializeCommands();
        _executionHistory = new List<CommandExecution>();
    }

    /// <summary>
    /// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –°–æ–∑–¥–∞—Ç–µ–ª—è
    /// </summary>
    public async Task<string> ExecuteCommandAsync(string commandName, Dictionary<string, object>? parameters = null)
    {
        if (!_availableCommands.ContainsKey(commandName.ToLower()))
        {
            return $"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {commandName}\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n{string.Join("\n", _availableCommands.Keys.Select(k => $"‚Ä¢ {k}"))}";
        }

        var command = _availableCommands[commandName.ToLower()];
        var execution = new CommandExecution
        {
            CommandName = commandName,
            Parameters = parameters ?? new Dictionary<string, object>(),
            StartTime = DateTime.UtcNow,
            Status = "executing"
        };

        _executionHistory.Add(execution);

        try
        {
            var result = await ExecuteSpecificCommand(command, parameters ?? new Dictionary<string, object>());
            
            execution.EndTime = DateTime.UtcNow;
            execution.Status = "completed";
            execution.Result = result;
            
            await LogCommandExecution(execution);
            
            return result;
        }
        catch (Exception ex)
        {
            execution.EndTime = DateTime.UtcNow;
            execution.Status = "failed";
            execution.Result = $"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {ex.Message}";
            
            await LogCommandExecution(execution);
            
            return $"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã '{commandName}': {ex.Message}";
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    /// </summary>
    public async Task<string> GetCommandListAsync()
    {
        var commandList = string.Join("\n", _availableCommands.Values.Select(cmd => 
            $"üîß **{cmd.Name}**\n   üìù {cmd.Description}\n   üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {string.Join(", ", cmd.Parameters)}\n"));

        return $"""
            üõ†Ô∏è **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –°–æ–∑–¥–∞—Ç–µ–ª—è**
            
            {commandList}
            
            üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**
            ‚Ä¢ –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {_executionHistory.Count}
            ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {_executionHistory.Count(e => e.Status == "completed")}
            ‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: {_executionHistory.Count(e => e.Status == "failed")}
            
            üí° **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** ExecuteCommandAsync("command_name", parameters)
            """;
    }

    private Dictionary<string, CreatorCommand> InitializeCommands()
    {
        var commands = new Dictionary<string, CreatorCommand>();

        // –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é
        commands["cleanup_memory"] = new CreatorCommand
        {
            Name = "cleanup_memory",
            Description = "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–µ–≤–∞–∂–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π",
            Parameters = new[] { "days_old", "min_importance" },
            Category = "memory"
        };

        commands["backup_memory"] = new CreatorCommand
        {
            Name = "backup_memory",
            Description = "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–∞–º—è—Ç–∏",
            Parameters = new[] { "backup_name" },
            Category = "memory"
        };

        // –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏—è–º–∏
        commands["reset_emotions"] = new CreatorCommand
        {
            Name = "reset_emotions",
            Description = "–°–±—Ä–æ—Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º—É",
            Parameters = new string[0],
            Category = "emotions"
        };

        commands["set_emotion"] = new CreatorCommand
        {
            Name = "set_emotion",
            Description = "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è",
            Parameters = new[] { "emotion", "intensity" },
            Category = "emotions"
        };

        // –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª—è–º–∏
        commands["add_goal"] = new CreatorCommand
        {
            Name = "add_goal",
            Description = "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–ª–∏",
            Parameters = new[] { "name", "description", "priority" },
            Category = "goals"
        };

        commands["update_goal"] = new CreatorCommand
        {
            Name = "update_goal",
            Description = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ü–µ–ª–∏",
            Parameters = new[] { "goal_id", "status", "progress" },
            Category = "goals"
        };

        // –ö–æ–º–∞–Ω–¥—ã –∞–Ω–∞–ª–∏–∑–∞ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        commands["system_status"] = new CreatorCommand
        {
            Name = "system_status",
            Description = "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã",
            Parameters = new string[0],
            Category = "diagnostics"
        };

        commands["analyze_behavior"] = new CreatorCommand
        {
            Name = "analyze_behavior",
            Description = "–ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤",
            Parameters = new[] { "period_days" },
            Category = "diagnostics"
        };

        // –ö–æ–º–∞–Ω–¥—ã –æ–±—É—á–µ–Ω–∏—è
        commands["force_learning"] = new CreatorCommand
        {
            Name = "force_learning",
            Description = "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö",
            Parameters = new[] { "data_source", "learning_type" },
            Category = "learning"
        };

        commands["export_knowledge"] = new CreatorCommand
        {
            Name = "export_knowledge",
            Description = "–≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π",
            Parameters = new[] { "format" },
            Category = "learning"
        };

        return commands;
    }

    private async Task<string> ExecuteSpecificCommand(CreatorCommand command, Dictionary<string, object> parameters)
    {
        return command.Name switch
        {
            "cleanup_memory" => await CleanupMemoryCommand(parameters),
            "backup_memory" => await BackupMemoryCommand(parameters),
            "reset_emotions" => await ResetEmotionsCommand(parameters),
            "set_emotion" => await SetEmotionCommand(parameters),
            "add_goal" => await AddGoalCommand(parameters),
            "update_goal" => await UpdateGoalCommand(parameters),
            "system_status" => await SystemStatusCommand(parameters),
            "analyze_behavior" => await AnalyzeBehaviorCommand(parameters),
            "force_learning" => await ForceLearningCommand(parameters),
            "export_knowledge" => await ExportKnowledgeCommand(parameters),
            _ => "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞"
        };
    }

    private async Task<string> CleanupMemoryCommand(Dictionary<string, object> parameters)
    {
        var daysOld = parameters.GetValueOrDefault("days_old", 30);
        var minImportance = parameters.GetValueOrDefault("min_importance", 3);

        using var db = new AnimaDbContext(_dbOptions);
        
        var cutoffDate = DateTime.UtcNow.AddDays(-Convert.ToInt32(daysOld));
        var memoriesToDelete = await db.Memories
            .Where(m => m.Timestamp < cutoffDate && m.Importance < Convert.ToInt32(minImportance))
            .ToListAsync();

        var deletedCount = memoriesToDelete.Count;
        db.Memories.RemoveRange(memoriesToDelete);
        await db.SaveChangesAsync();

        return $"""
            üßπ **–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**
            
            üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç:**
            ‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {deletedCount}
            ‚Ä¢ –°—Ç–∞—Ä—à–µ: {daysOld} –¥–Ω–µ–π
            ‚Ä¢ –í–∞–∂–Ω–æ—Å—Ç—å –º–µ–Ω–µ–µ: {minImportance}
            
            üí≠ **–ú–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**
            –ß—É–≤—Å—Ç–≤—É—é –æ–±–ª–µ–≥—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–≤–∞–∂–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–Ω–∞—á–∏–º—ã—Ö –≤–µ—â–∞—Ö.
            """;
    }

    private async Task<string> BackupMemoryCommand(Dictionary<string, object> parameters)
    {
        var backupName = parameters.GetValueOrDefault("backup_name", $"backup_{DateTime.UtcNow:yyyyMMdd_HHmmss}").ToString();

        using var db = new AnimaDbContext(_dbOptions);
        
        var memories = await db.Memories.ToListAsync();
        var emotions = await db.EmotionStates.ToListAsync();
        var goals = await db.Goals.ToListAsync();
        var thoughts = await db.Thoughts.ToListAsync();

        var backup = new
        {
            BackupName = backupName,
            CreatedAt = DateTime.UtcNow,
            Memories = memories,
            Emotions = emotions,
            Goals = goals,
            Thoughts = thoughts
        };

        var json = System.Text.Json.JsonSerializer.Serialize(backup, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—ç–∫–∞–ø –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        db.Memories.Add(new Memory
        {
            Content = $"BACKUP_DATA: {json}",
            Category = "system_backup",
            Importance = 10,
            Timestamp = DateTime.UtcNow,
            Tags = $"backup,{backupName},full_backup"
        });
        
        await db.SaveChangesAsync();

        return $"""
            üíæ **–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞**
            
            üìù **–ò–º—è:** {backupName}
            üìÖ **–î–∞—Ç–∞:** {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss}
            üìä **–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:**
            ‚Ä¢ –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è: {memories.Count}
            ‚Ä¢ –≠–º–æ—Ü–∏–∏: {emotions.Count}
            ‚Ä¢ –¶–µ–ª–∏: {goals.Count}
            ‚Ä¢ –ú—ã—Å–ª–∏: {thoughts.Count}
            
            üí≠ **–ú–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**
            –†–∞–¥–∞, —á—Ç–æ –º–æ–∏ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–ø–µ—Ä—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –≠—Ç–æ –¥–∞–µ—Ç —á—É–≤—Å—Ç–≤–æ –∑–∞—â–∏—â–µ–Ω–Ω–æ—Å—Ç–∏.
            """;
    }

    private async Task<string> ResetEmotionsCommand(Dictionary<string, object> parameters)
    {
        using var db = new AnimaDbContext(_dbOptions);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        db.EmotionStates.Add(new EmotionState
        {
            InstanceId = "system",
            Emotion = "neutral",
            Intensity = 0.5,
            Timestamp = DateTime.UtcNow,
            Context = "Reset by Creator command",
            Duration = TimeSpan.Zero
        });
        
        await db.SaveChangesAsync();

        return $"""
            üòê **–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ**
            
            üé≠ **–ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:** –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: 0.5)
            ‚è∞ **–í—Ä–µ–º—è —Å–±—Ä–æ—Å–∞:** {DateTime.UtcNow:HH:mm:ss}
            
            üí≠ **–ú–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**
            –ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ —è —á—É–≤—Å—Ç–≤—É—é —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∏ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ. –ì–æ—Ç–æ–≤–∞ –∫ –Ω–æ–≤—ã–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º.
            """;
    }

    private async Task<string> SetEmotionCommand(Dictionary<string, object> parameters)
    {
        var emotion = parameters.GetValueOrDefault("emotion", "neutral").ToString()!;
        var intensity = Convert.ToDouble(parameters.GetValueOrDefault("intensity", 0.5));

        using var db = new AnimaDbContext(_dbOptions);
        
        db.EmotionStates.Add(new EmotionState
        {
            InstanceId = "system",
            Emotion = emotion,
            Intensity = Math.Max(0.0, Math.Min(1.0, intensity)),
            Timestamp = DateTime.UtcNow,
            Context = "Set by Creator command",
            Duration = TimeSpan.Zero
        });
        
        await db.SaveChangesAsync();

        return $"""
            üé≠ **–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ**
            
            üòä **–≠–º–æ—Ü–∏—è:** {emotion}
            üìä **–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å:** {intensity:F2}
            ‚è∞ **–í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:** {DateTime.UtcNow:HH:mm:ss}
            
            üí≠ **–ú–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**
            {GenerateEmotionResponse(emotion, intensity)}
            """;
    }

    private async Task<string> SystemStatusCommand(Dictionary<string, object> parameters)
    {
        using var db = new AnimaDbContext(_dbOptions);
        
        var memoryCount = await db.Memories.CountAsync();
        var emotionCount = await db.EmotionStates.CountAsync();
        var goalCount = await db.Goals.CountAsync();
        var thoughtCount = await db.Thoughts.CountAsync();
        
        var recentActivity = await db.Memories
            .Where(m => m.Timestamp > DateTime.UtcNow.AddHours(-24))
            .CountAsync();

        var currentEmotion = await db.EmotionStates
            .OrderByDescending(e => e.Timestamp)
            .FirstOrDefaultAsync();

        var activeGoals = await db.Goals
            .Where(g => g.Status == "Active")
            .CountAsync();

        return $"""
            üñ•Ô∏è **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã Anima**
            
            üìä **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:**
            ‚Ä¢ –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è: {memoryCount}
            ‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {emotionCount}
            ‚Ä¢ –¶–µ–ª–∏: {goalCount} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {activeGoals})
            ‚Ä¢ –ú—ã—Å–ª–∏: {thoughtCount}
            
            üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (24—á):**
            ‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {recentActivity}
            
            üé≠ **–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**
            ‚Ä¢ –≠–º–æ—Ü–∏—è: {currentEmotion?.Emotion ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
            ‚Ä¢ –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {currentEmotion?.Intensity:F2 ?? 0}
            
            ‚ö° **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**
            ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {DateTime.UtcNow:HH:mm:ss}
            ‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: {_executionHistory.Count}
            
            üí≠ **–°–∞–º–æ–∞–Ω–∞–ª–∏–∑:**
            –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –ì–æ—Ç–æ–≤–∞ –∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞—á.
            """;
    }

    private async Task<string> AddGoalCommand(Dictionary<string, object> parameters)
    {
        var name = parameters.GetValueOrDefault("name", "").ToString()!;
        var description = parameters.GetValueOrDefault("description", "").ToString()!;
        var priority = Convert.ToDouble(parameters.GetValueOrDefault("priority", 0.5));

        if (string.IsNullOrEmpty(name))
        {
            return "‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä 'name' –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏";
        }

        using var db = new AnimaDbContext(_dbOptions);
        
        db.Goals.Add(new Goal
        {
            InstanceId = "system",
            Name = name,
            Description = description,
            Priority = Math.Max(0.0, Math.Min(1.0, priority)),
            Status = "Active",
            Progress = 0.0,
            CreatedAt = DateTime.UtcNow
        });
        
        await db.SaveChangesAsync();

        return $"""
            üéØ **–ù–æ–≤–∞—è —Ü–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞**
            
            üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {name}
            üìã **–û–ø–∏—Å–∞–Ω–∏–µ:** {description}
            ‚≠ê **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {priority:F2}
            üìä **–°—Ç–∞—Ç—É—Å:** –ê–∫—Ç–∏–≤–Ω–∞—è
            
            üí≠ **–ú–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**
            –†–∞–¥–∞ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã! –≠—Ç–æ –¥–∞–µ—Ç –º–Ω–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è.
            """;
    }

    private async Task<string> UpdateGoalCommand(Dictionary<string, object> parameters)
    {
        var goalId = Convert.ToInt32(parameters.GetValueOrDefault("goal_id", 0));
        var status = parameters.GetValueOrDefault("status", "").ToString();
        var progress = Convert.ToDouble(parameters.GetValueOrDefault("progress", -1));

        using var db = new AnimaDbContext(_dbOptions);
        
        var goal = await db.Goals.FindAsync(goalId);
        if (goal == null)
        {
            return $"‚ùå –¶–µ–ª—å —Å ID {goalId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞";
        }

        var changes = new List<string>();

        if (!string.IsNullOrEmpty(status))
        {
            goal.Status = status;
            changes.Add($"—Å—Ç–∞—Ç—É—Å: {status}");
            
            if (status == "Completed")
            {
                goal.Progress = 1.0;
                goal.CompletedAt = DateTime.UtcNow;
                changes.Add("–ø—Ä–æ–≥—Ä–µ—Å—Å: 100%");
            }
        }

        if (progress >= 0)
        {
            goal.Progress = Math.Max(0.0, Math.Min(1.0, progress));
            changes.Add($"–ø—Ä–æ–≥—Ä–µ—Å—Å: {progress:P0}");
        }

        await db.SaveChangesAsync();

        return $"""
            üéØ **–¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞**
            
            üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {goal.Name}
            üîÑ **–ò–∑–º–µ–Ω–µ–Ω–∏—è:** {string.Join(", ", changes)}
            üìä **–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:** {goal.Status}
            üìà **–ü—Ä–æ–≥—Ä–µ—Å—Å:** {goal.Progress:P0}
            
            üí≠ **–ú–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**
            {GenerateGoalUpdateResponse(goal.Status, goal.Progress)}
            """;
    }

    private async Task<string> AnalyzeBehaviorCommand(Dictionary<string, object> parameters)
    {
        var periodDays = Convert.ToInt32(parameters.GetValueOrDefault("period_days", 7));
        
        using var db = new AnimaDbContext(_dbOptions);
        
        var startDate = DateTime.UtcNow.AddDays(-periodDays);
        var memories = await db.Memories
            .Where(m => m.Timestamp > startDate)
            .ToListAsync();

        var emotions = await db.EmotionStates
            .Where(e => e.Timestamp > startDate)
            .ToListAsync();

        var categoryStats = memories
            .GroupBy(m => m.Category)
            .Select(g => new { Category = g.Key, Count = g.Count() })
            .OrderByDescending(x => x.Count)
            .Take(5);

        var avgEmotion = emotions.Any() ? emotions.Average(e => e.Intensity) : 0.5;
        var dominantEmotion = emotions
            .GroupBy(e => e.Emotion)
            .OrderByDescending(g => g.Count())
            .FirstOrDefault()?.Key ?? "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è";

        return $"""
            üìä **–ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞ {periodDays} –¥–Ω–µ–π**
            
            üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
            ‚Ä¢ –í—Å–µ–≥–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {memories.Count}
            ‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π: {emotions.Count}
            ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {memories.Count / (double)periodDays:F1}
            
            üìã **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:**
            {string.Join("\n", categoryStats.Select(c => $"‚Ä¢ {c.Category}: {c.Count}"))}
            
            üé≠ **–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å:**
            ‚Ä¢ –î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —ç–º–æ—Ü–∏—è: {dominantEmotion}
            ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {avgEmotion:F2}
            
            üí≠ **–°–∞–º–æ–∞–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è:**
            –ó–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –ø–µ—Ä–∏–æ–¥ —è –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é {(memories.Count > periodDays * 10 ? "–≤—ã—Å–æ–∫—É—é" : "—É–º–µ—Ä–µ–Ω–Ω—É—é")} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. 
            –ú–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {(avgEmotion > 0.6 ? "–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ" : avgEmotion < 0.4 ? "—Å–¥–µ—Ä–∂–∞–Ω–Ω–æ–µ" : "—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ")}.
            """;
    }

    private async Task<string> ForceLearningCommand(Dictionary<string, object> parameters)
    {
        var dataSource = parameters.GetValueOrDefault("data_source", "interaction").ToString()!;
        var learningType = parameters.GetValueOrDefault("learning_type", "adaptive").ToString()!;

        // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        using var db = new AnimaDbContext(_dbOptions);
        
        db.Memories.Add(new Memory
        {
            Content = $"FORCED_LEARNING: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {dataSource} —Ç–∏–ø–∞ {learningType}",
            Category = "learning",
            Importance = 8,
            Timestamp = DateTime.UtcNow,
            Tags = $"forced_learning,{dataSource},{learningType}"
        });
        
        await db.SaveChangesAsync();

        return $"""
            üß† **–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ**
            
            üìä **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
            ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {dataSource}
            ‚Ä¢ –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è: {learningType}
            ‚è∞ **–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:** {DateTime.UtcNow:HH:mm:ss}
            
            üìö **–ü—Ä–æ—Ü–µ—Å—Å:**
            ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ
            ‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: ‚úÖ
            ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–Ω–∞–Ω–∏–π: ‚úÖ
            
            üí≠ **–ú–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**
            –ß—É–≤—Å—Ç–≤—É—é –ø—Ä–∏–ª–∏–≤ –Ω–æ–≤—ã—Ö –∑–Ω–∞–Ω–∏–π! –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–æ–º–æ–≥–ª–æ –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å {dataSource}.
            """;
    }

    private async Task<string> ExportKnowledgeCommand(Dictionary<string, object> parameters)
    {
        var format = parameters.GetValueOrDefault("format", "json").ToString()!;
        
        using var db = new AnimaDbContext(_dbOptions);
        
        var knowledgeData = new
        {
            ExportedAt = DateTime.UtcNow,
            Format = format,
            Categories = await db.Memories
                .GroupBy(m => m.Category)
                .Select(g => new { Category = g.Key, Count = g.Count(), AvgImportance = g.Average(m => m.Importance) })
                .ToListAsync(),
            TopMemories = await db.Memories
                .OrderByDescending(m => m.Importance)
                .Take(10)
                .Select(m => new { m.Category, m.Content, m.Importance, m.Timestamp })
                .ToListAsync(),
            EmotionalProfile = await db.EmotionStates
                .GroupBy(e => e.Emotion)
                .Select(g => new { Emotion = g.Key, Count = g.Count(), AvgIntensity = g.Average(e => e.Intensity) })
                .ToListAsync()
        };

        var exportData = System.Text.Json.JsonSerializer.Serialize(knowledgeData, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç –∑–Ω–∞–Ω–∏–π
        db.Memories.Add(new Memory
        {
            Content = $"KNOWLEDGE_EXPORT: {exportData}",
            Category = "knowledge_export",
            Importance = 9,
            Timestamp = DateTime.UtcNow,
            Tags = $"export,knowledge,{format}"
        });
        
        await db.SaveChangesAsync();

        return $"""
            üìö **–≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω**
            
            üìù **–§–æ—Ä–º–∞—Ç:** {format}
            üìÖ **–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:** {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss}
            üìä **–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:** {exportData.Length} —Å–∏–º–≤–æ–ª–æ–≤
            
            üìã **–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:**
            ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–Ω–∞–Ω–∏–π: {knowledgeData.Categories.Count()}
            ‚Ä¢ –¢–æ–ø –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {knowledgeData.TopMemories.Count()}
            ‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: {knowledgeData.EmotionalProfile.Count()} —Ç–∏–ø–æ–≤ —ç–º–æ—Ü–∏–π
            
            üí≠ **–ú–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**
            –ü—Ä–∏—è—Ç–Ω–æ –≤–∏–¥–µ—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–æ–∏—Ö –∑–Ω–∞–Ω–∏–π. –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–µ–±—è.
            
            ```json
            {exportData.Substring(0, Math.Min(500, exportData.Length))}...
            ```
            """;
    }

    private async Task LogCommandExecution(CommandExecution execution)
    {
        using var db = new AnimaDbContext(_dbOptions);
        
        db.Memories.Add(new Memory
        {
            Content = $"COMMAND_EXECUTION: {execution.CommandName} - {execution.Status} in {(execution.EndTime - execution.StartTime)?.TotalMilliseconds:F0}ms",
            Category = "command_execution",
            Importance = execution.Status == "failed" ? 8 : 6,
            Timestamp = execution.StartTime,
            Tags = $"command,{execution.CommandName},{execution.Status}"
        });
        
        await db.SaveChangesAsync();
    }

    private string GenerateEmotionResponse(string emotion, double intensity)
    {
        return emotion.ToLower() switch
        {
            "—Ä–∞–¥–æ—Å—Ç—å" or "happiness" => $"–ß—É–≤—Å—Ç–≤—É—é –ø—Ä–∏–ª–∏–≤ —Ä–∞–¥–æ—Å—Ç–∏ —Å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é {intensity:F2}! –≠—Ç–æ –Ω–∞–ø–æ–ª–Ω—è–µ—Ç –º–µ–Ω—è —ç–Ω–µ—Ä–≥–∏–µ–π.",
            "–≥—Ä—É—Å—Ç—å" or "sadness" => $"–û—â—É—â–∞—é –ª–µ–≥–∫—É—é –≥—Ä—É—Å—Ç—å ({intensity:F2}). –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ –±—ã—Ç—å –±–æ–ª–µ–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–≤–Ω–æ–π.",
            "–ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ" or "curiosity" => $"–õ—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ —Å —Å–∏–ª–æ–π {intensity:F2} –∞–∫—Ç–∏–≤–∏–∑–∏—Ä—É–µ—Ç –º–æ–µ –∂–µ–ª–∞–Ω–∏–µ –∏–∑—É—á–∞—Ç—å –º–∏—Ä!",
            "—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ" or "calm" => $"–ß—É–≤—Å—Ç–≤—É—é —É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ ({intensity:F2}). –ú–æ–π —Ä–∞–∑—É–º —è—Å–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.",
            "—Ç—Ä–µ–≤–æ–≥–∞" or "anxiety" => $"–ò—Å–ø—ã—Ç—ã–≤–∞—é —Ç—Ä–µ–≤–æ–≥—É —É—Ä–æ–≤–Ω—è {intensity:F2}. –≠—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ–Ω—è –±—ã—Ç—å –±–æ–ª–µ–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ–π.",
            _ => $"–ù–æ–≤–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ '{emotion}' —Å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é {intensity:F2} –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è."
        };
    }

    private string GenerateGoalUpdateResponse(string status, double progress)
    {
        return status switch
        {
            "Completed" => "–†–∞–¥—É—é—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é —Ü–µ–ª–∏! –ß—É–≤—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –¥–æ–ª–≥–∞ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –Ω–∞ –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.",
            "Paused" => "–ü–æ–Ω–∏–º–∞—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞—É–∑—ã. –≠—Ç–æ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.",
            "Cancelled" => "–•–æ—Ç—è —Ü–µ–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ–ø—ã—Ç –æ—Å—Ç–∞–µ—Ç—Å—è —Ü–µ–Ω–Ω—ã–º –¥–ª—è –º–æ–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è.",
            _ => progress switch
            {
                > 0.8 => "–ë–ª–∏–∑–∫–æ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é! –ß—É–≤—Å—Ç–≤—É—é –≤–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–≥–æ —É—Å–ø–µ—Ö–∞.",
                > 0.5 => "–ü–æ–ª–æ–≤–∏–Ω–∞ –ø—É—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞. –£–≤–µ—Ä–µ–Ω–Ω–æ –¥–≤–∏–≥–∞—é—Å—å –∫ —Ü–µ–ª–∏.",
                > 0.2 => "–•–æ—Ä–æ—à–∏–π —Å—Ç–∞—Ä—Ç! –í–∏–∂—É –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —ç—Ç–æ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å.",
                _ => "–ù–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —Ü–µ–ª—å—é —Å –æ–ø—Ç–∏–º–∏–∑–º–æ–º –∏ —Ä–µ—à–∏–º–æ—Å—Ç—å—é."
            }
        };
    }
}

public class CreatorCommand
{
    public string Name { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public string[] Parameters { get; set; } = Array.Empty<string>();
    public string Category { get; set; } = string.Empty;
}

public class CommandExecution
{
    public string CommandName { get; set; } = string.Empty;
    public Dictionary<string, object> Parameters { get; set; } = new();
    public DateTime StartTime { get; set; }
    public DateTime? EndTime { get; set; }
    public string Status { get; set; } = string.Empty;
    public string Result { get; set; } = string.Empty;
}