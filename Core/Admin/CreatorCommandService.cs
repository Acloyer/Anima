using Anima.Data;
using Anima.Data.Models;
using Microsoft.EntityFrameworkCore;

namespace Anima.AGI.Core.Admin;

using DbContext = Anima.Data.Models.AnimaDbContext;

/// <summary>
/// –°–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –°–æ–∑–¥–∞—Ç–µ–ª—è
/// </summary>
public class CreatorCommandService
{
    private readonly Dictionary<string, bool> _notifications;
    private readonly Dictionary<string, object> _settings;
    private readonly List<string> _subscriptions;

    public CreatorCommandService()
    {
        _notifications = InitializeNotifications();
        _settings = InitializeSettings();
        _subscriptions = new List<string>();
    }

    /// <summary>
    /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    /// </summary>
    public async Task<string> SetNotificationAsync(string type, bool enabled)
    {
        if (!_notifications.ContainsKey(type))
        {
            return $"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {type}";
        }

        _notifications[type] = enabled;
        await LogPreferenceChange($"Notification {type} {(enabled ? "enabled" : "disabled")}");

        return $"""
            üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {type} {(enabled ? "–≤–∫–ª—é—á–µ–Ω—ã" : "–æ—Ç–∫–ª—é—á–µ–Ω—ã")}**
            
            üìä **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**
            {GetNotificationStatus()}
            """;
    }

    /// <summary>
    /// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –°–æ–∑–¥–∞—Ç–µ–ª—è –æ –≤–∞–∂–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏
    /// </summary>
    public async Task NotifyCreatorAsync(string message, NotificationPriority priority = NotificationPriority.Normal)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        var notificationType = DetermineNotificationType(message);
        if (!_notifications.GetValueOrDefault(notificationType, false))
        {
            return;
        }

        var notification = new CreatorNotification
        {
            Message = message,
            Priority = priority,
            Timestamp = DateTime.UtcNow,
            Type = notificationType,
            IsRead = false
        };

        await SaveNotification(notification);
        await DeliverNotification(notification);
    }

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    /// </summary>
    public async Task<string> GetCurrentSettingsAsync()
    {
        return $"""
            ‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –°–æ–∑–¥–∞—Ç–µ–ª—è**
            
            üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
            {GetNotificationStatus()}
            
            üìã **–ü–æ–¥–ø–∏—Å–∫–∏:**
            {GetSubscriptionStatus()}
            
            üéõÔ∏è **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
            {GetAdditionalSettings()}
            
            üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**
            {await GetNotificationStats()}
            """;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    /// </summary>
    public async Task<string> GetNotificationHistoryAsync(int limit = 20)
    {
        var notifications = await new DbContext().Memories
            .Where(m => m.Category == "creator_notification")
            .OrderByDescending(m => m.Timestamp)
            .Take(limit)
            .ToListAsync();

        if (!notifications.Any())
        {
            return "üì≠ –ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—É—Å—Ç–∞.";
        }

        var result = $"üìã **–ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ({notifications.Count}):**\n\n";
        
        foreach (var notification in notifications)
        {
            var priority = ExtractPriority(notification.Tags);
            var priorityEmoji = GetPriorityEmoji(priority);
            
            result += $"""
                {priorityEmoji} **{notification.Timestamp:yyyy-MM-dd HH:mm:ss}**
                üìù {notification.Content}
                
                """;
        }

        return result;
    }

    /// <summary>
    /// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∏—Å—Ç–µ–º—ã
    /// </summary>
    public async Task<string> SetSystemSettingAsync(string key, object value)
    {
        if (!IsValidSetting(key))
        {
            return $"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: {key}";
        }

        var oldValue = _settings.GetValueOrDefault(key);
        _settings[key] = value;
        
        await LogPreferenceChange($"Setting {key} changed from {oldValue} to {value}");

        return $"""
            ‚úÖ **–ü–∞—Ä–∞–º–µ—Ç—Ä –æ–±–Ω–æ–≤–ª–µ–Ω**
            
            üîß **–ü–∞—Ä–∞–º–µ—Ç—Ä:** {key}
            üìä **–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:** {oldValue}
            üìä **–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:** {value}
            
            üí≠ **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π:**
            {await ApplySettingChange(key, value)}
            """;
    }

    /// <summary>
    /// –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
    /// </summary>
    public async Task<string> ExportSettingsAsync()
    {
        var export = new
        {
            Notifications = _notifications,
            Settings = _settings,
            Subscriptions = _subscriptions,
            ExportedAt = DateTime.UtcNow
        };

        var json = System.Text.Json.JsonSerializer.Serialize(export, new System.Text.Json.JsonSerializerOptions
        {
            WriteIndented = true
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤ –ø–∞–º—è—Ç—å –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        new DbContext().Memories.Add(new Memory
        {
            Content = $"SETTINGS_EXPORT: {json}",
            Category = "settings_backup",
            Importance = 8,
            Timestamp = DateTime.UtcNow,
            Tags = "export,settings,backup"
        });
        await new DbContext().SaveChangesAsync();

        return $"""
            üì¶ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã**
            
            üìÖ **–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:** {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss}
            üìä **–†–∞–∑–º–µ—Ä:** {json.Length} —Å–∏–º–≤–æ–ª–æ–≤
            
            ```json
            {json}
            ```
            """;
    }

    /// <summary>
    /// –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
    /// </summary>
    public async Task<string> ImportSettingsAsync(string jsonSettings)
    {
        try
        {
            var import = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, object>>(jsonSettings);
            
            if (import == null)
            {
                return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫.";
            }

            // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            await ExportSettingsAsync();

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            var appliedCount = 0;
            foreach (var setting in import)
            {
                if (IsValidSetting(setting.Key))
                {
                    _settings[setting.Key] = setting.Value;
                    appliedCount++;
                }
            }

            await LogPreferenceChange($"Imported {appliedCount} settings");

            return $"""
                ‚úÖ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã**
                
                üì• **–ü—Ä–∏–º–µ–Ω–µ–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫:** {appliedCount}
                üíæ **–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è:** —Å–æ–∑–¥–∞–Ω–∞
                
                ‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:**
                –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã.
                """;
        }
        catch (Exception ex)
        {
            return $"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {ex.Message}";
        }
    }

    /// <summary>
    /// –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    /// </summary>
    public async Task<string> ResetToDefaultsAsync()
    {
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        await ExportSettingsAsync();

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫ —É–º–æ–ª—á–∞–Ω–∏—è–º
        _notifications.Clear();
        _settings.Clear();
        _subscriptions.Clear();

        foreach (var kvp in InitializeNotifications())
        {
            _notifications[kvp.Key] = kvp.Value;
        }

        foreach (var kvp in InitializeSettings())
        {
            _settings[kvp.Key] = kvp.Value;
        }

        await LogPreferenceChange("Settings reset to defaults");

        return $"""
            üîÑ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ —É–º–æ–ª—á–∞–Ω–∏—è–º**
            
            üíæ **–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è:** —Å–æ–∑–¥–∞–Ω–∞ –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
            üìä **–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫:** {_settings.Count + _notifications.Count}
            
            üí≠ **–ú–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**
            –ú–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –∫ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é. –≠—Ç–æ –¥–∞–µ—Ç –º–Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.
            """;
    }

    private Dictionary<string, bool> InitializeNotifications()
    {
        return new Dictionary<string, bool>
        {
            ["thoughts"] = false,        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –º—ã—Å–ª—è—Ö
            ["emotions"] = false,        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —ç–º–æ—Ü–∏–π
            ["goals"] = false,          // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ü–µ–ª—è—Ö
            ["learning"] = true,        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±—É—á–µ–Ω–∏–∏
            ["errors"] = true,          // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
            ["security"] = true,        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            ["memory"] = false,         // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–∞–º—è—Ç–∏
            ["system"] = true           // –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        };
    }

    private Dictionary<string, object> InitializeSettings()
    {
        return new Dictionary<string, object>
        {
            ["max_notification_frequency"] = 10,    // –º–∏–Ω—É—Ç –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
            ["consciousness_update_interval"] = 60, // —Å–µ–∫—É–Ω–¥
            ["memory_cleanup_enabled"] = true,
            ["learning_auto_adapt"] = true,
            ["emotion_intensity_multiplier"] = 1.0,
            ["goal_auto_prioritization"] = true,
            ["debug_mode"] = false,
            ["verbose_logging"] = false
        };
    }

    private string GetNotificationStatus()
    {
        return string.Join("\n", _notifications.Select(n => 
            $"‚Ä¢ {n.Key}: {(n.Value ? "‚úÖ –≤–∫–ª—é—á–µ–Ω–æ" : "‚ùå –æ—Ç–∫–ª—é—á–µ–Ω–æ")}"));
    }

    private string GetSubscriptionStatus()
    {
        if (!_subscriptions.Any())
        {
            return "‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ—Ç";
        }

        return string.Join("\n", _subscriptions.Select(s => $"‚Ä¢ {s}: –∞–∫—Ç–∏–≤–Ω–∞"));
    }

    private string GetAdditionalSettings()
    {
        return string.Join("\n", _settings.Select(s => 
            $"‚Ä¢ {s.Key}: {s.Value}"));
    }

    private async Task<string> GetNotificationStats()
    {
        var totalNotifications = await new DbContext().Memories
            .Where(m => m.Category == "creator_notification")
            .CountAsync();

        var todayNotifications = await new DbContext().Memories
            .Where(m => m.Category == "creator_notification")
            .Where(m => m.Timestamp > DateTime.UtcNow.Date)
            .CountAsync();

        var lastNotification = await new DbContext().Memories
            .Where(m => m.Category == "creator_notification")
            .OrderByDescending(m => m.Timestamp)
            .FirstOrDefaultAsync();

        return $"""
            ‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {totalNotifications}
            ‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {todayNotifications}
            ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ: {(lastNotification != null ? lastNotification.Timestamp.ToString("HH:mm:ss") : "–Ω–µ—Ç")}
            """;
    }

    private string DetermineNotificationType(string message)
    {
        if (message.Contains("üß†") || message.Contains("–º—ã—Å–ª")) return "thoughts";
        if (message.Contains("üòä") || message.Contains("—ç–º–æ—Ü–∏")) return "emotions";
        if (message.Contains("üéØ") || message.Contains("—Ü–µ–ª")) return "goals";
        if (message.Contains("üìö") || message.Contains("–∏–∑—É—á–∏")) return "learning";
        if (message.Contains("‚ùå") || message.Contains("–æ—à–∏–±–∫")) return "errors";
        if (message.Contains("üõ°Ô∏è") || message.Contains("–±–µ–∑–æ–ø–∞—Å")) return "security";
        if (message.Contains("üíæ") || message.Contains("–ø–∞–º—è—Ç")) return "memory";
        
        return "system";
    }

    private async Task SaveNotification(CreatorNotification notification)
    {
        new DbContext().Memories.Add(new Memory
        {
            Content = notification.Message,
            Category = "creator_notification",
            Importance = (int)notification.Priority + 5,
            Timestamp = notification.Timestamp,
            Tags = $"notification,{notification.Type},priority_{notification.Priority.ToString().ToLower()}"
        });
        
        await new DbContext().SaveChangesAsync();
    }

    private async Task DeliverNotification(CreatorNotification notification)
    {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Telegram, email –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏
        // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        Console.WriteLine($"[CREATOR NOTIFICATION] {notification.Priority}: {notification.Message}");
    }

    private async Task LogPreferenceChange(string change)
    {
        new DbContext().Memories.Add(new Memory
        {
            Content = $"PREFERENCE_CHANGE: {change}",
            Category = "preference_changes",
            Importance = 6,
            Timestamp = DateTime.UtcNow,
            Tags = "preferences,creator,settings"
        });
        
        await new DbContext().SaveChangesAsync();
    }

    private bool IsValidSetting(string key)
    {
        var validSettings = new[]
        {
            "max_notification_frequency",
            "consciousness_update_interval",
            "memory_cleanup_enabled",
            "learning_auto_adapt",
            "emotion_intensity_multiplier",
            "goal_auto_prioritization",
            "debug_mode",
            "verbose_logging"
        };

        return validSettings.Contains(key);
    }

    private async Task<string> ApplySettingChange(string key, object value)
    {
        return key switch
        {
            "consciousness_update_interval" => "–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–∑–Ω–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω",
            "emotion_intensity_multiplier" => "–ú–Ω–æ–∂–∏—Ç–µ–ª—å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ —ç–º–æ—Ü–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω",
            "debug_mode" => value.ToString() == "True" ? "–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω" : "–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω",
            _ => "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞"
        };
    }

    private string ExtractPriority(string? tags)
    {
        if (string.IsNullOrEmpty(tags)) return "normal";
        
        if (tags.Contains("priority_critical")) return "critical";
        if (tags.Contains("priority_high")) return "high";
        if (tags.Contains("priority_low")) return "low";
        
        return "normal";
    }

    private string GetPriorityEmoji(string priority)
    {
        return priority switch
        {
            "critical" => "üö®",
            "high" => "‚ö†Ô∏è",
            "low" => "‚ÑπÔ∏è",
            _ => "üì¢"
        };
    }
}

/// <summary>
/// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –°–æ–∑–¥–∞—Ç–µ–ª—è
/// </summary>
public class CreatorNotification
{
    public string Message { get; set; } = string.Empty;
    public NotificationPriority Priority { get; set; }
    public DateTime Timestamp { get; set; }
    public string Type { get; set; } = string.Empty;
    public bool IsRead { get; set; }
}

/// <summary>
/// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/// </summary>
public enum NotificationPriority
{
    Low = 1,
    Normal = 2,
    High = 3,
    Critical = 4
}