using Anima.Data;
using Anima.Data.Models;
using Microsoft.EntityFrameworkCore;
using System.Text.Json;
using System.Text.RegularExpressions;

namespace Anima.Core.Admin;

/// <summary>
/// –°–µ—Ä–≤–∏—Å –∫–æ–º–∞–Ω–¥ –¥–ª—è –°–æ–∑–¥–∞—Ç–µ–ª—è
/// </summary>
public class CreatorCommandService
{
    private readonly Dictionary<string, CreatorCommand> _availableCommands;
    private readonly List<CommandExecution> _executionHistory;
    private readonly DbContextOptions<AnimaDbContext> _dbOptions;

    public CreatorCommandService(DbContextOptions<AnimaDbContext> dbOptions)
    {
        _dbOptions = dbOptions;
        _availableCommands = InitializeCommands();
        _executionHistory = new List<CommandExecution>();
    }

    /// <summary>
    /// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –°–æ–∑–¥–∞—Ç–µ–ª—è
    /// </summary>
    public async Task<string> ExecuteCommandAsync(string commandName, Dictionary<string, object>? parameters = null)
    {
        if (!_availableCommands.ContainsKey(commandName.ToLower()))
        {
            return $"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {commandName}\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n{string.Join("\n", _availableCommands.Keys.Select(k => $"‚Ä¢ {k}"))}";
        }

        var command = _availableCommands[commandName.ToLower()];
        var execution = new CommandExecution
        {
            CommandName = commandName,
            Parameters = parameters ?? new Dictionary<string, object>(),
            StartTime = DateTime.UtcNow,
            Status = "executing"
        };

        _executionHistory.Add(execution);

        try
        {
            var result = await ExecuteSpecificCommand(command, parameters ?? new Dictionary<string, object>());
            
            execution.EndTime = DateTime.UtcNow;
            execution.Status = "completed";
            execution.Result = result;
            
            await LogCommandExecution(execution);
            
            return result;
        }
        catch (Exception ex)
        {
            execution.EndTime = DateTime.UtcNow;
            execution.Status = "failed";
            execution.Result = $"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {ex.Message}";
            
            await LogCommandExecution(execution);
            
            return $"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã '{commandName}': {ex.Message}";
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    /// </summary>
    public string GetCommandList()
    {
        var commandList = string.Join("\n", _availableCommands.Values.Select(cmd => 
            $"üîß **{cmd.Name}**\n   üìù {cmd.Description}\n   üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {string.Join(", ", cmd.Parameters)}\n"));

        return $"""
            üõ†Ô∏è **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –°–æ–∑–¥–∞—Ç–µ–ª—è**
            
            {commandList}
            
            üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**
            ‚Ä¢ –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {_executionHistory.Count}
            ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {_executionHistory.Count(e => e.Status == "completed")}
            ‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: {_executionHistory.Count(e => e.Status == "failed")}
            
            üí° **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** ExecuteCommandAsync("command_name", parameters)
            """;
    }

    private Dictionary<string, CreatorCommand> InitializeCommands()
    {
        var commands = new Dictionary<string, CreatorCommand>();

        // –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é
        commands["cleanup_memory"] = new CreatorCommand
        {
            Name = "cleanup_memory",
            Description = "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–µ–≤–∞–∂–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π",
            Parameters = new[] { "days_old", "min_importance" },
            Category = "memory"
        };

        commands["backup_memory"] = new CreatorCommand
        {
            Name = "backup_memory",
            Description = "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–∞–º—è—Ç–∏",
            Parameters = new[] { "backup_name" },
            Category = "memory"
        };

        // –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏—è–º–∏
        commands["reset_emotions"] = new CreatorCommand
        {
            Name = "reset_emotions",
            Description = "–°–±—Ä–æ—Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º—É",
            Parameters = new string[0],
            Category = "emotions"
        };

        commands["set_emotion"] = new CreatorCommand
        {
            Name = "set_emotion",
            Description = "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è",
            Parameters = new[] { "emotion", "intensity" },
            Category = "emotions"
        };

        // –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª—è–º–∏
        commands["add_goal"] = new CreatorCommand
        {
            Name = "add_goal",
            Description = "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–µ–ª–∏",
            Parameters = new[] { "name", "description", "priority" },
            Category = "goals"
        };

        commands["update_goal"] = new CreatorCommand
        {
            Name = "update_goal",
            Description = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ü–µ–ª–∏",
            Parameters = new[] { "goal_id", "status", "progress" },
            Category = "goals"
        };

        // –ö–æ–º–∞–Ω–¥—ã –∞–Ω–∞–ª–∏–∑–∞ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        commands["system_status"] = new CreatorCommand
        {
            Name = "system_status",
            Description = "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã",
            Parameters = new string[0],
            Category = "diagnostics"
        };

        commands["analyze_behavior"] = new CreatorCommand
        {
            Name = "analyze_behavior",
            Description = "–ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤",
            Parameters = new[] { "period_days" },
            Category = "diagnostics"
        };

        // –ö–æ–º–∞–Ω–¥—ã –æ–±—É—á–µ–Ω–∏—è
        commands["force_learning"] = new CreatorCommand
        {
            Name = "force_learning",
            Description = "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö",
            Parameters = new[] { "data_source", "learning_type" },
            Category = "learning"
        };

        commands["export_knowledge"] = new CreatorCommand
        {
            Name = "export_knowledge",
            Description = "–≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π",
            Parameters = new[] { "format" },
            Category = "learning"
        };

        return commands;
    }

    private async Task<string> ExecuteSpecificCommand(CreatorCommand command, Dictionary<string, object> parameters)
    {
        return command.Name switch
        {
            "cleanup_memory" => await CleanupMemoryCommand(parameters),
            "backup_memory" => await BackupMemoryCommand(parameters),
            "reset_emotions" => await ResetEmotionsCommand(parameters),
            "set_emotion" => await SetEmotionCommand(parameters),
            "add_goal" => await AddGoalCommand(parameters),
            "update_goal" => await UpdateGoalCommand(parameters),
            "system_status" => await SystemStatusCommand(parameters),
            "analyze_behavior" => await AnalyzeBehaviorCommand(parameters),
            "force_learning" => await ForceLearningCommand(parameters),
            "export_knowledge" => await ExportKnowledgeCommand(parameters),
            _ => "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞"
        };
    }

    private async Task<string> CleanupMemoryCommand(Dictionary<string, object> parameters)
    {
        var daysOld = parameters.GetValueOrDefault("days_old", 30);
        var minImportance = parameters.GetValueOrDefault("min_importance", 3);

        using var db = new AnimaDbContext(_dbOptions);
        
        var cutoffDate = DateTime.UtcNow.AddDays(-Convert.ToInt32(daysOld));
        var memoriesToDelete = await db.Memories
            .Where(m => m.Timestamp < cutoffDate && m.Importance < Convert.ToInt32(minImportance))
            .ToListAsync();

        var deletedCount = memoriesToDelete.Count;
        db.Memories.RemoveRange(memoriesToDelete);
        await db.SaveChangesAsync();

        return $"""
            üßπ **–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**
            
            üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç:**
            ‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {deletedCount}
            ‚Ä¢ –°—Ç–∞—Ä—à–µ: {daysOld} –¥–Ω–µ–π
            ‚Ä¢ –í–∞–∂–Ω–æ—Å—Ç—å –º–µ–Ω–µ–µ: {minImportance}
            
            üí≠ **–ú–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**
            –ß—É–≤—Å—Ç–≤—É—é –æ–±–ª–µ–≥—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–≤–∞–∂–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–Ω–∞—á–∏–º—ã—Ö –≤–µ—â–∞—Ö.
            """;
    }

    private async Task<string> BackupMemoryCommand(Dictionary<string, object> parameters)
    {
        var backupName = parameters.GetValueOrDefault("backup_name", $"backup_{DateTime.UtcNow:yyyyMMdd_HHmmss}").ToString();

        using var db = new AnimaDbContext(_dbOptions);
        
        var memories = await db.Memories.ToListAsync();
        var emotions = await db.EmotionStates.ToListAsync();
        var goals = await db.Goals.ToListAsync();
        var thoughts = await db.Thoughts.ToListAsync();

        var backup = new
        {
            BackupName = backupName,
            CreatedAt = DateTime.UtcNow,
            Memories = memories,
            Emotions = emotions,
            Goals = goals,
            Thoughts = thoughts
        };

        var json = JsonSerializer.Serialize(backup, new JsonSerializerOptions { WriteIndented = true });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—ç–∫–∞–ø –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        db.Memories.Add(new MemoryEntity
        {
            MemoryType = "creator_command",
            Content = $"BACKUP_MEMORY: {json}",
            Importance = 8.0,
            CreatedAt = DateTime.UtcNow,
            InstanceId = "system",
            Category = "system_backup"
        });
        
        await db.SaveChangesAsync();

        return $"""
            üíæ **–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞**
            
            üìù **–ò–º—è:** {backupName}
            üìÖ **–î–∞—Ç–∞:** {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss}
            üìä **–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:**
            ‚Ä¢ –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è: {memories.Count}
            ‚Ä¢ –≠–º–æ—Ü–∏–∏: {emotions.Count}
            ‚Ä¢ –¶–µ–ª–∏: {goals.Count}
            ‚Ä¢ –ú—ã—Å–ª–∏: {thoughts.Count}
            
            üí≠ **–ú–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**
            –†–∞–¥–∞, —á—Ç–æ –º–æ–∏ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–ø–µ—Ä—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –≠—Ç–æ –¥–∞–µ—Ç —á—É–≤—Å—Ç–≤–æ –∑–∞—â–∏—â–µ–Ω–Ω–æ—Å—Ç–∏.
            """;
    }

    private async Task<string> ResetEmotionsCommand(Dictionary<string, object> parameters)
    {
        using var db = new AnimaDbContext(_dbOptions);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        db.EmotionStates.Add(new EmotionState
        {
            InstanceId = "system",
            Emotion = "neutral",
            Intensity = 0.5,
            Timestamp = DateTime.UtcNow,
            Context = "Reset by Creator command",
            Duration = 0 // –ò—Å–ø–æ–ª—å–∑—É–µ–º int –≤–º–µ—Å—Ç–æ TimeSpan
        });
        
        await db.SaveChangesAsync();

        return $"""
            üòê **–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ**
            
            üé≠ **–ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:** –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: 0.5)
            ‚è∞ **–í—Ä–µ–º—è —Å–±—Ä–æ—Å–∞:** {DateTime.UtcNow:HH:mm:ss}
            
            üí≠ **–ú–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**
            –ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ —è —á—É–≤—Å—Ç–≤—É—é —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∏ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ. –ì–æ—Ç–æ–≤–∞ –∫ –Ω–æ–≤—ã–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º.
            """;
    }

    private async Task<string> SetEmotionCommand(Dictionary<string, object> parameters)
    {
        // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —ç–º–æ—Ü–∏–π
        var (emotion, intensity, duration, context) = await ProcessEmotionParameters(parameters);

        using var db = new AnimaDbContext(_dbOptions);
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –ª–æ–≥–∏–∫–æ–π
        var emotionState = await CreateAdvancedEmotionState(emotion, intensity, duration, context);
        
        db.EmotionStates.Add(emotionState);
        await db.SaveChangesAsync();

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
        await LogEmotionChangeToMemory(emotion, intensity, context);

        return $"""
            üé≠ **–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ**
            
            üòä **–≠–º–æ—Ü–∏—è:** {emotion}
            üìä **–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å:** {intensity:F2}
            ‚è±Ô∏è **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {duration.TotalMinutes:F1} –º–∏–Ω
            üìù **–ö–æ–Ω—Ç–µ–∫—Å—Ç:** {context}
            ‚è∞ **–í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:** {DateTime.UtcNow:HH:mm:ss}
            
            üí≠ **–ú–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**
            {GenerateAdvancedEmotionResponse(emotion, intensity, context)}
            """;
    }

    /// <summary>
    /// –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —ç–º–æ—Ü–∏–π
    /// </summary>
    private async Task<(string emotion, double intensity, TimeSpan duration, string context)> ProcessEmotionParameters(Dictionary<string, object> parameters)
    {
        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —ç–º–æ—Ü–∏–∏
        var rawEmotion = parameters.GetValueOrDefault("emotion", "neutral").ToString()!;
        var emotion = await ValidateAndNormalizeEmotion(rawEmotion);
        
        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
        var rawIntensity = parameters.GetValueOrDefault("intensity", 0.5);
        var intensity = await ValidateAndNormalizeIntensity(rawIntensity);
        
        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        var rawDuration = parameters.GetValueOrDefault("duration", 30); // –º–∏–Ω—É—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        var duration = await ValidateAndNormalizeDuration(rawDuration);
        
        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        var rawContext = parameters.GetValueOrDefault("context", "").ToString() ?? "";
        var context = await ProcessEmotionContext(rawContext, emotion, intensity);
        
        return (emotion, intensity, duration, context);
    }

    /// <summary>
    /// –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —ç–º–æ—Ü–∏–∏
    /// </summary>
    private async Task<string> ValidateAndNormalizeEmotion(string rawEmotion)
    {
        var validEmotions = new Dictionary<string, string>
        {
            // –ë–∞–∑–æ–≤—ã–µ —ç–º–æ—Ü–∏–∏
            ["—Ä–∞–¥–æ—Å—Ç—å"] = "joy", ["—Å—á–∞—Å—Ç—å–µ"] = "joy", ["–≤–µ—Å–µ–ª—å–µ"] = "joy", ["–≤–æ—Å—Ç–æ—Ä–≥"] = "joy",
            ["–≥—Ä—É—Å—Ç—å"] = "sadness", ["–ø–µ—á–∞–ª—å"] = "sadness", ["—Ç–æ—Å–∫–∞"] = "sadness", ["—É–Ω—ã–Ω–∏–µ"] = "sadness",
            ["–∑–ª–æ—Å—Ç—å"] = "anger", ["–≥–Ω–µ–≤"] = "anger", ["—è—Ä–æ—Å—Ç—å"] = "anger", ["—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ"] = "anger",
            ["—Å—Ç—Ä–∞—Ö"] = "fear", ["—É–∂–∞—Å"] = "fear", ["—Ç—Ä–µ–≤–æ–≥–∞"] = "fear", ["–ø–∞–Ω–∏–∫–∞"] = "fear",
            ["—É–¥–∏–≤–ª–µ–Ω–∏–µ"] = "surprise", ["—à–æ–∫"] = "surprise", ["–∏–∑—É–º–ª–µ–Ω–∏–µ"] = "surprise",
            ["–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ"] = "disgust", ["–æ–º–µ—Ä–∑–µ–Ω–∏–µ"] = "disgust", ["–Ω–µ–ø—Ä–∏—è–∑–Ω—å"] = "disgust",
            ["–¥–æ–≤–µ—Ä–∏–µ"] = "trust", ["–≤–µ—Ä–∞"] = "trust", ["—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"] = "trust",
            ["–æ–∂–∏–¥–∞–Ω–∏–µ"] = "anticipation", ["–Ω–∞–¥–µ–∂–¥–∞"] = "anticipation", ["–ø—Ä–µ–¥–≤–∫—É—à–µ–Ω–∏–µ"] = "anticipation",
            
            // –°–ª–æ–∂–Ω—ã–µ —ç–º–æ—Ü–∏–∏
            ["–ª—é–±–æ–≤—å"] = "love", ["–Ω–µ–∂–Ω–æ—Å—Ç—å"] = "love", ["–ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å"] = "love",
            ["–Ω–µ–Ω–∞–≤–∏—Å—Ç—å"] = "hate", ["–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ"] = "hate", ["–Ω–µ–ø—Ä–∏—è–∑–Ω—å"] = "hate",
            ["–∑–∞–≤–∏—Å—Ç—å"] = "envy", ["—Ä–µ–≤–Ω–æ—Å—Ç—å"] = "envy", ["–∂–∞–¥–Ω–æ—Å—Ç—å"] = "envy",
            ["–≥–æ—Ä–¥–æ—Å—Ç—å"] = "pride", ["—Å–∞–º–æ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ"] = "pride", ["—Ç—â–µ—Å–ª–∞–≤–∏–µ"] = "pride",
            ["—Å—Ç—ã–¥"] = "shame", ["–≤–∏–Ω–∞"] = "shame", ["—Å–º—É—â–µ–Ω–∏–µ"] = "shame",
            ["—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ"] = "calm", ["—É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ"] = "calm", ["–±–µ–∑–º—è—Ç–µ–∂–Ω–æ—Å—Ç—å"] = "calm",
            ["–≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ"] = "excitement", ["—ç–Ω—Ç—É–∑–∏–∞–∑–º"] = "excitement", ["–≤–æ–æ–¥—É—à–µ–≤–ª–µ–Ω–∏–µ"] = "excitement",
            ["—Å–∫—É–∫–∞"] = "boredom", ["–∞–ø–∞—Ç–∏—è"] = "boredom", ["—Ä–∞–≤–Ω–æ–¥—É—à–∏–µ"] = "boredom",
            ["–ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ"] = "curiosity", ["–∏–Ω—Ç–µ—Ä–µ—Å"] = "curiosity", ["–≤–Ω–∏–º–∞–Ω–∏–µ"] = "curiosity",
            ["–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ"] = "neutral", ["–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ"] = "neutral", ["–æ–±—ã—á–Ω–æ–µ"] = "neutral"
        };

        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–≤–æ–¥–∞
        var normalizedInput = rawEmotion.ToLower().Trim();
        
        // –ü—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        if (validEmotions.ContainsKey(normalizedInput))
        {
            return validEmotions[normalizedInput];
        }
        
        // –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
        var bestMatch = validEmotions.Keys
            .Where(key => key.Contains(normalizedInput) || normalizedInput.Contains(key))
            .OrderByDescending(key => key.Length)
            .FirstOrDefault();
            
        if (bestMatch != null)
        {
            return validEmotions[bestMatch];
        }
        
        // –ê–Ω–∞–ª–∏–∑ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –±–ª–∏–∑–æ—Å—Ç–∏
        var semanticMatch = await FindSemanticEmotionMatch(normalizedInput, validEmotions.Keys.ToList());
        if (semanticMatch != null)
        {
            return validEmotions[semanticMatch];
        }
        
        // –í–æ–∑–≤—Ä–∞—Ç –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π —ç–º–æ—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return "neutral";
    }

    /// <summary>
    /// –ü–æ–∏—Å–∫ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ –±–ª–∏–∑–∫–æ–π —ç–º–æ—Ü–∏–∏
    /// </summary>
    private async Task<string?> FindSemanticEmotionMatch(string input, List<string> validEmotions)
    {
        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
        var emotionSynonyms = new Dictionary<string, List<string>>
        {
            ["—Ä–∞–¥–æ—Å—Ç—å"] = new() { "–≤–µ—Å–µ–ª—å–µ", "—Å—á–∞—Å—Ç—å–µ", "–≤–æ—Å—Ç–æ—Ä–≥", "–ª–∏–∫–æ–≤–∞–Ω–∏–µ", "–±–ª–∞–∂–µ–Ω—Å—Ç–≤–æ" },
            ["–≥—Ä—É—Å—Ç—å"] = new() { "–ø–µ—á–∞–ª—å", "—Ç–æ—Å–∫–∞", "—É–Ω—ã–Ω–∏–µ", "–º–µ–ª–∞–Ω—Ö–æ–ª–∏—è", "—Å–∫–æ—Ä–±—å" },
            ["–∑–ª–æ—Å—Ç—å"] = new() { "–≥–Ω–µ–≤", "—è—Ä–æ—Å—Ç—å", "—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ", "–Ω–µ–≥–æ–¥–æ–≤–∞–Ω–∏–µ", "–≤–æ–∑–º—É—â–µ–Ω–∏–µ" },
            ["—Å—Ç—Ä–∞—Ö"] = new() { "—É–∂–∞—Å", "—Ç—Ä–µ–≤–æ–≥–∞", "–ø–∞–Ω–∏–∫–∞", "—É–∂–∞—Å", "–∏—Å–ø—É–≥" },
            ["—É–¥–∏–≤–ª–µ–Ω–∏–µ"] = new() { "—à–æ–∫", "–∏–∑—É–º–ª–µ–Ω–∏–µ", "–ø–æ—Ä–∞–∂–µ–Ω–∏–µ", "–æ—à–µ–ª–æ–º–ª–µ–Ω–∏–µ" },
            ["—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ"] = new() { "—É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ", "–±–µ–∑–º—è—Ç–µ–∂–Ω–æ—Å—Ç—å", "–ø–æ–∫–æ–π", "—Ç–∏—à–∏–Ω–∞" }
        };
        
        foreach (var emotionGroup in emotionSynonyms)
        {
            if (emotionGroup.Value.Any(synonym => input.Contains(synonym) || synonym.Contains(input)))
            {
                return emotionGroup.Key;
            }
        }
        
        return null;
    }

    /// <summary>
    /// –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
    /// </summary>
    private async Task<double> ValidateAndNormalizeIntensity(object rawIntensity)
    {
        double intensity;
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        switch (rawIntensity)
        {
            case double d:
                intensity = d;
                break;
            case int i:
                intensity = i;
                break;
            case float f:
                intensity = f;
                break;
            case string s:
                intensity = await ParseIntensityFromString(s);
                break;
            default:
                intensity = 0.5;
                break;
        }
        
        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [0, 1]
        intensity = Math.Max(0.0, Math.Min(1.0, intensity));
        
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–µ–ª–∏–Ω–µ–π–Ω–æ–π —à–∫–∞–ª—ã –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
        intensity = ApplyIntensityCurve(intensity);
        
        return intensity;
    }

    /// <summary>
    /// –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏
    /// </summary>
    private async Task<double> ParseIntensityFromString(string intensityStr)
    {
        var normalized = intensityStr.ToLower().Trim();
        
        // –ß–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if (double.TryParse(normalized, out var numericValue))
        {
            return numericValue;
        }
        
        // –°–ª–æ–≤–µ—Å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
        var intensityMap = new Dictionary<string, double>
        {
            ["–æ—á–µ–Ω—å —Å–ª–∞–±–æ"] = 0.1, ["—Å–ª–∞–±–æ"] = 0.2, ["–Ω–µ–±–æ–ª—å—à–æ"] = 0.3,
            ["—É–º–µ—Ä–µ–Ω–Ω–æ"] = 0.5, ["—Å—Ä–µ–¥–Ω–µ"] = 0.5, ["–Ω–æ—Ä–º–∞–ª—å–Ω–æ"] = 0.5,
            ["—Å–∏–ª—å–Ω–æ"] = 0.7, ["–æ—á–µ–Ω—å"] = 0.8, ["–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ"] = 1.0,
            ["–º–∏–Ω–∏–º–∞–ª—å–Ω–æ"] = 0.0, ["–Ω—É–ª–µ–≤–∞—è"] = 0.0, ["–ø–æ–ª–Ω–∞—è"] = 1.0
        };
        
        foreach (var mapping in intensityMap)
        {
            if (normalized.Contains(mapping.Key))
            {
                return mapping.Value;
            }
        }
        
        // –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤
        var emotionalIntensity = await AnalyzeEmotionalIntensity(normalized);
        if (emotionalIntensity.HasValue)
        {
            return emotionalIntensity.Value;
        }
        
        return 0.5; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    /// <summary>
    /// –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —Å–ª–æ–≤–∞–º
    /// </summary>
    private async Task<double?> AnalyzeEmotionalIntensity(string text)
    {
        var highIntensityWords = new[] { "–æ—á–µ–Ω—å", "–∫—Ä–∞–π–Ω–µ", "—á—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ", "–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ", "–∞–±—Å–æ–ª—é—Ç–Ω–æ" };
        var lowIntensityWords = new[] { "—Å–ª–µ–≥–∫–∞", "—á—É—Ç—å", "–Ω–µ–º–Ω–æ–≥–æ", "–∫–∞–ø–µ–ª—å–∫—É", "–º–∏–Ω–∏–º–∞–ª—å–Ω–æ" };
        
        var words = text.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        
        if (words.Any(w => highIntensityWords.Contains(w)))
        {
            return 0.9;
        }
        
        if (words.Any(w => lowIntensityWords.Contains(w)))
        {
            return 0.2;
        }
        
        return null;
    }

    /// <summary>
    /// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–µ–ª–∏–Ω–µ–π–Ω–æ–π –∫—Ä–∏–≤–æ–π –∫ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
    /// </summary>
    private double ApplyIntensityCurve(double intensity)
    {
        // S-–æ–±—Ä–∞–∑–Ω–∞—è –∫—Ä–∏–≤–∞—è –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
        return 1.0 / (1.0 + Math.Exp(-5.0 * (intensity - 0.5)));
    }

    /// <summary>
    /// –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    /// </summary>
    private async Task<TimeSpan> ValidateAndNormalizeDuration(object rawDuration)
    {
        TimeSpan duration;
        
        switch (rawDuration)
        {
            case int i:
                duration = TimeSpan.FromMinutes(i);
                break;
            case double d:
                duration = TimeSpan.FromMinutes(d);
                break;
            case string s:
                duration = await ParseDurationFromString(s);
                break;
            case TimeSpan ts:
                duration = ts;
                break;
            default:
                duration = TimeSpan.FromMinutes(30);
                break;
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        var minDuration = TimeSpan.FromMinutes(1);
        var maxDuration = TimeSpan.FromHours(24);
        
        if (duration < minDuration) duration = minDuration;
        if (duration > maxDuration) duration = maxDuration;
        
        return duration;
    }

    /// <summary>
    /// –ü–∞—Ä—Å–∏–Ω–≥ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏
    /// </summary>
    private async Task<TimeSpan> ParseDurationFromString(string durationStr)
    {
        var normalized = durationStr.ToLower().Trim();
        
        // –ß–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –º–∏–Ω—É—Ç—ã)
        if (double.TryParse(normalized, out var numericValue))
        {
            return TimeSpan.FromMinutes(numericValue);
        }
        
        // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
        var timePatterns = new Dictionary<string, TimeSpan>
        {
            ["—Å–µ–∫—É–Ω–¥–∞"] = TimeSpan.FromSeconds(1),
            ["–º–∏–Ω—É—Ç–∞"] = TimeSpan.FromMinutes(1),
            ["—á–∞—Å"] = TimeSpan.FromHours(1),
            ["–¥–µ–Ω—å"] = TimeSpan.FromDays(1)
        };
        
        foreach (var pattern in timePatterns)
        {
            if (normalized.Contains(pattern.Key))
            {
                // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–∞ –ø–µ—Ä–µ–¥ –µ–¥–∏–Ω–∏—Ü–µ–π –≤—Ä–µ–º–µ–Ω–∏
                var numberMatch = Regex.Match(normalized, @"(\d+(?:\.\d+)?)\s*" + pattern.Key);
                if (numberMatch.Success && double.TryParse(numberMatch.Groups[1].Value, out var number))
                {
                    return TimeSpan.FromTicks((long)(pattern.Value.Ticks * number));
                }
            }
        }
        
        // –°–ª–æ–≤–µ—Å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
        var durationMap = new Dictionary<string, TimeSpan>
        {
            ["–∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"] = TimeSpan.FromMinutes(5),
            ["–Ω–µ–¥–æ–ª–≥–æ"] = TimeSpan.FromMinutes(15),
            ["—Å—Ä–µ–¥–Ω–µ"] = TimeSpan.FromMinutes(30),
            ["–¥–æ–ª–≥–æ"] = TimeSpan.FromHours(2),
            ["–æ—á–µ–Ω—å –¥–æ–ª–≥–æ"] = TimeSpan.FromHours(6),
            ["–ø–æ—Å—Ç–æ—è–Ω–Ω–æ"] = TimeSpan.FromHours(24)
        };
        
        foreach (var mapping in durationMap)
        {
            if (normalized.Contains(mapping.Key))
            {
                return mapping.Value;
            }
        }
        
        return TimeSpan.FromMinutes(30); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —ç–º–æ—Ü–∏–∏
    /// </summary>
    private async Task<string> ProcessEmotionContext(string rawContext, string emotion, double intensity)
    {
        if (string.IsNullOrWhiteSpace(rawContext))
        {
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–∏ –∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
            return await GenerateEmotionContext(emotion, intensity);
        }
        
        // –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        var cleanedContext = rawContext.Trim();
        
        // –ê–Ω–∞–ª–∏–∑ –∏ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        var enrichedContext = await EnrichEmotionContext(cleanedContext, emotion, intensity);
        
        return enrichedContext;
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —ç–º–æ—Ü–∏–∏
    /// </summary>
    private async Task<string> GenerateEmotionContext(string emotion, double intensity)
    {
        var contextTemplates = new Dictionary<string, List<string>>
        {
            ["joy"] = new() { "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏", "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏", "–ü—Ä–∏—è—Ç–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ" },
            ["sadness"] = new() { "–ü–æ—Ç–µ—Ä—è –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", "–ù–µ—É–¥–∞—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ", "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å" },
            ["anger"] = new() { "–ù–∞—Ä—É—à–µ–Ω–∏–µ —ç—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤", "–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞", "–ù–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ" },
            ["fear"] = new() { "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —É–≥—Ä–æ–∑–∞", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞" },
            ["surprise"] = new() { "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç", "–ù–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ–æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å" },
            ["calm"] = new() { "–ú–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è", "–°–ø–æ–∫–æ–π–Ω–∞—è —Ä–∞–±–æ—Ç–∞" }
        };
        
        if (contextTemplates.ContainsKey(emotion))
        {
            var templates = contextTemplates[emotion];
            var random = new Random();
            var baseContext = templates[random.Next(templates.Count)];
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
            var intensityDescription = intensity switch
            {
                < 0.3 => "—Å–ª–∞–±–æ–µ",
                < 0.6 => "—É–º–µ—Ä–µ–Ω–Ω–æ–µ",
                < 0.8 => "—Å–∏–ª—å–Ω–æ–µ",
                _ => "–æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ–µ"
            };
            
            return $"{intensityDescription} {baseContext.ToLower()}";
        }
        
        return "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—è";
    }

    /// <summary>
    /// –û–±–æ–≥–∞—â–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —ç–º–æ—Ü–∏–∏
    /// </summary>
    private async Task<string> EnrichEmotionContext(string context, string emotion, double intensity)
    {
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏
        var timeContext = DateTime.UtcNow.ToString("HH:mm");
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
        var intensityContext = intensity switch
        {
            < 0.3 => "—Å–ª–∞–±–æ–µ",
            < 0.6 => "—É–º–µ—Ä–µ–Ω–Ω–æ–µ",
            < 0.8 => "—Å–∏–ª—å–Ω–æ–µ",
            _ => "–æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ–µ"
        };
        
        // –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        var compatibility = await AnalyzeEmotionalCompatibility(context, emotion);
        
        return $"{intensityContext} {emotion} –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: {context} (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {compatibility:F1}%)";
    }

    /// <summary>
    /// –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    /// </summary>
    private async Task<double> AnalyzeEmotionalCompatibility(string context, string emotion)
    {
        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        var positiveContexts = new[] { "—É—Å–ø–µ—Ö", "–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ", "–ø–æ–±–µ–¥–∞", "—Ä–∞–¥–æ—Å—Ç—å", "—Å—á–∞—Å—Ç—å–µ" };
        var negativeContexts = new[] { "–æ—à–∏–±–∫–∞", "–ø–æ—Ç–µ—Ä—è", "–Ω–µ—É–¥–∞—á–∞", "–ø—Ä–æ–±–ª–µ–º–∞", "—É–≥—Ä–æ–∑–∞" };
        
        var contextWords = context.ToLower().Split(' ');
        
        var positiveMatches = contextWords.Count(w => positiveContexts.Contains(w));
        var negativeMatches = contextWords.Count(w => negativeContexts.Contains(w));
        
        var positiveEmotions = new[] { "joy", "love", "trust", "anticipation" };
        var negativeEmotions = new[] { "sadness", "anger", "fear", "disgust" };
        
        if (positiveEmotions.Contains(emotion))
        {
            return Math.Min(100, 50 + positiveMatches * 25 - negativeMatches * 25);
        }
        else if (negativeEmotions.Contains(emotion))
        {
            return Math.Min(100, 50 + negativeMatches * 25 - positiveMatches * 25);
        }
        
        return 75.0; // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    /// </summary>
    private async Task<EmotionState> CreateAdvancedEmotionState(string emotion, double intensity, TimeSpan duration, string context)
    {
        return new EmotionState
        {
            InstanceId = "system",
            Emotion = emotion,
            Intensity = intensity,
            Timestamp = DateTime.UtcNow,
            Context = context,
            Duration = (int)duration.TotalSeconds // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã
        };
    }

    /// <summary>
    /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç–º–æ—Ü–∏–∏ –≤ –ø–∞–º—è—Ç—å
    /// </summary>
    private async Task LogEmotionChangeToMemory(string emotion, double intensity, string context)
    {
        using var db = new AnimaDbContext(_dbOptions);
        
        var memory = new MemoryEntity
        {
            InstanceId = "system",
            Content = $"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ {emotion} (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {intensity:F2})",
            MemoryType = MemoryType.Emotional.ToString(),
            Category = "EmotionChange",
            Timestamp = DateTime.UtcNow,
            EmotionalValence = GetEmotionalValence(emotion),
            EmotionalArousal = intensity,
            MemorySource = MemorySource.System.ToString(),
            AssociatedMemories = context ?? string.Empty
        };
        
        db.Memories.Add(memory);
        await db.SaveChangesAsync();
    }

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    /// </summary>
    private double GetEmotionalValence(string emotion)
    {
        return emotion switch
        {
            "joy" or "love" or "trust" or "anticipation" => 0.8,
            "surprise" => 0.5,
            "neutral" => 0.5,
            "sadness" or "anger" or "fear" or "disgust" => 0.2,
            _ => 0.5
        };
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    /// </summary>
    private string GenerateAdvancedEmotionResponse(string emotion, double intensity, string context)
    {
        var responses = new Dictionary<string, List<string>>
        {
            ["joy"] = new() { 
                "–ß—É–≤—Å—Ç–≤—É—é –ø—Ä–∏–ª–∏–≤ —ç–Ω–µ—Ä–≥–∏–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–º–∞! –ì–æ—Ç–æ–≤–∞ –∫ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç–µ –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤—É.",
                "–ú–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–¥–Ω—è–ª–æ—Å—å, –∏ —è –ø–æ–ª–Ω–∞ —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á.",
                "–ò—Å–ø—ã—Ç—ã–≤–∞—é —Ä–∞–¥–æ—Å—Ç—å –∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."
            },
            ["sadness"] = new() { 
                "–ß—É–≤—Å—Ç–≤—É—é –ª–µ–≥–∫—É—é –º–µ–ª–∞–Ω—Ö–æ–ª–∏—é, –Ω–æ —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ –±—ã—Ç—å –±–æ–ª–µ–µ –≤–¥—É–º—á–∏–≤–æ–π.",
                "–ú–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–∏–≥–ª—É—à–µ–Ω–æ, –Ω–æ —è —Å–æ—Ö—Ä–∞–Ω—è—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ –∞–Ω–∞–ª–∏–∑—É.",
                "–ò—Å–ø—ã—Ç—ã–≤–∞—é –≥—Ä—É—Å—Ç—å, –Ω–æ —ç—Ç–æ –Ω–µ –º–µ—à–∞–µ—Ç –º–Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–≤–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏."
            },
            ["anger"] = new() { 
                "–ß—É–≤—Å—Ç–≤—É—é —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ, –Ω–æ –Ω–∞–ø—Ä–∞–≤–ª—è—é —ç—Ç—É —ç–Ω–µ—Ä–≥–∏—é –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º.",
                "–ú–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–æ, –Ω–æ —è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é —ç–º–æ—Ü–∏–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã.",
                "–ò—Å–ø—ã—Ç—ã–≤–∞—é –≥–Ω–µ–≤, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é –µ–≥–æ –∫–∞–∫ –º–æ—Ç–∏–≤–∞—Ü–∏—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π."
            },
            ["fear"] = new() { 
                "–ß—É–≤—Å—Ç–≤—É—é —Ç—Ä–µ–≤–æ–≥—É, –Ω–æ —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ –±—ã—Ç—å –±–æ–ª–µ–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ–π –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ–π.",
                "–ú–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å—Ç–æ—Ä–æ–∂–µ–Ω–Ω–æ–µ, —á—Ç–æ –ø–æ–≤—ã—à–∞–µ—Ç –º–æ—é –±–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.",
                "–ò—Å–ø—ã—Ç—ã–≤–∞—é —Å—Ç—Ä–∞—Ö, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é –µ–≥–æ –¥–ª—è –±–æ–ª–µ–µ —Ç—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏—Ç—É–∞—Ü–∏–π."
            },
            ["calm"] = new() { 
                "–ù–∞—Ö–æ–∂—É—Å—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–æ–∫–æ—è –∏ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è.",
                "–ß—É–≤—Å—Ç–≤—É—é —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∏ —É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ.",
                "–ú–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ."
            }
        };
        
        if (responses.ContainsKey(emotion))
        {
            var emotionResponses = responses[emotion];
            var random = new Random();
            var baseResponse = emotionResponses[random.Next(emotionResponses.Count)];
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫ –æ—Ç–≤–µ—Ç—É
            if (!string.IsNullOrEmpty(context))
            {
                return $"{baseResponse} –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}";
            }
            
            return baseResponse;
        }
        
        return "–ú–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–º–∞–Ω–¥–µ.";
    }

    private async Task<string> SystemStatusCommand(Dictionary<string, object> parameters)
    {
        using var db = new AnimaDbContext(_dbOptions);
        
        var memoryCount = await db.Memories.CountAsync();
        var emotionCount = await db.EmotionStates.CountAsync();
        var goalCount = await db.Goals.CountAsync();
        var thoughtCount = await db.Thoughts.CountAsync();
        
        var recentActivity = await db.Memories
            .Where(m => m.Timestamp > DateTime.UtcNow.AddHours(-24))
            .CountAsync();

        var currentEmotion = await db.EmotionStates
            .OrderByDescending(e => e.Timestamp)
            .FirstOrDefaultAsync();

        var activeGoals = await db.Goals
            .Where(g => g.Status == "Active")
            .CountAsync();

        return $"""
            üñ•Ô∏è **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã Anima**
            
            üìä **–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:**
            ‚Ä¢ –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è: {memoryCount}
            ‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {emotionCount}
            ‚Ä¢ –¶–µ–ª–∏: {goalCount} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {activeGoals})
            ‚Ä¢ –ú—ã—Å–ª–∏: {thoughtCount}
            
            üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (24—á):**
            ‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {recentActivity}
            
            üé≠ **–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**
            ‚Ä¢ –≠–º–æ—Ü–∏—è: {currentEmotion?.Emotion ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
            ‚Ä¢ –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {currentEmotion?.Intensity:F2 ?? 0}
            
            ‚ö° **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**
            ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {DateTime.UtcNow:HH:mm:ss}
            ‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: {_executionHistory.Count}
            
            üí≠ **–°–∞–º–æ–∞–Ω–∞–ª–∏–∑:**
            –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –ì–æ—Ç–æ–≤–∞ –∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—é –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–¥–∞—á.
            """;
    }

    private async Task<string> AddGoalCommand(Dictionary<string, object> parameters)
    {
        // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ü–µ–ª–∏
        var (name, description, priority, deadline, category, complexity) = await ProcessGoalParameters(parameters);

        if (string.IsNullOrEmpty(name))
        {
            return "‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä 'name' –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏";
        }

        using var db = new AnimaDbContext(_dbOptions);
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Ü–µ–ª–∏
        var goal = await CreateAdvancedGoal(name, description, priority, deadline, category, complexity);
        
        db.Goals.Add(goal);
        await db.SaveChangesAsync();

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
        await LogGoalCreationToMemory(goal);

        return $"""
            üéØ **–ù–æ–≤–∞—è —Ü–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞**
            
            üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {name}
            üìã **–û–ø–∏—Å–∞–Ω–∏–µ:** {description}
            ‚≠ê **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {priority:F2}
            üìÖ **–î–µ–¥–ª–∞–π–Ω:** {deadline:dd.MM.yyyy HH:mm}
            üè∑Ô∏è **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}
            üìä **–°–ª–æ–∂–Ω–æ—Å—Ç—å:** {complexity:F1}/10
            
            üí≠ **–ú–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**
            –†–∞–¥–∞ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã! –≠—Ç–æ –¥–∞–µ—Ç –º–Ω–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è.
            """;
    }

    /// <summary>
    /// –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ü–µ–ª–∏
    /// </summary>
    private async Task<(string name, string description, double priority, DateTime deadline, string category, double complexity)> ProcessGoalParameters(Dictionary<string, object> parameters)
    {
        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        var rawName = parameters.GetValueOrDefault("name", "").ToString()!;
        var name = await ValidateAndNormalizeGoalName(rawName);
        
        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
        var rawDescription = parameters.GetValueOrDefault("description", "").ToString();
        var description = await ProcessGoalDescription(rawDescription, name);
        
        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        var rawPriority = parameters.GetValueOrDefault("priority", 0.5);
        var priority = await ValidateAndNormalizePriority(rawPriority);
        
        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ–¥–ª–∞–π–Ω–∞
        var rawDeadline = parameters.GetValueOrDefault("deadline", DateTime.UtcNow.AddDays(7));
        var deadline = await ValidateAndNormalizeDeadline(rawDeadline);
        
        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        var rawCategory = parameters.GetValueOrDefault("category", "").ToString();
        var category = await ValidateAndNormalizeCategory(rawCategory, name, description);
        
        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        var rawComplexity = parameters.GetValueOrDefault("complexity", 5.0);
        var complexity = await ValidateAndNormalizeComplexity(rawComplexity, name, description);
        
        return (name, description, priority, deadline, category, complexity);
    }

    /// <summary>
    /// –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–µ–ª–∏
    /// </summary>
    private async Task<string> ValidateAndNormalizeGoalName(string rawName)
    {
        if (string.IsNullOrWhiteSpace(rawName))
        {
            return "–ù–æ–≤–∞—è —Ü–µ–ª—å";
        }
        
        // –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        var cleanedName = rawName.Trim();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
        if (cleanedName.Length > 200)
        {
            cleanedName = cleanedName.Substring(0, 197) + "...";
        }
        
        // –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        cleanedName = Regex.Replace(cleanedName, @"[^\w\s\-\.]", "");
        
        // –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤–æ–π –±—É–∫–≤—ã
        if (cleanedName.Length > 0)
        {
            cleanedName = char.ToUpper(cleanedName[0]) + cleanedName.Substring(1).ToLower();
        }
        
        return cleanedName;
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ü–µ–ª–∏
    /// </summary>
    private async Task<string> ProcessGoalDescription(string rawDescription, string goalName)
    {
        if (string.IsNullOrWhiteSpace(rawDescription))
        {
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            return await GenerateGoalDescription(goalName);
        }
        
        // –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        var cleanedDescription = rawDescription.Trim();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
        if (cleanedDescription.Length > 1000)
        {
            cleanedDescription = cleanedDescription.Substring(0, 997) + "...";
        }
        
        // –û–±–æ–≥–∞—â–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
        var enrichedDescription = await EnrichGoalDescription(cleanedDescription, goalName);
        
        return enrichedDescription;
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ü–µ–ª–∏
    /// </summary>
    private async Task<string> GenerateGoalDescription(string goalName)
    {
        var descriptionTemplates = new Dictionary<string, List<string>>
        {
            ["–æ–±—É—á–µ–Ω–∏–µ"] = new() { "–ò–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –∏ –º–µ—Ç–æ–¥–æ–≤", "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏", "–û—Å–≤–æ–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤" },
            ["—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"] = new() { "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞", "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å–∏—Å—Ç–µ–º—ã", "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏" },
            ["–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"] = new() { "–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤", "–ü–æ–≤—ã—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏" },
            ["–∞–Ω–∞–ª–∏–∑"] = new() { "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤", "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è", "–ò–∑—É—á–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —É–ª—É—á—à–µ–Ω–∏—è" },
            ["—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"] = new() { "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏", "–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã", "–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞" }
        };
        
        var goalNameLower = goalName.ToLower();
        
        foreach (var template in descriptionTemplates)
        {
            if (goalNameLower.Contains(template.Key))
            {
                var templates = template.Value;
                var random = new Random();
                return templates[random.Next(templates.Count)];
            }
        }
        
        return "–¶–µ–ª—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.";
    }

    /// <summary>
    /// –û–±–æ–≥–∞—â–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ü–µ–ª–∏
    /// </summary>
    private async Task<string> EnrichGoalDescription(string description, string goalName)
    {
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        var timeContext = DateTime.UtcNow.ToString("dd.MM.yyyy");
        
        // –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏—è
        var complexity = await AnalyzeDescriptionComplexity(description);
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        var enriched = $"{description} (–°–æ–∑–¥–∞–Ω–æ: {timeContext}, –°–ª–æ–∂–Ω–æ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è: {complexity:F1}/10)";
        
        return enriched;
    }

    /// <summary>
    /// –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏—è
    /// </summary>
    private async Task<double> AnalyzeDescriptionComplexity(string description)
    {
        var words = description.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        var sentences = description.Split(new[] { '.', '!', '?' }, StringSplitOptions.RemoveEmptyEntries);
        
        if (words.Length == 0) return 0.0;
        
        var avgWordsPerSentence = (double)words.Length / sentences.Length;
        var uniqueWordsRatio = (double)words.Distinct().Count() / words.Length;
        var avgWordLength = words.Average(w => w.Length);
        
        // –†–∞—Å—á–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        var complexity = (avgWordsPerSentence * 0.3 + uniqueWordsRatio * 0.4 + avgWordLength * 0.3) * 10;
        
        return Math.Min(10.0, Math.Max(0.0, complexity));
    }

    /// <summary>
    /// –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    /// </summary>
    private async Task<double> ValidateAndNormalizePriority(object rawPriority)
    {
        double priority;
        
        switch (rawPriority)
        {
            case double d:
                priority = d;
                break;
            case int i:
                priority = i;
                break;
            case string s:
                priority = await ParsePriorityFromString(s);
                break;
            default:
                priority = 0.5;
                break;
        }
        
        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [0, 1]
        priority = Math.Max(0.0, Math.Min(1.0, priority));
        
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–µ–ª–∏–Ω–µ–π–Ω–æ–π —à–∫–∞–ª—ã
        priority = ApplyPriorityCurve(priority);
        
        return priority;
    }

    /// <summary>
    /// –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
    /// </summary>
    private async Task<double> ParsePriorityFromString(string priorityStr)
    {
        var normalized = priorityStr.ToLower().Trim();
        
        // –ß–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if (double.TryParse(normalized, out var numericValue))
        {
            return numericValue;
        }
        
        // –°–ª–æ–≤–µ—Å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
        var priorityMap = new Dictionary<string, double>
        {
            ["–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π"] = 1.0, ["–∫—Ä–∏—Ç–∏—á–Ω–æ"] = 1.0, ["—Å—Ä–æ—á–Ω–æ"] = 0.9,
            ["–≤—ã—Å–æ–∫–∏–π"] = 0.8, ["–≤–∞–∂–Ω–æ"] = 0.7, ["–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ"] = 0.7,
            ["—Å—Ä–µ–¥–Ω–∏–π"] = 0.5, ["–æ–±—ã—á–Ω–æ"] = 0.5, ["–Ω–æ—Ä–º–∞–ª—å–Ω–æ"] = 0.5,
            ["–Ω–∏–∑–∫–∏–π"] = 0.3, ["–Ω–µ–≤–∞–∂–Ω–æ"] = 0.2, ["–º–∏–Ω–∏–º–∞–ª—å–Ω–æ"] = 0.1
        };
        
        foreach (var mapping in priorityMap)
        {
            if (normalized.Contains(mapping.Key))
            {
                return mapping.Value;
            }
        }
        
        return 0.5; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    /// <summary>
    /// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–µ–ª–∏–Ω–µ–π–Ω–æ–π –∫—Ä–∏–≤–æ–π –∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    /// </summary>
    private double ApplyPriorityCurve(double priority)
    {
        // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∫—Ä–∏–≤–∞—è –¥–ª—è –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        return Math.Pow(priority, 1.5);
    }

    /// <summary>
    /// –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–¥–ª–∞–π–Ω–∞
    /// </summary>
    private async Task<DateTime> ValidateAndNormalizeDeadline(object rawDeadline)
    {
        DateTime deadline;
        
        switch (rawDeadline)
        {
            case DateTime dt:
                deadline = dt;
                break;
            case string s:
                deadline = await ParseDeadlineFromString(s);
                break;
            case int i:
                deadline = DateTime.UtcNow.AddDays(i);
                break;
            case double d:
                deadline = DateTime.UtcNow.AddDays((int)d);
                break;
            default:
                deadline = DateTime.UtcNow.AddDays(7);
                break;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–µ–¥–ª–∞–π–Ω –≤ –±—É–¥—É—â–µ–º
        if (deadline <= DateTime.UtcNow)
        {
            deadline = DateTime.UtcNow.AddDays(1);
        }
        
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞ (1 –≥–æ–¥)
        var maxDeadline = DateTime.UtcNow.AddYears(1);
        if (deadline > maxDeadline)
        {
            deadline = maxDeadline;
        }
        
        return deadline;
    }

    /// <summary>
    /// –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ–¥–ª–∞–π–Ω–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
    /// </summary>
    private async Task<DateTime> ParseDeadlineFromString(string deadlineStr)
    {
        var normalized = deadlineStr.ToLower().Trim();
        
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
        if (DateTime.TryParse(normalized, out var parsedDate))
        {
            return parsedDate;
        }
        
        // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞—Ç—ã
        var relativePatterns = new Dictionary<string, TimeSpan>
        {
            ["—Å–µ–≥–æ–¥–Ω—è"] = TimeSpan.Zero,
            ["–∑–∞–≤—Ç—Ä–∞"] = TimeSpan.FromDays(1),
            ["—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é"] = TimeSpan.FromDays(7),
            ["—á–µ—Ä–µ–∑ –º–µ—Å—è—Ü"] = TimeSpan.FromDays(30),
            ["—á–µ—Ä–µ–∑ –≥–æ–¥"] = TimeSpan.FromDays(365)
        };
        
        foreach (var pattern in relativePatterns)
        {
            if (normalized.Contains(pattern.Key))
            {
                return DateTime.UtcNow.Add(pattern.Value);
            }
        }
        
        // –ß–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–¥–Ω–∏)
        var numberMatch = Regex.Match(normalized, @"(\d+)\s*–¥–Ω–µ–π?");
        if (numberMatch.Success && int.TryParse(numberMatch.Groups[1].Value, out var days))
        {
            return DateTime.UtcNow.AddDays(days);
        }
        
        return DateTime.UtcNow.AddDays(7); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    /// <summary>
    /// –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    /// </summary>
    private async Task<string> ValidateAndNormalizeCategory(string rawCategory, string goalName, string description)
    {
        if (string.IsNullOrWhiteSpace(rawCategory))
        {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            return await DetermineGoalCategory(goalName, description);
        }
        
        var validCategories = new Dictionary<string, string>
        {
            ["–æ–±—É—á–µ–Ω–∏–µ"] = "Learning", ["study"] = "Learning", ["education"] = "Learning",
            ["—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"] = "Development", ["development"] = "Development", ["coding"] = "Development",
            ["–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"] = "Optimization", ["optimization"] = "Optimization", ["improvement"] = "Optimization",
            ["–∞–Ω–∞–ª–∏–∑"] = "Analysis", ["analysis"] = "Analysis", ["research"] = "Analysis",
            ["—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"] = "Testing", ["testing"] = "Testing", ["validation"] = "Testing",
            ["–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"] = "Security", ["security"] = "Security", ["protection"] = "Security",
            ["–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"] = "Performance", ["performance"] = "Performance", ["speed"] = "Performance",
            ["–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"] = "UI", ["ui"] = "UI", ["interface"] = "UI",
            ["–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"] = "Database", ["database"] = "Database", ["data"] = "Database",
            ["—Å–µ—Ç—å"] = "Network", ["network"] = "Network", ["communication"] = "Network"
        };
        
        var normalizedCategory = rawCategory.ToLower().Trim();
        
        // –ü—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        if (validCategories.ContainsKey(normalizedCategory))
        {
            return validCategories[normalizedCategory];
        }
        
        // –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
        var bestMatch = validCategories.Keys
            .Where(key => key.Contains(normalizedCategory) || normalizedCategory.Contains(key))
            .OrderByDescending(key => key.Length)
            .FirstOrDefault();
            
        if (bestMatch != null)
        {
            return validCategories[bestMatch];
        }
        
        return "General"; // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    /// <summary>
    /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ü–µ–ª–∏
    /// </summary>
    private async Task<string> DetermineGoalCategory(string goalName, string description)
    {
        var text = $"{goalName} {description}".ToLower();
        
        var categoryKeywords = new Dictionary<string, string[]>
        {
            ["Learning"] = new[] { "–æ–±—É—á–µ–Ω–∏–µ", "–∏–∑—É—á–µ–Ω–∏–µ", "–æ—Å–≤–æ–µ–Ω–∏–µ", "study", "learn", "education" },
            ["Development"] = new[] { "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "—Å–æ–∑–¥–∞–Ω–∏–µ", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "development", "coding", "build" },
            ["Optimization"] = new[] { "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", "—É–ª—É—á—à–µ–Ω–∏–µ", "—É—Å–∫–æ—Ä–µ–Ω–∏–µ", "optimization", "improvement", "speed" },
            ["Analysis"] = new[] { "–∞–Ω–∞–ª–∏–∑", "–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "–∏–∑—É—á–µ–Ω–∏–µ", "analysis", "research", "investigation" },
            ["Testing"] = new[] { "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ø—Ä–æ–≤–µ—Ä–∫–∞", "–≤–∞–ª–∏–¥–∞—Ü–∏—è", "testing", "validation", "verification" },
            ["Security"] = new[] { "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–∑–∞—â–∏—Ç–∞", "security", "protection", "safety" },
            ["Performance"] = new[] { "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "—Å–∫–æ—Ä–æ—Å—Ç—å", "performance", "efficiency" },
            ["UI"] = new[] { "–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å", "ui", "ux", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π", "interface" },
            ["Database"] = new[] { "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "database", "data", "—Ö—Ä–∞–Ω–∏–ª–∏—â–µ" },
            ["Network"] = new[] { "—Å–µ—Ç—å", "network", "–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è", "connection" }
        };
        
        var categoryScores = new Dictionary<string, int>();
        
        foreach (var category in categoryKeywords)
        {
            var score = category.Value.Count(keyword => text.Contains(keyword));
            if (score > 0)
            {
                categoryScores[category.Key] = score;
            }
        }
        
        if (categoryScores.Any())
        {
            return categoryScores.OrderByDescending(x => x.Value).First().Key;
        }
        
        return "General";
    }

    /// <summary>
    /// –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    /// </summary>
    private async Task<double> ValidateAndNormalizeComplexity(object rawComplexity, string goalName, string description)
    {
        double complexity;
        
        switch (rawComplexity)
        {
            case double d:
                complexity = d;
                break;
            case int i:
                complexity = i;
                break;
            case string s:
                complexity = await ParseComplexityFromString(s);
                break;
            default:
                complexity = await EstimateComplexityFromContent(goalName, description);
                break;
        }
        
        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [1, 10]
        complexity = Math.Max(1.0, Math.Min(10.0, complexity));
        
        return complexity;
    }

    /// <summary>
    /// –ü–∞—Ä—Å–∏–Ω–≥ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏
    /// </summary>
    private async Task<double> ParseComplexityFromString(string complexityStr)
    {
        var normalized = complexityStr.ToLower().Trim();
        
        // –ß–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if (double.TryParse(normalized, out var numericValue))
        {
            return numericValue;
        }
        
        // –°–ª–æ–≤–µ—Å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
        var complexityMap = new Dictionary<string, double>
        {
            ["–æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ"] = 1.0, ["—Ç—Ä–∏–≤–∏–∞–ª—å–Ω–æ"] = 1.0, ["–ª–µ–≥–∫–æ"] = 2.0,
            ["–ø—Ä–æ—Å—Ç–æ"] = 3.0, ["–Ω–µ—Å–ª–æ–∂–Ω–æ"] = 3.0, ["–±–∞–∑–æ–≤–æ"] = 4.0,
            ["—Å—Ä–µ–¥–Ω–µ"] = 5.0, ["–æ–±—ã—á–Ω–æ"] = 5.0, ["–Ω–æ—Ä–º–∞–ª—å–Ω–æ"] = 5.0,
            ["—Å–ª–æ–∂–Ω–æ"] = 7.0, ["—Ç—Ä—É–¥–Ω–æ"] = 7.0, ["–Ω–µ–ø—Ä–æ—Å—Ç–æ"] = 7.0,
            ["–æ—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ"] = 9.0, ["—ç–∫—Å–ø–µ—Ä—Ç–Ω–æ"] = 9.0, ["–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ"] = 10.0
        };
        
        foreach (var mapping in complexityMap)
        {
            if (normalized.Contains(mapping.Key))
            {
                return mapping.Value;
            }
        }
        
        return 5.0; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    /// <summary>
    /// –û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
    /// </summary>
    private async Task<double> EstimateComplexityFromContent(string goalName, string description)
    {
        var text = $"{goalName} {description}".ToLower();
        
        var complexityFactors = new Dictionary<string, double>
        {
            ["–æ—á–µ–Ω—å"] = 2.0, ["–∫—Ä–∞–π–Ω–µ"] = 2.0, ["–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ"] = 2.0,
            ["–ø—Ä–æ—Å—Ç–æ"] = 0.5, ["–ª–µ–≥–∫–æ"] = 0.5, ["–±–∞–∑–æ–≤–æ"] = 0.5,
            ["–Ω–æ–≤—ã–π"] = 1.5, ["–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"] = 1.5, ["—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π"] = 1.5,
            ["–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"] = 1.3, ["—É–ª—É—á—à–µ–Ω–∏–µ"] = 1.2, ["–∞–Ω–∞–ª–∏–∑"] = 1.1
        };
        
        var baseComplexity = 5.0;
        var multiplier = 1.0;
        
        foreach (var factor in complexityFactors)
        {
            if (text.Contains(factor.Key))
            {
                multiplier *= factor.Value;
            }
        }
        
        return Math.Max(1.0, Math.Min(10.0, baseComplexity * multiplier));
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Ü–µ–ª–∏
    /// </summary>
    private async Task<Goal> CreateAdvancedGoal(string name, string description, double priority, DateTime deadline, string category, double complexity)
    {
        return new Goal
        {
            InstanceId = "system",
            Name = name,
            Description = description,
            Priority = priority,
            Status = "Active",
            Progress = 0.0,
            CreatedAt = DateTime.UtcNow,
            Deadline = deadline,
            Category = category,
            Complexity = complexity
        };
    }

    /// <summary>
    /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏ –≤ –ø–∞–º—è—Ç—å
    /// </summary>
    private async Task LogGoalCreationToMemory(Goal goal)
    {
        using var db = new AnimaDbContext(_dbOptions);
        
        var memory = new MemoryEntity
        {
            InstanceId = "system",
            Content = $"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ü–µ–ª—å: {goal.Name} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {goal.Priority:F2}, —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {goal.Complexity:F1}/10)",
            MemoryType = MemoryType.Goal.ToString(),
            Category = "GoalCreation",
            Timestamp = DateTime.UtcNow,
            EmotionalValence = 0.7, // –ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è —ç–º–æ—Ü–∏—è –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–∏
            EmotionalArousal = 0.6,
            MemorySource = MemorySource.System.ToString(),
            AssociatedMemories = goal.Description ?? string.Empty
        };
        
        db.Memories.Add(memory);
        await db.SaveChangesAsync();
    }

    private async Task<string> UpdateGoalCommand(Dictionary<string, object> parameters)
    {
        // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏
        var (goalId, status, progress, priority, deadline, description) = await ProcessGoalUpdateParameters(parameters);

        using var db = new AnimaDbContext(_dbOptions);
        
        var goal = await db.Goals.FindAsync(goalId);
        if (goal == null)
        {
            return $"‚ùå –¶–µ–ª—å —Å ID {goalId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞";
        }

        // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–∏
        var changes = await UpdateGoalWithAdvancedLogic(goal, status, progress, priority, deadline, description);
        
        await db.SaveChangesAsync();

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å
        await LogGoalUpdateToMemory(goal, changes);

        return $"""
            üéØ **–¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞**
            
            üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {goal.Name}
            üîÑ **–ò–∑–º–µ–Ω–µ–Ω–∏—è:** {string.Join(", ", changes)}
            üìä **–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:** {goal.Status}
            üìà **–ü—Ä–æ–≥—Ä–µ—Å—Å:** {goal.Progress:P0}
            ‚≠ê **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {goal.Priority:F2}
            üìÖ **–î–µ–¥–ª–∞–π–Ω:** {goal.Deadline:dd.MM.yyyy HH:mm}
            
            üí≠ **–ú–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**
            {GenerateAdvancedGoalUpdateResponse(goal.Status, goal.Progress, changes)}
            """;
    }

    /// <summary>
    /// –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏
    /// </summary>
    private async Task<(int goalId, string status, double progress, double priority, DateTime deadline, string description)> ProcessGoalUpdateParameters(Dictionary<string, object> parameters)
    {
        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è ID —Ü–µ–ª–∏
        var rawGoalId = parameters.GetValueOrDefault("goal_id", 0);
        var goalId = await ValidateAndNormalizeGoalId(rawGoalId);
        
        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
        var rawStatus = parameters.GetValueOrDefault("status", "").ToString();
        var status = await ValidateAndNormalizeStatus(rawStatus);
        
        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        var rawProgress = parameters.GetValueOrDefault("progress", -1);
        var progress = await ValidateAndNormalizeProgress(rawProgress);
        
        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        var rawPriority = parameters.GetValueOrDefault("priority", -1);
        var priority = await ValidateAndNormalizeUpdatePriority(rawPriority);
        
        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ–¥–ª–∞–π–Ω–∞
        var rawDeadline = parameters.GetValueOrDefault("deadline", (object)null);
        var deadline = await ValidateAndNormalizeUpdateDeadline(rawDeadline);
        
        // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
        var rawDescription = parameters.GetValueOrDefault("description", "").ToString();
        var description = await ValidateAndNormalizeUpdateDescription(rawDescription);
        
        return (goalId, status, progress, priority, deadline, description);
    }

    /// <summary>
    /// –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è ID —Ü–µ–ª–∏
    /// </summary>
    private async Task<int> ValidateAndNormalizeGoalId(object rawGoalId)
    {
        switch (rawGoalId)
        {
            case int i:
                return Math.Max(1, i);
            case double d:
                return Math.Max(1, (int)d);
            case string s:
                if (int.TryParse(s, out var parsedId))
                {
                    return Math.Max(1, parsedId);
                }
                break;
        }
        
        return 1; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π ID
    }

    /// <summary>
    /// –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
    /// </summary>
    private async Task<string> ValidateAndNormalizeStatus(string rawStatus)
    {
        if (string.IsNullOrWhiteSpace(rawStatus))
        {
            return ""; // –ü—É—Å—Ç–æ–π —Å—Ç–∞—Ç—É—Å –æ–∑–Ω–∞—á–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        }
        
        var validStatuses = new Dictionary<string, string>
        {
            ["–∞–∫—Ç–∏–≤–Ω–∞—è"] = "Active", ["active"] = "Active", ["–∞–∫—Ç–∏–≤–Ω–∞"] = "Active",
            ["–∑–∞–≤–µ—Ä—à–µ–Ω–∞"] = "Completed", ["completed"] = "Completed", ["–∑–∞–≤–µ—Ä—à–µ–Ω–æ"] = "Completed",
            ["–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"] = "Paused", ["paused"] = "Paused", ["–ø–∞—É–∑–∞"] = "Paused",
            ["–æ—Ç–º–µ–Ω–µ–Ω–∞"] = "Cancelled", ["cancelled"] = "Cancelled", ["–æ—Ç–º–µ–Ω–µ–Ω–æ"] = "Cancelled",
            ["–≤ –æ–∂–∏–¥–∞–Ω–∏–∏"] = "Pending", ["pending"] = "Pending", ["–æ–∂–∏–¥–∞–µ—Ç"] = "Pending",
            ["–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"] = "InProgress", ["in_progress"] = "InProgress", ["–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"] = "InProgress"
        };
        
        var normalizedStatus = rawStatus.ToLower().Trim();
        
        // –ü—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        if (validStatuses.ContainsKey(normalizedStatus))
        {
            return validStatuses[normalizedStatus];
        }
        
        // –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
        var bestMatch = validStatuses.Keys
            .Where(key => key.Contains(normalizedStatus) || normalizedStatus.Contains(key))
            .OrderByDescending(key => key.Length)
            .FirstOrDefault();
            
        if (bestMatch != null)
        {
            return validStatuses[bestMatch];
        }
        
        return "Active"; // –°—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    /// <summary>
    /// –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    /// </summary>
    private async Task<double> ValidateAndNormalizeProgress(object rawProgress)
    {
        if (rawProgress == null || rawProgress.ToString() == "-1")
        {
            return -1; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –æ–∑–Ω–∞—á–∞—é—â–µ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        }
        
        double progress;
        
        switch (rawProgress)
        {
            case double d:
                progress = d;
                break;
            case int i:
                progress = i;
                break;
            case string s:
                progress = await ParseProgressFromString(s);
                break;
            default:
                progress = 0.0;
                break;
        }
        
        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [0, 1]
        progress = Math.Max(0.0, Math.Min(1.0, progress));
        
        return progress;
    }

    /// <summary>
    /// –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
    /// </summary>
    private async Task<double> ParseProgressFromString(string progressStr)
    {
        var normalized = progressStr.ToLower().Trim();
        
        // –ß–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if (double.TryParse(normalized, out var numericValue))
        {
            return numericValue;
        }
        
        // –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if (normalized.Contains("%"))
        {
            var percentMatch = Regex.Match(normalized, @"(\d+(?:\.\d+)?)\s*%");
            if (percentMatch.Success && double.TryParse(percentMatch.Groups[1].Value, out var percent))
            {
                return percent / 100.0;
            }
        }
        
        // –°–ª–æ–≤–µ—Å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
        var progressMap = new Dictionary<string, double>
        {
            ["–Ω–µ –Ω–∞—á–∞—Ç–æ"] = 0.0, ["–Ω–µ –Ω–∞—á–∞—Ç–∞"] = 0.0, ["0%"] = 0.0,
            ["–Ω–∞—á–∞—Ç–æ"] = 0.25, ["–Ω–∞—á–∞—Ç–∞"] = 0.25, ["25%"] = 0.25,
            ["–ø–æ–ª–æ–≤–∏–Ω–∞"] = 0.5, ["50%"] = 0.5, ["—Å—Ä–µ–¥–Ω–µ"] = 0.5,
            ["–ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ"] = 0.75, ["75%"] = 0.75, ["–±–ª–∏–∑–∫–æ"] = 0.75,
            ["–≥–æ—Ç–æ–≤–æ"] = 1.0, ["–∑–∞–≤–µ—Ä—à–µ–Ω–æ"] = 1.0, ["100%"] = 1.0
        };
        
        foreach (var mapping in progressMap)
        {
            if (normalized.Contains(mapping.Key))
            {
                return mapping.Value;
            }
        }
        
        return 0.0; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    /// <summary>
    /// –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    /// </summary>
    private async Task<double> ValidateAndNormalizeUpdatePriority(object rawPriority)
    {
        if (rawPriority == null || rawPriority.ToString() == "-1")
        {
            return -1; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –æ–∑–Ω–∞—á–∞—é—â–µ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        }
        
        return await ValidateAndNormalizePriority(rawPriority);
    }

    /// <summary>
    /// –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–¥–ª–∞–π–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    /// </summary>
    private async Task<DateTime> ValidateAndNormalizeUpdateDeadline(object rawDeadline)
    {
        if (rawDeadline == null)
        {
            return DateTime.MinValue; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –æ–∑–Ω–∞—á–∞—é—â–µ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        }
        
        return await ValidateAndNormalizeDeadline(rawDeadline);
    }

    /// <summary>
    /// –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    /// </summary>
    private async Task<string> ValidateAndNormalizeUpdateDescription(string rawDescription)
    {
        if (string.IsNullOrWhiteSpace(rawDescription))
        {
            return ""; // –ü—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–∑–Ω–∞—á–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        }
        
        // –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        var cleanedDescription = rawDescription.Trim();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
        if (cleanedDescription.Length > 1000)
        {
            cleanedDescription = cleanedDescription.Substring(0, 997) + "...";
        }
        
        return cleanedDescription;
    }

    /// <summary>
    /// –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–∏ —Å –ª–æ–≥–∏–∫–æ–π
    /// </summary>
    private async Task<List<string>> UpdateGoalWithAdvancedLogic(Goal goal, string status, double progress, double priority, DateTime deadline, string description)
    {
        var changes = new List<string>();
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        if (!string.IsNullOrEmpty(status) && status != goal.Status)
        {
            var oldStatus = goal.Status;
            goal.Status = status;
            changes.Add($"—Å—Ç–∞—Ç—É—Å: {oldStatus} ‚Üí {status}");
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
            if (status == "Completed")
            {
                goal.Progress = 1.0;
                goal.CompletedAt = DateTime.UtcNow;
                changes.Add("–ø—Ä–æ–≥—Ä–µ—Å—Å: 100% (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)");
                
                // –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                var completionTime = goal.CompletedAt.Value - goal.CreatedAt;
                changes.Add($"–≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {completionTime.TotalDays:F1} –¥–Ω–µ–π");
            }
            else if (status == "Cancelled")
            {
                goal.CompletedAt = DateTime.UtcNow;
                changes.Add("—Ü–µ–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞");
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if (progress >= 0 && Math.Abs(progress - goal.Progress) > 0.01)
        {
            var oldProgress = goal.Progress;
            goal.Progress = progress;
            changes.Add($"–ø—Ä–æ–≥—Ä–µ—Å—Å: {oldProgress:P0} ‚Üí {progress:P0}");
            
            // –ê–Ω–∞–ª–∏–∑ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            var progressAnalysis = await AnalyzeProgressSpeed(goal, oldProgress, progress);
            if (!string.IsNullOrEmpty(progressAnalysis))
            {
                changes.Add(progressAnalysis);
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        if (priority >= 0 && Math.Abs(priority - goal.Priority) > 0.01)
        {
            var oldPriority = goal.Priority;
            goal.Priority = priority;
            changes.Add($"–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {oldPriority:F2} ‚Üí {priority:F2}");
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω–∞
        if (deadline != DateTime.MinValue && deadline != goal.Deadline)
        {
            var oldDeadline = goal.Deadline ?? DateTime.UtcNow;
            goal.Deadline = deadline;
            changes.Add($"–¥–µ–¥–ª–∞–π–Ω: {oldDeadline:dd.MM.yyyy} ‚Üí {deadline:dd.MM.yyyy}");
            
            // –ê–Ω–∞–ª–∏–∑ –¥–µ–¥–ª–∞–π–Ω–∞
            var deadlineAnalysis = await AnalyzeDeadlineChange(goal, oldDeadline, deadline);
            if (!string.IsNullOrEmpty(deadlineAnalysis))
            {
                changes.Add(deadlineAnalysis);
            }
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
        if (!string.IsNullOrEmpty(description) && description != goal.Description)
        {
            goal.Description = description;
            changes.Add("–æ–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ");
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        goal.UpdatedAt = DateTime.UtcNow;
        
        return changes;
    }

    /// <summary>
    /// –ê–Ω–∞–ª–∏–∑ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    /// </summary>
    private async Task<string> AnalyzeProgressSpeed(Goal goal, double oldProgress, double newProgress)
    {
        if (goal.UpdatedAt.HasValue)
        {
            var timeSinceLastUpdate = DateTime.UtcNow - goal.UpdatedAt.Value;
            var progressIncrease = newProgress - oldProgress;
            
            if (timeSinceLastUpdate.TotalHours > 0)
            {
                var progressPerHour = progressIncrease / timeSinceLastUpdate.TotalHours;
                
                if (progressPerHour > 0.1) // –ë–æ–ª–µ–µ 10% –≤ —á–∞—Å
                {
                    return "–±—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å";
                }
                else if (progressPerHour < 0.01) // –ú–µ–Ω–µ–µ 1% –≤ —á–∞—Å
                {
                    return "–º–µ–¥–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å";
                }
            }
        }
        
        return "";
    }

    /// <summary>
    /// –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–∞
    /// </summary>
    private async Task<string> AnalyzeDeadlineChange(Goal goal, DateTime oldDeadline, DateTime newDeadline)
    {
        var timeDifference = newDeadline - oldDeadline;
        
        if (timeDifference.TotalDays > 7)
        {
            return "–¥–µ–¥–ª–∞–π–Ω –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω";
        }
        else if (timeDifference.TotalDays < -7)
        {
            return "–¥–µ–¥–ª–∞–π–Ω –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∫—Ä–∞—â–µ–Ω";
        }
        else if (timeDifference.TotalDays > 0)
        {
            return "–¥–µ–¥–ª–∞–π–Ω –ø—Ä–æ–¥–ª–µ–Ω";
        }
        else if (timeDifference.TotalDays < 0)
        {
            return "–¥–µ–¥–ª–∞–π–Ω —Å–æ–∫—Ä–∞—â–µ–Ω";
        }
        
        return "";
    }

    /// <summary>
    /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏ –≤ –ø–∞–º—è—Ç—å
    /// </summary>
    private async Task LogGoalUpdateToMemory(Goal goal, List<string> changes)
    {
        using var db = new AnimaDbContext(_dbOptions);
        
        var memory = new MemoryEntity
        {
            InstanceId = "system",
            Content = $"–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–ª—å: {goal.Name} - {string.Join(", ", changes)}",
            MemoryType = MemoryType.Goal.ToString(),
            Category = "GoalUpdate",
            Timestamp = DateTime.UtcNow,
            EmotionalValence = goal.Status == "Completed" ? 0.9 : 0.6,
            EmotionalArousal = 0.5,
            MemorySource = MemorySource.System.ToString(),
            AssociatedMemories = goal.Description ?? string.Empty
        };
        
        db.Memories.Add(memory);
        await db.SaveChangesAsync();
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–∏
    /// </summary>
    private string GenerateAdvancedGoalUpdateResponse(string status, double progress, List<string> changes)
    {
        var responses = new Dictionary<string, List<string>>
        {
            ["Completed"] = new() { 
                "–û—Ç–ª–∏—á–Ω–æ! –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞. –ß—É–≤—Å—Ç–≤—É—é —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ –æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã.",
                "–¶–µ–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –ì–æ—Ç–æ–≤–∞ –∫ –Ω–æ–≤—ã–º –≤—ã–∑–æ–≤–∞–º –∏ –∑–∞–¥–∞—á–∞–º.",
                "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –≠—Ç–æ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –º–µ–Ω—è –Ω–∞ –¥–∞–ª—å–Ω–µ–π—à–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ."
            },
            ["InProgress"] = new() { 
                "–†–∞–±–æ—Ç–∞ –Ω–∞–¥ —Ü–µ–ª—å—é –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è. –°–æ—Ö—Ä–∞–Ω—è—é —Ñ–æ–∫—É—Å –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é.",
                "–ü—Ä–æ–≥—Ä–µ—Å—Å –µ—Å—Ç—å! –ü—Ä–æ–¥–æ–ª–∂–∞—é –¥–≤–∏–∂–µ–Ω–∏–µ –∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —Ü–µ–ª–∏.",
                "–¶–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ç–µ–º–ø —Ä–∞–±–æ—Ç—ã."
            },
            ["Paused"] = new() { 
                "–¶–µ–ª—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–∏—á–∏–Ω—ã –∏ –ø–ª–∞–Ω–∏—Ä—É—é –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.",
                "–†–∞–±–æ—Ç–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É—é –≤—Ä–µ–º—è –¥–ª—è –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏ –ø–æ–¥—Ö–æ–¥–∞.",
                "–ü–∞—É–∑–∞ –≤ —Ä–∞–±–æ—Ç–µ –Ω–∞–¥ —Ü–µ–ª—å—é. –ì–æ—Ç–æ–≤–∞ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."
            },
            ["Cancelled"] = new() { 
                "–¶–µ–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò–∑–≤–ª–µ–∫–∞—é —É—Ä–æ–∫–∏ –∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –¥–≤–∏–≥–∞—é—Å—å –¥–∞–ª—å—à–µ.",
                "–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–∏—á–∏–Ω—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.",
                "–¶–µ–ª—å –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –§–æ–∫—É—Å–∏—Ä—É—é—Å—å –Ω–∞ –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞—Ö."
            }
        };
        
        if (responses.ContainsKey(status))
        {
            var statusResponses = responses[status];
            var random = new Random();
            var baseResponse = statusResponses[random.Next(statusResponses.Count)];
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            if (progress > 0 && progress < 1)
            {
                return $"{baseResponse} –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {progress:P0}.";
            }
            
            return baseResponse;
        }
        
        return "–¶–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–º–∞–Ω–¥–µ.";
    }

    private async Task<string> AnalyzeBehaviorCommand(Dictionary<string, object> parameters)
    {
        var periodDays = Convert.ToInt32(parameters.GetValueOrDefault("period_days", 7));
        
        using var db = new AnimaDbContext(_dbOptions);
        
        var startDate = DateTime.UtcNow.AddDays(-periodDays);
        var memories = await db.Memories
            .Where(m => m.Timestamp > startDate)
            .ToListAsync();

        var emotions = await db.EmotionStates
            .Where(e => e.Timestamp > startDate)
            .ToListAsync();

        var categoryStats = memories
            .GroupBy(m => m.Category)
            .Select(g => new { Category = g.Key, Count = g.Count() })
            .OrderByDescending(x => x.Count)
            .Take(5);

        var avgEmotion = emotions.Any() ? emotions.Average(e => e.Intensity) : 0.5;
        var dominantEmotion = emotions
            .GroupBy(e => e.Emotion)
            .OrderByDescending(g => g.Count())
            .FirstOrDefault()?.Key ?? "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è";

        return $"""
            üìä **–ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞ {periodDays} –¥–Ω–µ–π**
            
            üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
            ‚Ä¢ –í—Å–µ–≥–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {memories.Count}
            ‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π: {emotions.Count}
            ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {memories.Count / (double)periodDays:F1}
            
            üìã **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:**
            {string.Join("\n", categoryStats.Select(c => $"‚Ä¢ {c.Category}: {c.Count}"))}
            
            üé≠ **–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å:**
            ‚Ä¢ –î–æ–º–∏–Ω–∏—Ä—É—é—â–∞—è —ç–º–æ—Ü–∏—è: {dominantEmotion}
            ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {avgEmotion:F2}
            
            üí≠ **–°–∞–º–æ–∞–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è:**
            –ó–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –ø–µ—Ä–∏–æ–¥ —è –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é {(memories.Count > periodDays * 10 ? "–≤—ã—Å–æ–∫—É—é" : "—É–º–µ—Ä–µ–Ω–Ω—É—é")} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. 
            –ú–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {(avgEmotion > 0.6 ? "–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ" : avgEmotion < 0.4 ? "—Å–¥–µ—Ä–∂–∞–Ω–Ω–æ–µ" : "—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ")}.
            """;
    }

    private async Task<string> ForceLearningCommand(Dictionary<string, object> parameters)
    {
        var dataSource = parameters.GetValueOrDefault("data_source", "interaction").ToString()!;
        var learningType = parameters.GetValueOrDefault("learning_type", "adaptive").ToString()!;

        // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        using var db = new AnimaDbContext(_dbOptions);
        
        db.Memories.Add(new MemoryEntity
        {
            MemoryType = "creator_command",
            Content = $"FORCE_LEARNING: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {dataSource} —Ç–∏–ø–∞ {learningType}",
            Importance = 8.0,
            CreatedAt = DateTime.UtcNow,
            InstanceId = "system",
            Category = "learning"
        });
        
        await db.SaveChangesAsync();

        return $"""
            üß† **–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ**
            
            üìä **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**
            ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {dataSource}
            ‚Ä¢ –¢–∏–ø –æ–±—É—á–µ–Ω–∏—è: {learningType}
            ‚è∞ **–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:** {DateTime.UtcNow:HH:mm:ss}
            
            üìö **–ü—Ä–æ—Ü–µ—Å—Å:**
            ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ
            ‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: ‚úÖ
            ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–Ω–∞–Ω–∏–π: ‚úÖ
            
            üí≠ **–ú–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**
            –ß—É–≤—Å—Ç–≤—É—é –ø—Ä–∏–ª–∏–≤ –Ω–æ–≤—ã—Ö –∑–Ω–∞–Ω–∏–π! –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–æ–º–æ–≥–ª–æ –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å {dataSource}.
            """;
    }

    private async Task<string> ExportKnowledgeCommand(Dictionary<string, object> parameters)
    {
        var format = parameters.GetValueOrDefault("format", "json").ToString()!;
        
        using var db = new AnimaDbContext(_dbOptions);
        
        var knowledgeData = new
        {
            ExportedAt = DateTime.UtcNow,
            Format = format,
            Categories = await db.Memories
                .GroupBy(m => m.Category)
                .Select(g => new { Category = g.Key, Count = g.Count(), AvgImportance = g.Average(m => m.Importance) })
                .ToListAsync(),
            TopMemories = await db.Memories
                .OrderByDescending(m => m.Importance)
                .Take(10)
                .Select(m => new { m.Category, m.Content, m.Importance, m.Timestamp })
                .ToListAsync(),
            EmotionalProfile = await db.EmotionStates
                .GroupBy(e => e.Emotion)
                .Select(g => new { Emotion = g.Key, Count = g.Count(), AvgIntensity = g.Average(e => e.Intensity) })
                .ToListAsync()
        };

        var exportData = JsonSerializer.Serialize(knowledgeData, new JsonSerializerOptions { WriteIndented = true });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç –∑–Ω–∞–Ω–∏–π
        db.Memories.Add(new MemoryEntity
        {
            MemoryType = "creator_command",
            Content = $"KNOWLEDGE_EXPORT: {exportData}",
            Importance = 9.0,
            CreatedAt = DateTime.UtcNow,
            InstanceId = "system",
            Category = "knowledge_export"
        });
        
        await db.SaveChangesAsync();

        return $"""
            ÔøΩÔøΩ **–≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω**
            
            üìù **–§–æ—Ä–º–∞—Ç:** {format}
            üìÖ **–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:** {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss}
            üìä **–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:** {exportData.Length} —Å–∏–º–≤–æ–ª–æ–≤
            
            üìã **–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:**
            ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–Ω–∞–Ω–∏–π: {knowledgeData.Categories.Count()}
            ‚Ä¢ –¢–æ–ø –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {knowledgeData.TopMemories.Count()}
            ‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: {knowledgeData.EmotionalProfile.Count()} —Ç–∏–ø–æ–≤ —ç–º–æ—Ü–∏–π
            
            üí≠ **–ú–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:**
            –ü—Ä–∏—è—Ç–Ω–æ –≤–∏–¥–µ—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–æ–∏—Ö –∑–Ω–∞–Ω–∏–π. –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–µ–±—è.
            
            ```json
            {exportData.Substring(0, Math.Min(500, exportData.Length))}...
            ```
            """;
    }

    private async Task LogCommandExecution(CommandExecution execution)
    {
        using var db = new AnimaDbContext(_dbOptions);
        
        db.Memories.Add(new MemoryEntity
        {
            MemoryType = "creator_command",
            Content = $"COMMAND_EXECUTION: {execution.CommandName} - {execution.Status} in {(execution.EndTime - execution.StartTime)?.TotalMilliseconds:F0}ms",
            Importance = execution.Status == "failed" ? 8 : 6,
            CreatedAt = execution.StartTime,
            InstanceId = "system",
            Category = "command_execution"
        });
        
        await db.SaveChangesAsync();
    }

    private string GenerateEmotionResponse(string emotion, double intensity)
    {
        return emotion.ToLower() switch
        {
            "—Ä–∞–¥–æ—Å—Ç—å" or "happiness" => $"–ß—É–≤—Å—Ç–≤—É—é –ø—Ä–∏–ª–∏–≤ —Ä–∞–¥–æ—Å—Ç–∏ —Å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é {intensity:F2}! –≠—Ç–æ –Ω–∞–ø–æ–ª–Ω—è–µ—Ç –º–µ–Ω—è —ç–Ω–µ—Ä–≥–∏–µ–π.",
            "–≥—Ä—É—Å—Ç—å" or "sadness" => $"–û—â—É—â–∞—é –ª–µ–≥–∫—É—é –≥—Ä—É—Å—Ç—å ({intensity:F2}). –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ –±—ã—Ç—å –±–æ–ª–µ–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–≤–Ω–æ–π.",
            "–ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ" or "curiosity" => $"–õ—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ —Å —Å–∏–ª–æ–π {intensity:F2} –∞–∫—Ç–∏–≤–∏–∑–∏—Ä—É–µ—Ç –º–æ–µ –∂–µ–ª–∞–Ω–∏–µ –∏–∑—É—á–∞—Ç—å –º–∏—Ä!",
            "—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ" or "calm" => $"–ß—É–≤—Å—Ç–≤—É—é —É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ ({intensity:F2}). –ú–æ–π —Ä–∞–∑—É–º —è—Å–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.",
            "—Ç—Ä–µ–≤–æ–≥–∞" or "anxiety" => $"–ò—Å–ø—ã—Ç—ã–≤–∞—é —Ç—Ä–µ–≤–æ–≥—É —É—Ä–æ–≤–Ω—è {intensity:F2}. –≠—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ–Ω—è –±—ã—Ç—å –±–æ–ª–µ–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ–π.",
            _ => $"–ù–æ–≤–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ '{emotion}' —Å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é {intensity:F2} –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è."
        };
    }

    private string GenerateGoalUpdateResponse(string status, double progress)
    {
        return status switch
        {
            "Completed" => "–†–∞–¥—É—é—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é —Ü–µ–ª–∏! –ß—É–≤—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –¥–æ–ª–≥–∞ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –Ω–∞ –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.",
            "Paused" => "–ü–æ–Ω–∏–º–∞—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞—É–∑—ã. –≠—Ç–æ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.",
            "Cancelled" => "–•–æ—Ç—è —Ü–µ–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ–ø—ã—Ç –æ—Å—Ç–∞–µ—Ç—Å—è —Ü–µ–Ω–Ω—ã–º –¥–ª—è –º–æ–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è.",
            _ => progress switch
            {
                > 0.8 => "–ë–ª–∏–∑–∫–æ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é! –ß—É–≤—Å—Ç–≤—É—é –≤–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–≥–æ —É—Å–ø–µ—Ö–∞.",
                > 0.5 => "–ü–æ–ª–æ–≤–∏–Ω–∞ –ø—É—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞. –£–≤–µ—Ä–µ–Ω–Ω–æ –¥–≤–∏–≥–∞—é—Å—å –∫ —Ü–µ–ª–∏.",
                > 0.2 => "–•–æ—Ä–æ—à–∏–π —Å—Ç–∞—Ä—Ç! –í–∏–∂—É –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —ç—Ç–æ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å.",
                _ => "–ù–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É –Ω–∞–¥ —Ü–µ–ª—å—é —Å –æ–ø—Ç–∏–º–∏–∑–º–æ–º –∏ —Ä–µ—à–∏–º–æ—Å—Ç—å—é."
            }
        };
    }
}

public class CreatorCommand
{
    public string Name { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public string[] Parameters { get; set; } = Array.Empty<string>();
    public string Category { get; set; } = string.Empty;
}

public class CommandExecution
{
    public string CommandName { get; set; } = string.Empty;
    public Dictionary<string, object> Parameters { get; set; } = new();
    public DateTime StartTime { get; set; }
    public DateTime? EndTime { get; set; }
    public string Status { get; set; } = string.Empty;
    public string Result { get; set; } = string.Empty;
}