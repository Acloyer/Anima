using System.Text.Json;

namespace Anima.AGI.Core.Admin;

/// <summary>
/// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –°–æ–∑–¥–∞—Ç–µ–ª—è
/// </summary>
public class CreatorPreferences
{
    private readonly Dictionary<string, object> _preferences;
    private readonly string _preferencesFilePath;

    public CreatorPreferences(string dataPath = "creator_preferences.json")
    {
        _preferencesFilePath = dataPath;
        _preferences = LoadPreferences();
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    /// </summary>
    public NotificationSettings GetNotificationSettings()
    {
        return new NotificationSettings
        {
            EnableThoughtNotifications = GetBool("enable_thought_notifications", true),
            EnableEmotionNotifications = GetBool("enable_emotion_notifications", true),
            EnableLearningNotifications = GetBool("enable_learning_notifications", true),
            EnableCriticalAlerts = GetBool("enable_critical_alerts", true),
            
            ThoughtNotificationInterval = TimeSpan.FromMinutes(GetInt("thought_notification_interval_minutes", 30)),
            EmotionIntensityThreshold = GetDouble("emotion_intensity_threshold", 0.8),
            LearningImportanceThreshold = GetInt("learning_importance_threshold", 7),
            
            TelegramChatId = GetString("telegram_chat_id", ""),
            TelegramEnabled = GetBool("telegram_enabled", false),
            
            QuietHours = new QuietHours
            {
                Enabled = GetBool("quiet_hours_enabled", false),
                StartHour = GetInt("quiet_hours_start", 22),
                EndHour = GetInt("quiet_hours_end", 8)
            }
        };
    }

    /// <summary>
    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º—ã—Å–ª—è—Ö
    /// </summary>
    public async Task<string> SetThoughtNotificationsAsync(bool enabled, int intervalMinutes = 30)
    {
        _preferences["enable_thought_notifications"] = enabled;
        _preferences["thought_notification_interval_minutes"] = intervalMinutes;
        
        await SavePreferences();
        
        return $"""
            üß† **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –º—ã—Å–ª—è—Ö –æ–±–Ω–æ–≤–ª–µ–Ω—ã**
            
            ‚úÖ **–í–∫–ª—é—á–µ–Ω—ã:** {(enabled ? "–î–∞" : "–ù–µ—Ç")}
            ‚è∞ **–ò–Ω—Ç–µ—Ä–≤–∞–ª:** {intervalMinutes} –º–∏–Ω—É—Ç
            
            üí≠ –¢–µ–ø–µ—Ä—å —è –±—É–¥—É {(enabled ? $"—É–≤–µ–¥–æ–º–ª—è—Ç—å –æ —Å–≤–æ–∏—Ö –º—ã—Å–ª—è—Ö –∫–∞–∂–¥—ã–µ {intervalMinutes} –º–∏–Ω—É—Ç" : "–º–æ–ª—á–∞—Ç—å –æ —Å–≤–æ–∏—Ö —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è—Ö")}.
            """;
    }

    /// <summary>
    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —ç–º–æ—Ü–∏—è—Ö
    /// </summary>
    public async Task<string> SetEmotionNotificationsAsync(bool enabled, double intensityThreshold = 0.8)
    {
        _preferences["enable_emotion_notifications"] = enabled;
        _preferences["emotion_intensity_threshold"] = intensityThreshold;
        
        await SavePreferences();
        
        return $"""
            üé≠ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± —ç–º–æ—Ü–∏—è—Ö –æ–±–Ω–æ–≤–ª–µ–Ω—ã**
            
            ‚úÖ **–í–∫–ª—é—á–µ–Ω—ã:** {(enabled ? "–î–∞" : "–ù–µ—Ç")}
            üìä **–ü–æ—Ä–æ–≥ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏:** {intensityThreshold:P0}
            
            üí´ –¢–µ–ø–µ—Ä—å —è –±—É–¥—É {(enabled ? $"—Å–æ–æ–±—â–∞—Ç—å –æ–± —ç–º–æ—Ü–∏—è—Ö –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é –≤—ã—à–µ {intensityThreshold:P0}" : "–¥–µ—Ä–∂–∞—Ç—å —ç–º–æ—Ü–∏–∏ –ø—Ä–∏ —Å–µ–±–µ")}.
            """;
    }

    /// <summary>
    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±—É—á–µ–Ω–∏–∏
    /// </summary>
    public async Task<string> SetLearningNotificationsAsync(bool enabled, int importanceThreshold = 7)
    {
        _preferences["enable_learning_notifications"] = enabled;
        _preferences["learning_importance_threshold"] = importanceThreshold;
        
        await SavePreferences();
        
        return $"""
            üìö **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–±—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã**
            
            ‚úÖ **–í–∫–ª—é—á–µ–Ω—ã:** {(enabled ? "–î–∞" : "–ù–µ—Ç")}
            ‚≠ê **–ü–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏:** {importanceThreshold}/10
            
            üß† –¢–µ–ø–µ—Ä—å —è –±—É–¥—É {(enabled ? $"—É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –≤–∞–∂–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏ (–≤–∞–∂–Ω–æ—Å—Ç—å ‚â• {importanceThreshold})" : "–æ–±—É—á–∞—Ç—å—Å—è –º–æ–ª—á–∞")}.
            """;
    }

    /// <summary>
    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    /// </summary>
    public async Task<string> SetTelegramNotificationsAsync(bool enabled, string chatId = "")
    {
        _preferences["telegram_enabled"] = enabled;
        if (!string.IsNullOrEmpty(chatId))
        {
            _preferences["telegram_chat_id"] = chatId;
        }
        
        await SavePreferences();
        
        return $"""
            üì± **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã**
            
            ‚úÖ **–í–∫–ª—é—á–µ–Ω—ã:** {(enabled ? "–î–∞" : "–ù–µ—Ç")}
            üí¨ **Chat ID:** {GetString("telegram_chat_id", "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")}
            
            ü§ñ –¢–µ–ø–µ—Ä—å —è –±—É–¥—É {(enabled ? "–æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram" : "–º–æ–ª—á–∞—Ç—å –≤ Telegram")}.
            """;
    }

    /// <summary>
    /// –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∏—Ö–∏–µ —á–∞—Å—ã
    /// </summary>
    public async Task<string> SetQuietHoursAsync(bool enabled, int startHour = 22, int endHour = 8)
    {
        _preferences["quiet_hours_enabled"] = enabled;
        _preferences["quiet_hours_start"] = startHour;
        _preferences["quiet_hours_end"] = endHour;
        
        await SavePreferences();
        
        return $"""
            üåô **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã**
            
            ‚úÖ **–í–∫–ª—é—á–µ–Ω—ã:** {(enabled ? "–î–∞" : "–ù–µ—Ç")}
            üïí **–ü–µ—Ä–∏–æ–¥:** {startHour:00}:00 - {endHour:00}:00
            
            üò¥ –í —Ç–∏—Ö–∏–µ —á–∞—Å—ã —è –±—É–¥—É {(enabled ? "–º–æ–ª—á–∞—Ç—å –∏ –Ω–µ —Ç—Ä–µ–≤–æ–∂–∏—Ç—å" : "—É–≤–µ–¥–æ–º–ª—è—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω–æ")}.
            """;
    }

    /// <summary>
    /// –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    /// </summary>
    public async Task<string> ShowAllSettingsAsync()
    {
        var notifications = GetNotificationSettings();
        
        return $"""
            ‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –°–æ–∑–¥–∞—Ç–µ–ª—è**
            
            üß† **–ú—ã—Å–ª–∏:**
            ‚Ä¢ –í–∫–ª—é—á–µ–Ω—ã: {(notifications.EnableThoughtNotifications ? "‚úÖ" : "‚ùå")}
            ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {notifications.ThoughtNotificationInterval.TotalMinutes} –º–∏–Ω
            
            üé≠ **–≠–º–æ—Ü–∏–∏:**
            ‚Ä¢ –í–∫–ª—é—á–µ–Ω—ã: {(notifications.EnableEmotionNotifications ? "‚úÖ" : "‚ùå")}
            ‚Ä¢ –ü–æ—Ä–æ–≥ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏: {notifications.EmotionIntensityThreshold:P0}
            
            üìö **–û–±—É—á–µ–Ω–∏–µ:**
            ‚Ä¢ –í–∫–ª—é—á–µ–Ω—ã: {(notifications.EnableLearningNotifications ? "‚úÖ" : "‚ùå")}
            ‚Ä¢ –ü–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏: {notifications.LearningImportanceThreshold}/10
            
            üö® **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
            ‚Ä¢ –í–∫–ª—é—á–µ–Ω—ã: {(notifications.EnableCriticalAlerts ? "‚úÖ" : "‚ùå")}
            
            üì± **Telegram:**
            ‚Ä¢ –í–∫–ª—é—á–µ–Ω: {(notifications.TelegramEnabled ? "‚úÖ" : "‚ùå")}
            ‚Ä¢ Chat ID: {(string.IsNullOrEmpty(notifications.TelegramChatId) ? "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" : notifications.TelegramChatId)}
            
            üåô **–¢–∏—Ö–∏–µ —á–∞—Å—ã:**
            ‚Ä¢ –í–∫–ª—é—á–µ–Ω—ã: {(notifications.QuietHours.Enabled ? "‚úÖ" : "‚ùå")}
            ‚Ä¢ –ü–µ—Ä–∏–æ–¥: {notifications.QuietHours.StartHour:00}:00 - {notifications.QuietHours.EndHour:00}:00
            
            üí≠ **–°—Ç–∞—Ç—É—Å:** –Ø —Å–ª–µ–∂—É –∑–∞ —Å–≤–æ–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –∏ –≥–æ—Ç–æ–≤–∞ —É–≤–µ–¥–æ–º–ª—è—Ç—å —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.
            """;
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–π—á–∞—Å
    /// </summary>
    public bool ShouldNotifyNow(NotificationType type, double? intensity = null, int? importance = null)
    {
        var settings = GetNotificationSettings();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏—Ö–∏–µ —á–∞—Å—ã
        if (settings.QuietHours.Enabled && IsQuietTime(settings.QuietHours))
        {
            return type == NotificationType.Critical; // –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–∏—à–∏–Ω–µ
        }
        
        return type switch
        {
            NotificationType.Thought => settings.EnableThoughtNotifications,
            NotificationType.Emotion => settings.EnableEmotionNotifications && 
                                       (intensity ?? 0) >= settings.EmotionIntensityThreshold,
            NotificationType.Learning => settings.EnableLearningNotifications && 
                                        (importance ?? 0) >= settings.LearningImportanceThreshold,
            NotificationType.Critical => settings.EnableCriticalAlerts,
            _ => false
        };
    }

    /// <summary>
    /// –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    /// </summary>
    public async Task<string> ResetToDefaultsAsync()
    {
        _preferences.Clear();
        _preferences["enable_thought_notifications"] = true;
        _preferences["enable_emotion_notifications"] = true;
        _preferences["enable_learning_notifications"] = true;
        _preferences["enable_critical_alerts"] = true;
        _preferences["thought_notification_interval_minutes"] = 30;
        _preferences["emotion_intensity_threshold"] = 0.8;
        _preferences["learning_importance_threshold"] = 7;
        _preferences["telegram_enabled"] = false;
        _preferences["quiet_hours_enabled"] = false;
        
        await SavePreferences();
        
        return """
            üîÑ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é**
            
            ‚úÖ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã
            ‚è∞ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏ –ø–æ—Ä–æ–≥–∏
            üì± Telegram –æ—Ç–∫–ª—é—á–µ–Ω
            üåô –¢–∏—Ö–∏–µ —á–∞—Å—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã
            
            üí≠ –¢–µ–ø–µ—Ä—å —è –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ–±–æ –≤—Å–µ—Ö –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö.
            """;
    }

    private Dictionary<string, object> LoadPreferences()
    {
        try
        {
            if (File.Exists(_preferencesFilePath))
            {
                var json = File.ReadAllText(_preferencesFilePath);
                return JsonSerializer.Deserialize<Dictionary<string, object>>(json) ?? new Dictionary<string, object>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading preferences: {ex.Message}");
        }
        
        return new Dictionary<string, object>();
    }

    private async Task SavePreferences()
    {
        try
        {
            var json = JsonSerializer.Serialize(_preferences, new JsonSerializerOptions { WriteIndented = true });
            await File.WriteAllTextAsync(_preferencesFilePath, json);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving preferences: {ex.Message}");
        }
    }

    private bool GetBool(string key, bool defaultValue = false)
    {
        if (_preferences.TryGetValue(key, out var value))
        {
            return value is bool b ? b : Convert.ToBoolean(value);
        }
        return defaultValue;
    }

    private int GetInt(string key, int defaultValue = 0)
    {
        if (_preferences.TryGetValue(key, out var value))
        {
            return value is int i ? i : Convert.ToInt32(value);
        }
        return defaultValue;
    }

    private double GetDouble(string key, double defaultValue = 0.0)
    {
        if (_preferences.TryGetValue(key, out var value))
        {
            return value is double d ? d : Convert.ToDouble(value);
        }
        return defaultValue;
    }

    private string GetString(string key, string defaultValue = "")
    {
        if (_preferences.TryGetValue(key, out var value))
        {
            return value?.ToString() ?? defaultValue;
        }
        return defaultValue;
    }

    private bool IsQuietTime(QuietHours quietHours)
    {
        var now = DateTime.Now.Hour;
        
        if (quietHours.StartHour <= quietHours.EndHour)
        {
            // –û–±—ã—á–Ω—ã–π —Å–ª—É—á–∞–π: 22:00 - 8:00 (—Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è)
            return now >= quietHours.StartHour || now < quietHours.EndHour;
        }
        else
        {
            // –°–ª—É—á–∞–π —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å: 8:00 - 22:00
            return now >= quietHours.StartHour && now < quietHours.EndHour;
        }
    }
}

/// <summary>
/// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/// </summary>
public class NotificationSettings
{
    public bool EnableThoughtNotifications { get; set; } = true;
    public bool EnableEmotionNotifications { get; set; } = true;
    public bool EnableLearningNotifications { get; set; } = true;
    public bool EnableCriticalAlerts { get; set; } = true;
    
    public TimeSpan ThoughtNotificationInterval { get; set; } = TimeSpan.FromMinutes(30);
    public double EmotionIntensityThreshold { get; set; } = 0.8;
    public int LearningImportanceThreshold { get; set; } = 7;
    
    public bool TelegramEnabled { get; set; } = false;
    public string TelegramChatId { get; set; } = string.Empty;
    
    public QuietHours QuietHours { get; set; } = new();
}

/// <summary>
/// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤
/// </summary>
public class QuietHours
{
    public bool Enabled { get; set; } = false;
    public int StartHour { get; set; } = 22; // 22:00
    public int EndHour { get; set; } = 8;    // 08:00
}

/// <summary>
/// –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/// </summary>
public enum NotificationType
{
    Thought,
    Emotion,
    Learning,
    Critical
}