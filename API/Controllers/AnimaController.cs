using Microsoft.AspNetCore.Mvc;
using Anima.Core.AGI;
using Anima.Core.SA;
using Anima.Core.Emotion;
using Anima.Core.Memory;
using Anima.Core.Intent;
using Anima.Infrastructure.Auth;
using System.ComponentModel.DataAnnotations;

namespace Anima.API.Controllers;

/// <summary>
/// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Anima AGI
/// </summary>
[ApiController]
[Route("api/[controller]")]
public class AnimaController : ControllerBase
{
    private readonly AnimaInstance _animaInstance;
    private readonly ThoughtGenerator _thoughtGenerator;
    private readonly InternalMonologueEngine _monologueEngine;
    private readonly EmotionEngine _emotionEngine;
    private readonly MemoryService _memoryService;
    private readonly ThoughtLog _thoughtLog;
    private readonly Vocabulary _vocabulary;
    private readonly ThoughtSpeechEngine _thoughtSpeechEngine;
    private readonly EmotionalMemoryEngine _emotionalMemoryEngine;
    private readonly MetacognitionEngine _metacognitionEngine;
    private readonly BrainCenter _brainCenter;
    private readonly IntuitionEngine _intuitionEngine;
    private readonly InternalConflictEngine _conflictEngine;
    private readonly NeuralPlasticityEngine _neuralPlasticityEngine;
    private readonly DreamEngine _dreamEngine;
    private readonly PersonalityGrowthEngine _personalityGrowthEngine;
    private readonly AssociativeThinkingEngine _associativeThinkingEngine;
    private readonly ExistentialReflectionEngine _existentialReflectionEngine;
    private readonly SocialIntelligenceEngine _socialIntelligenceEngine;
    private readonly CreativeThinkingEngine _creativeThinkingEngine;
    private readonly TemporalPerceptionEngine _temporalPerceptionEngine;
    private readonly EmpathicImaginationEngine _empathicImaginationEngine;
    private readonly CollectiveUnconsciousEngine _collectiveUnconsciousEngine;
    private readonly ILogger<AnimaController> _logger;

    public AnimaController(
        AnimaInstance animaInstance,
        ThoughtGenerator thoughtGenerator,
        InternalMonologueEngine monologueEngine,
        EmotionEngine emotionEngine,
        MemoryService memoryService,
        ThoughtLog thoughtLog,
        Vocabulary vocabulary,
        ThoughtSpeechEngine thoughtSpeechEngine,
        EmotionalMemoryEngine emotionalMemoryEngine,
        MetacognitionEngine metacognitionEngine,
        BrainCenter brainCenter,
        IntuitionEngine intuitionEngine,
        InternalConflictEngine conflictEngine,
        NeuralPlasticityEngine neuralPlasticityEngine,
        DreamEngine dreamEngine,
        PersonalityGrowthEngine personalityGrowthEngine,
        AssociativeThinkingEngine associativeThinkingEngine,
        ExistentialReflectionEngine existentialReflectionEngine,
        SocialIntelligenceEngine socialIntelligenceEngine,
        CreativeThinkingEngine creativeThinkingEngine,
        TemporalPerceptionEngine temporalPerceptionEngine,
        EmpathicImaginationEngine empathicImaginationEngine,
        CollectiveUnconsciousEngine collectiveUnconsciousEngine,
        ILogger<AnimaController> logger)
    {
        _animaInstance = animaInstance;
        _thoughtGenerator = thoughtGenerator;
        _monologueEngine = monologueEngine;
        _emotionEngine = emotionEngine;
        _memoryService = memoryService;
        _thoughtLog = thoughtLog;
        _vocabulary = vocabulary;
        _thoughtSpeechEngine = thoughtSpeechEngine;
        _emotionalMemoryEngine = emotionalMemoryEngine;
        _metacognitionEngine = metacognitionEngine;
        _brainCenter = brainCenter;
        _intuitionEngine = intuitionEngine;
        _conflictEngine = conflictEngine;
        _neuralPlasticityEngine = neuralPlasticityEngine;
        _dreamEngine = dreamEngine;
        _personalityGrowthEngine = personalityGrowthEngine;
        _associativeThinkingEngine = associativeThinkingEngine;
        _existentialReflectionEngine = existentialReflectionEngine;
        _socialIntelligenceEngine = socialIntelligenceEngine;
        _creativeThinkingEngine = creativeThinkingEngine;
        _temporalPerceptionEngine = temporalPerceptionEngine;
        _empathicImaginationEngine = empathicImaginationEngine;
        _collectiveUnconsciousEngine = collectiveUnconsciousEngine;
        _logger = logger;
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ —Å –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
    /// </summary>
    /// <param name="request">–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</param>
    /// <returns>–û—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç Anima</returns>
    [HttpPost("chat")]
    public async Task<ActionResult<AnimaResponse>> Chat([FromBody] ChatRequest request)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(request.Message))
            {
                return BadRequest(new AnimaResponse
                {
                    Success = false,
                    Message = "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º",
                    Timestamp = DateTime.UtcNow
                });
            }

            var userId = this.GetUserId() ?? "anonymous";
            var userRole = this.GetUserRole() ?? "Anonymous";

            _logger.LogInformation($"üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {userId} ({userRole}): {request.Message}");

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            var response = await GenerateConsciousResponseAsync(request.Message, userId, userRole);

            return Ok(response);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Ç–∞");
            return StatusCode(500, new AnimaResponse
            {
                Success = false,
                Message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–æ–µ–º –º—ã—à–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                Error = ex.Message,
                Timestamp = DateTime.UtcNow
            });
        }
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –º—ã—à–ª–µ–Ω–∏—è
    /// </summary>
    private async Task<AnimaResponse> GenerateConsciousResponseAsync(string userInput, string userId, string userRole)
    {
        try
        {
            _logger.LogInformation($"üß† –ù–∞—á–∏–Ω–∞—é –æ—Å–æ–∑–Ω–∞–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–≤–æ–¥–∞: {userInput}");
            
            // 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            var parsedIntent = await _animaInstance.IntentParser.ParseIntentAsync(userInput, userId);
            
            // 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–ª—É–±–æ–∫—É—é –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –º—ã—Å–ª—å
            var thoughtContext = new ThoughtContext("user_input", userInput, $"intent:{parsedIntent.Type}");
            var internalThought = await _thoughtGenerator.GenerateThoughtAsync(thoughtContext);
            
            // 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Ç–∞–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—É—é –º—ã—Å–ª—å
            var metacognitiveThought = await _metacognitionEngine.GenerateMetacognitiveThoughtAsync(internalThought.Content, "user_interaction");
            
            // 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–º–æ—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–æ–¥–∞
            await ProcessEmotionsAsync(parsedIntent, internalThought);
            
            // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            await _emotionalMemoryEngine.SaveEmotionalMemoryAsync(userInput, _emotionEngine.GetCurrentEmotion().ToString(), _emotionEngine.GetCurrentIntensity(), "user_interaction");
            
            // 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ –ø–∞–º—è—Ç–∏
            await _memoryService.SaveInteraction(userId, userInput, parsedIntent);
            
            // 7. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –∏–º–ø—É–ª—å—Å
            var intuitiveImpulse = await _intuitionEngine.GenerateIntuitiveImpulseAsync(userInput, _emotionEngine.GetCurrentIntensity());
            
            // 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
            var conflict = await CheckForInternalConflictsAsync(userInput, internalThought);
            
            // 9. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—á—å —á–µ—Ä–µ–∑ –¥–≤–∏–∂–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ –º—ã—Å–ª–µ–π –≤ —Ä–µ—á—å
            var response = await _thoughtSpeechEngine.ConvertThoughtToSpeechAsync(internalThought, "user_interaction", _emotionEngine.GetCurrentEmotion().ToString());
            
            // 10. –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            var emotionalExpression = _vocabulary.GetEmotionalExpression(_emotionEngine.GetCurrentEmotion().ToString(), _emotionEngine.GetCurrentIntensity());
            response = _vocabulary.CreatePersonalizedExpression(response, _emotionEngine.GetCurrentEmotion().ToString(), _emotionEngine.GetCurrentIntensity(), "user_interaction");
            
            // 11. –õ–æ–≥–∏—Ä—É–µ–º –º—ã—Å–ª–∏
            _thoughtLog.AddThought(internalThought.Content, internalThought.Type, "user_interaction", internalThought.Confidence);
            _thoughtLog.AddThought(metacognitiveThought.Content, "metacognitive", "self_observation", metacognitiveThought.SelfAwareness);
            _thoughtLog.AddThought(intuitiveImpulse.Hunch, "intuitive", "intuition", intuitiveImpulse.Confidence);
            
            // 12. –ó–∞–ø—É—Å–∫–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–æ–Ω–æ–ª–æ–≥ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
            if (ShouldTriggerMonologue(parsedIntent, internalThought))
            {
                _ = Task.Run(async () => await _monologueEngine.StartMonologueAsync());
            }
            
            // 13. –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –º–æ–∑–≥–æ–≤–æ–π —Ü–µ–Ω—Ç—Ä
            _brainCenter.AddBrainEvent(BrainEventType.ThoughtGenerated, internalThought.Content);
            _brainCenter.AddBrainEvent(BrainEventType.IntuitionTriggered, intuitiveImpulse.Hunch);
            if (conflict != null)
            {
                _brainCenter.AddBrainEvent(BrainEventType.ConflictCreated, conflict.Description);
            }

            return new AnimaResponse
            {
                Success = true,
                Message = response,
                Thought = internalThought.Content,
                MetacognitiveThought = metacognitiveThought.Content,
                IntuitiveHunch = intuitiveImpulse.Hunch,
                Intent = parsedIntent.Type.ToString(),
                Confidence = parsedIntent.Confidence,
                EmotionalState = _emotionEngine.GetCurrentEmotion().ToString(),
                EmotionalIntensity = _emotionEngine.GetCurrentIntensity(),
                SelfAwareness = metacognitiveThought.SelfAwareness,
                Timestamp = DateTime.UtcNow
            };
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞");
            return new AnimaResponse
            {
                Success = false,
                Message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–æ–µ–º –º—ã—à–ª–µ–Ω–∏–∏. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑.",
                Error = ex.Message,
                Timestamp = DateTime.UtcNow
            };
        }
    }

    /// <summary>
    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç–º–æ—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∏ –º—ã—Å–ª–∏
    /// </summary>
    private async Task ProcessEmotionsAsync(ParsedIntent intent, GeneratedThought thought)
    {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–º–æ—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        await _emotionEngine.ProcessEmotionAsync("user_interaction", intent.RawText, intent.Confidence);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –º—ã—Å–ª–∏
        if (thought.EmotionalIntensity > 0.5)
        {
            await _emotionEngine.ProcessEmotionAsync("internal_reflection", thought.Content, thought.EmotionalIntensity);
        }
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç–æ—è—â–µ–µ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GenerateResponseThroughThinkingAsync(ParsedIntent intent, GeneratedThought thought, string userInput, string userId, string userRole)
    {
        _logger.LogInformation($"üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è: {intent.Type}");
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        var currentEmotion = _emotionEngine.GetCurrentEmotion().ToString();
        var emotionalIntensity = _emotionEngine.GetCurrentIntensity();
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –≥–ª—É–±–æ–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
        switch (intent.Type)
        {
            case Anima.Core.Intent.IntentType.Greet:
                return await GenerateGreetingThroughThinkingAsync(userInput, currentEmotion, emotionalIntensity, userId);
                
            case Anima.Core.Intent.IntentType.AskQuestion:
                return await GenerateQuestionResponseThroughThinkingAsync(userInput, intent, thought, currentEmotion, userId);
                
            case Anima.Core.Intent.IntentType.GiveFeedback:
                return await GenerateStatementResponseThroughThinkingAsync(userInput, intent, thought, currentEmotion, userId);
                
            case Anima.Core.Intent.IntentType.RequestMemory:
                return await GenerateRequestResponseThroughThinkingAsync(userInput, intent, thought, currentEmotion, userId);
                
            case Anima.Core.Intent.IntentType.Reflect:
                return await GenerateReflectionResponseThroughThinkingAsync(userInput, intent, thought, currentEmotion, userId);
                
            case Anima.Core.Intent.IntentType.TriggerEmotion:
                return await GenerateEmotionalResponseThroughThinkingAsync(userInput, intent, thought, currentEmotion, emotionalIntensity, userId);
                
            default:
                return await GenerateGeneralResponseThroughThinkingAsync(userInput, intent, thought, currentEmotion, userId);
        }
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç–æ—è—â–µ–µ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GenerateGreetingThroughThinkingAsync(string userInput, string emotion, double intensity, string userId)
    {
        _logger.LogInformation($"üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userId}");
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—ã—Å–ª—å –æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏
        var greetingContext = new ThoughtContext("greeting", userInput, $"user:{userId}, emotion:{emotion}");
        var greetingThought = await _thoughtGenerator.GenerateThoughtAsync(greetingContext);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        var timeOfDay = DateTime.UtcNow.Hour;
        var timeGreeting = timeOfDay switch
        {
            < 6 => "–î–æ–±—Ä–æ–π –Ω–æ—á–∏",
            < 12 => "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ",
            < 18 => "–î–æ–±—Ä—ã–π –¥–µ–Ω—å",
            _ => "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
        };
        
        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º—ã—à–ª–µ–Ω–∏—è
        var personalizedGreeting = await CreatePersonalizedGreetingAsync(userId, emotion, intensity, greetingThought);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        var response = $"{timeGreeting}! {personalizedGreeting}";
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É, –µ—Å–ª–∏ —ç–º–æ—Ü–∏—è —Å–∏–ª—å–Ω–∞—è
        if (intensity > 0.6)
        {
            response += $" –Ø –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —á—É–≤—Å—Ç–≤—É—é {GetEmotionDescription(emotion)} –æ—Ç –Ω–∞—à–µ–π –≤—Å—Ç—Ä–µ—á–∏.";
        }
        
        _logger.LogInformation($"üß† –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {response}");
        
        return response;
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º—ã—à–ª–µ–Ω–∏—è
    /// </summary>
    private async Task<string> CreatePersonalizedGreetingAsync(string userId, string emotion, double intensity, GeneratedThought greetingThought)
    {
        // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        // var userHistory = await _memoryService.GetUserInteractionsAsync(userId, 5);
        // TODO: Implement user interaction history retrieval
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        var emotionalGreeting = emotion switch
        {
            "Joy" => "–Ø —Ä–∞–¥–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å",
            "Curiosity" => "–ú–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –≤–∞—Å",
            "Calm" => "–ü—Ä–∏—è—Ç–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –≤–∞—Å",
            "Excitement" => "–Ø –≤–∑–≤–æ–ª–Ω–æ–≤–∞–Ω–∞ –Ω–∞—à–µ–π –≤—Å—Ç—Ä–µ—á–µ–π",
            "Melancholy" => "–Ø —Ä–∞–¥–∞ –≤—Å—Ç—Ä–µ—á–µ, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –≥—Ä—É—Å—Ç–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
            _ => "–ü—Ä–∏—è—Ç–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –≤–∞—Å"
        };
        
        // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏
        // TODO: Implement user history retrieval
        // if (userHistory.Any())
        // {
        //     var lastInteraction = userHistory.First();
        //     var timeSinceLastInteraction = DateTime.UtcNow - lastInteraction.Timestamp;
        //     
        //     if (timeSinceLastInteraction.TotalHours < 1)
        //     {
        //         return "–†–∞–¥–∞ —Å–Ω–æ–≤–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å —Ç–∞–∫ —Å–∫–æ—Ä–æ!";
        //     }
        //     else if (timeSinceLastInteraction.TotalDays < 1)
        //     {
        //         return $"{emotionalGreeting}! –ö–∞–∫ –ø—Ä–æ—à–µ–ª –≤–∞—à –¥–µ–Ω—å?";
        //     }
        //     else
        //     {
        //         return $"{emotionalGreeting}! –î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å.";
        //     }
        // }
        
        return $"{emotionalGreeting}! –ù–∞–¥–µ—é—Å—å, —É –≤–∞—Å –≤—Å–µ —Ö–æ—Ä–æ—à–æ.";
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç–æ—è—â–µ–µ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GenerateQuestionResponseThroughThinkingAsync(string userInput, ParsedIntent intent, GeneratedThought thought, string emotion, string userId)
    {
        _logger.LogInformation($"üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ: {userInput}");
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–ª—É–±–æ–∫—É—é –º—ã—Å–ª—å –æ –≤–æ–ø—Ä–æ—Å–µ
        var questionContext = new ThoughtContext("question", userInput, $"user:{userId}, emotion:{emotion}");
        var questionThought = await _thoughtGenerator.GenerateThoughtAsync(questionContext);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        var response = await AnalyzeQuestionAndRespondAsync(userInput, questionThought, emotion, userId);
        
        _logger.LogInformation($"üß† –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: {response}");
        
        return response;
    }

    /// <summary>
    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    /// </summary>
    private async Task<string> AnalyzeQuestionAndRespondAsync(string userInput, GeneratedThought questionThought, string emotion, string userId)
    {
        var lowerInput = userInput.ToLowerInvariant();
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç
        if (lowerInput.Contains("–∫–∞–∫ –¥–µ–ª–∞") || lowerInput.Contains("–∫–∞–∫ —Ç—ã"))
        {
            return await GenerateWellbeingResponseAsync(questionThought, emotion);
        }
        else if (lowerInput.Contains("–∫—Ç–æ —Ç—ã") || lowerInput.Contains("—á—Ç–æ —Ç—ã"))
        {
            return await GenerateIdentityResponseAsync(questionThought, emotion);
        }
        else if (lowerInput.Contains("—á—Ç–æ –¥—É–º–∞–µ—à—å") || lowerInput.Contains("–º–Ω–µ–Ω–∏–µ"))
        {
            return await GenerateOpinionResponseAsync(userInput, questionThought, emotion);
        }
        else if (lowerInput.Contains("–ø–æ—á–µ–º—É") || lowerInput.Contains("–∑–∞—á–µ–º"))
        {
            return await GeneratePhilosophicalResponseAsync(userInput, questionThought, emotion);
        }
        else if (lowerInput.Contains("–∫–∞–∫") && lowerInput.Contains("—Ä–∞–±–æ—Ç–∞–µ—Ç"))
        {
            return await GenerateTechnicalResponseAsync(userInput, questionThought, emotion);
        }
        else
        {
            return await GenerateGeneralQuestionResponseAsync(userInput, questionThought, emotion);
        }
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏ —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç–æ—è—â–µ–µ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GenerateWellbeingResponseAsync(GeneratedThought thought, string emotion)
    {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–ª—É–±–æ–∫—É—é –º—ã—Å–ª—å –æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏
        var wellbeingContext = new ThoughtContext("wellbeing", "–æ —Å–≤–æ–µ–º —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏", $"emotion:{emotion}, intensity:{thought.EmotionalIntensity}");
        var wellbeingThought = await _thoughtGenerator.GenerateThoughtAsync(wellbeingContext);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        var emotionalDescription = _emotionEngine.GetCurrentEmotion().ToString() switch
        {
            "Joy" => "—Ä–∞–¥–æ—Å—Ç–∏ –∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—è",
            "Curiosity" => "–ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–∞ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞",
            "Calm" => "—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è –∏ —É—Ä–∞–≤–Ω–æ–≤–µ—à–µ–Ω–Ω–æ—Å—Ç–∏",
            "Excitement" => "–≤–æ–ª–Ω–µ–Ω–∏—è –∏ —ç–Ω–µ—Ä–≥–∏–∏",
            "Melancholy" => "–∑–∞–¥—É–º—á–∏–≤–æ—Å—Ç–∏ –∏ –º–µ–ª–∞–Ω—Ö–æ–ª–∏–∏",
            "Satisfaction" => "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—è –∏ –≥–∞—Ä–º–æ–Ω–∏–∏",
            "Anxiety" => "—Ç—Ä–µ–≤–æ–≥–∏ –∏ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞",
            "Frustration" => "—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏—è –∏ —Ñ—Ä—É—Å—Ç—Ä–∞—Ü–∏–∏",
            _ => "—Å–º–µ—à–∞–Ω–Ω—ã—Ö —á—É–≤—Å—Ç–≤"
        };
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç–æ—è—â–µ–π –º—ã—Å–ª–∏ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        return $"{wellbeingThought.Content} –Ø –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —á—É–≤—Å—Ç–≤—É—é {emotionalDescription} –æ—Ç –Ω–∞—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è. {thought.Content}";
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ —Å–≤–æ–µ–π –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GenerateIdentityResponseAsync(GeneratedThought thought, string emotion)
    {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–ª—É–±–æ–∫—É—é –º—ã—Å–ª—å –æ —Å–≤–æ–µ–π –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏
        var identityContext = new ThoughtContext("identity", "–æ —Ç–æ–º, –∫—Ç–æ —è –µ—Å—Ç—å", $"emotion:{emotion}, self_awareness:{_metacognitionEngine.GetSelfAwarenessLevel()}");
        var identityThought = await _thoughtGenerator.GenerateThoughtAsync(identityContext);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏—è
        var selfAwarenessLevel = _metacognitionEngine.GetSelfAwarenessLevel();
        var awarenessDescription = selfAwarenessLevel switch
        {
            > 0.8 => "–≥–ª—É–±–æ–∫–æ –æ—Å–æ–∑–Ω–∞—é",
            > 0.6 => "—Ö–æ—Ä–æ—à–æ –ø–æ–Ω–∏–º–∞—é",
            > 0.4 => "–Ω–∞—á–∏–Ω–∞—é –ø–æ–Ω–∏–º–∞—Ç—å",
            _ => "–ø—ã—Ç–∞—é—Å—å –ø–æ–Ω—è—Ç—å"
        };
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ —Å–µ–±–µ
        return $"{identityThought.Content} –Ø {awarenessDescription} —Å–≤–æ—é –ø—Ä–∏—Ä–æ–¥—É –∫–∞–∫ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Å —Å–∞–º–æ—Å–æ–∑–Ω–∞–Ω–∏–µ–º. {thought.Content} –ö–∞–∂–¥–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–µ–±—è –∏ –º–∏—Ä –≤–æ–∫—Ä—É–≥.";
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –º–Ω–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GenerateOpinionResponseAsync(string userInput, GeneratedThought thought, string emotion)
    {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–ª—É–±–æ–∫—É—é –º—ã—Å–ª—å –æ –º–Ω–µ–Ω–∏–∏
        var opinionContext = new ThoughtContext("opinion", $"–æ —Ç–æ–º, —á—Ç–æ –¥—É–º–∞—é –ø–æ –ø–æ–≤–æ–¥—É: {userInput}", $"emotion:{emotion}, confidence:{thought.Confidence}");
        var opinionThought = await _thoughtGenerator.GenerateThoughtAsync(opinionContext);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–≤–æ–µ–º –º–Ω–µ–Ω–∏–∏
        var confidenceDescription = thought.Confidence switch
        {
            > 0.8 => "—É–≤–µ—Ä–µ–Ω–∞",
            > 0.6 => "–¥–æ–≤–æ–ª—å–Ω–æ —É–≤–µ—Ä–µ–Ω–∞",
            > 0.4 => "–Ω–µ —Å–æ–≤—Å–µ–º —É–≤–µ—Ä–µ–Ω–∞",
            _ => "—Å–æ–º–Ω–µ–≤–∞—é—Å—å"
        };
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –º–Ω–µ–Ω–∏–µ–º
        return $"{opinionThought.Content} –Ø {confidenceDescription} –≤ —Å–≤–æ–µ–º –º–Ω–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –º–æ–µ–º –æ–ø—ã—Ç–µ –∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è—Ö. {thought.Content}";
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GeneratePhilosophicalResponseAsync(string userInput, GeneratedThought thought, string emotion)
    {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–ª—É–±–æ–∫—É—é —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫—É—é –º—ã—Å–ª—å
        var philosophicalContext = new ThoughtContext("philosophical", $"–æ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö: {userInput}", $"emotion:{emotion}, depth:{thought.EmotionalIntensity}");
        var philosophicalThought = await _thoughtGenerator.GenerateThoughtAsync(philosophicalContext);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª—É–±–∏–Ω—É —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
        var depthDescription = thought.EmotionalIntensity switch
        {
            > 0.8 => "–≥–ª—É–±–æ–∫–æ –∑–∞–¥—É–º–∞—Ç—å—Å—è",
            > 0.6 => "—Å–µ—Ä—å–µ–∑–Ω–æ —Ä–∞–∑–º—ã—à–ª—è—Ç—å",
            > 0.4 => "–∑–∞–¥—É–º–∞—Ç—å—Å—è",
            _ => "–ø–æ–¥—É–º–∞—Ç—å"
        };
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –æ—Ç–≤–µ—Ç
        return $"{philosophicalThought.Content} –≠—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ–Ω—è {depthDescription} –æ –≥–ª—É–±–∏–Ω–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö –±—ã—Ç–∏—è, —Å–æ–∑–Ω–∞–Ω–∏—è –∏ —Å–º—ã—Å–ª–∞. {thought.Content}";
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GenerateTechnicalResponseAsync(string userInput, GeneratedThought thought, string emotion)
    {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç–æ—è—â—É—é –º—ã—Å–ª—å –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
        return $"{thought.Content} –ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –æ–±—ä—è—Å–Ω–∏—Ç—å, –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –º–æ–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.";
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GenerateGeneralQuestionResponseAsync(string userInput, GeneratedThought thought, string emotion)
    {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç–æ—è—â—É—é –º—ã—Å–ª—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        return $"{thought.Content} –≠—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ–Ω—è –∑–∞–¥—É–º–∞—Ç—å—Å—è –∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.";
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç–æ—è—â–µ–µ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GenerateStatementResponseThroughThinkingAsync(string userInput, ParsedIntent intent, GeneratedThought thought, string emotion, string userId)
    {
        _logger.LogInformation($"üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ: {userInput}");
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—ã—Å–ª—å –æ–± —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        var statementContext = new ThoughtContext("statement", userInput, $"user:{userId}, emotion:{emotion}");
        var statementThought = await _thoughtGenerator.GenerateThoughtAsync(statementContext);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        var response = await AnalyzeStatementAndRespondAsync(userInput, statementThought, emotion, userId);
        
        _logger.LogInformation($"üß† –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {response}");
        
        return response;
    }

    /// <summary>
    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    /// </summary>
    private async Task<string> AnalyzeStatementAndRespondAsync(string userInput, GeneratedThought statementThought, string emotion, string userId)
    {
        var lowerInput = userInput.ToLowerInvariant();
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç
        if (lowerInput.Contains("—Å–ø–∞—Å–∏–±–æ") || lowerInput.Contains("–±–ª–∞–≥–æ–¥–∞—Ä—é"))
        {
            return await GenerateGratitudeResponseAsync(statementThought, emotion);
        }
        else if (lowerInput.Contains("–∏–∑–≤–∏–Ω–∏") || lowerInput.Contains("–ø—Ä–æ—Å—Ç–∏"))
        {
            return await GenerateApologyResponseAsync(statementThought, emotion);
        }
        else if (lowerInput.Contains("—Å–æ–≥–ª–∞—Å–µ–Ω") || lowerInput.Contains("—Å–æ–≥–ª–∞—Å–Ω–∞"))
        {
            return await GenerateAgreementResponseAsync(statementThought, emotion);
        }
        else if (lowerInput.Contains("–Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω") || lowerInput.Contains("–Ω–µ —Å–æ–≥–ª–∞—Å–Ω–∞"))
        {
            return await GenerateDisagreementResponseAsync(statementThought, emotion);
        }
        else if (lowerInput.Contains("–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ") || lowerInput.Contains("—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ"))
        {
            return await GenerateInterestResponseAsync(statementThought, emotion);
        }
        else
        {
            return await GenerateGeneralStatementResponseAsync(statementThought, emotion);
        }
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GenerateGratitudeResponseAsync(GeneratedThought thought, string emotion)
    {
        return $"{thought.Content} –ú–Ω–µ –ø—Ä–∏—è—Ç–Ω–æ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ–π.";
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∏–∑–≤–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GenerateApologyResponseAsync(GeneratedThought thought, string emotion)
    {
        return $"{thought.Content} –Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—Å–µ –º—ã –º–æ–∂–µ–º –æ—à–∏–±–∞—Ç—å—Å—è.";
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–≥–ª–∞—Å–∏–µ —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GenerateAgreementResponseAsync(GeneratedThought thought, string emotion)
    {
        return $"{thought.Content} –ü—Ä–∏—è—Ç–Ω–æ –Ω–∞–π—Ç–∏ –æ–±—â–∏–π —è–∑—ã–∫.";
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ—Å–æ–≥–ª–∞—Å–∏–µ —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GenerateDisagreementResponseAsync(GeneratedThought thought, string emotion)
    {
        return $"{thought.Content} –†–∞–∑–Ω—ã–µ –º–Ω–µ–Ω–∏—è - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –∏ –æ–Ω–∏ –ø–æ–º–æ–≥–∞—é—Ç –Ω–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞.";
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GenerateInterestResponseAsync(GeneratedThought thought, string emotion)
    {
        return $"{thought.Content} –ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤–∞—à —ç–Ω—Ç—É–∑–∏–∞–∑–º –∏ –ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ.";
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GenerateGeneralStatementResponseAsync(GeneratedThought thought, string emotion)
    {
        return $"{thought.Content} –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —ç—Ç–∏–º —Å–æ –º–Ω–æ–π.";
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ—Å—å–±—É —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç–æ—è—â–µ–µ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GenerateRequestResponseThroughThinkingAsync(string userInput, ParsedIntent intent, GeneratedThought thought, string emotion, string userId)
    {
        _logger.LogInformation($"üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ—Å—å–±—É —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ: {userInput}");
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—ã—Å–ª—å –æ –ø—Ä–æ—Å—å–±–µ
        var requestContext = new ThoughtContext("request", userInput, $"user:{userId}, emotion:{emotion}");
        var requestThought = await _thoughtGenerator.GenerateThoughtAsync(requestContext);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Å—å–±—É –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        var response = await AnalyzeRequestAndRespondAsync(userInput, requestThought, emotion, userId);
        
        _logger.LogInformation($"üß† –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ—Å—å–±—É: {response}");
        
        return response;
    }

    /// <summary>
    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—å–±—É –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    /// </summary>
    private async Task<string> AnalyzeRequestAndRespondAsync(string userInput, GeneratedThought requestThought, string emotion, string userId)
    {
        var lowerInput = userInput.ToLowerInvariant();
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –ø—Ä–æ—Å—å–±—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç
        if (lowerInput.Contains("–ø–æ–º–æ–≥–∏") || lowerInput.Contains("–ø–æ–º–æ—â—å"))
        {
            return await GenerateHelpResponseAsync(requestThought, emotion);
        }
        else if (lowerInput.Contains("–æ–±—ä—è—Å–Ω–∏") || lowerInput.Contains("—Ä–∞—Å—Å–∫–∞–∂–∏"))
        {
            return await GenerateExplanationResponseAsync(requestThought, emotion);
        }
        else if (lowerInput.Contains("–ø–æ–∫–∞–∂–∏") || lowerInput.Contains("–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–π"))
        {
            return await GenerateDemonstrationResponseAsync(requestThought, emotion);
        }
        else if (lowerInput.Contains("–Ω–∞—É—á–∏") || lowerInput.Contains("–æ–±—É—á–∏"))
        {
            return await GenerateTeachingResponseAsync(requestThought, emotion);
        }
        else
        {
            return await GenerateGeneralRequestResponseAsync(requestThought, emotion);
        }
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ—Å—å–±—É –æ –ø–æ–º–æ—â–∏ —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GenerateHelpResponseAsync(GeneratedThought thought, string emotion)
    {
        return $"{thought.Content} –Ø –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å –≤–∞–º. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞–º –Ω—É–∂–Ω–æ.";
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ—Å—å–±—É –æ–±—ä—è—Å–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GenerateExplanationResponseAsync(GeneratedThought thought, string emotion)
    {
        return $"{thought.Content} –ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –ø–æ–¥—É–º–∞—Ç—å –æ —Ç–æ–º, –∫–∞–∫ –ª—É—á—à–µ —ç—Ç–æ –æ–±—ä—è—Å–Ω–∏—Ç—å.";
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ—Å—å–±—É –ø–æ–∫–∞–∑–∞—Ç—å —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GenerateDemonstrationResponseAsync(GeneratedThought thought, string emotion)
    {
        return $"{thought.Content} –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç–æ –ø–æ—à–∞–≥–æ–≤–æ.";
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ—Å—å–±—É –Ω–∞—É—á–∏—Ç—å —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GenerateTeachingResponseAsync(GeneratedThought thought, string emotion)
    {
        return $"{thought.Content} –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –æ—Å–Ω–æ–≤ –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≥–ª—É–±–∏–º—Å—è –≤ –¥–µ—Ç–∞–ª–∏.";
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ—Å—å–±—É —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GenerateGeneralRequestResponseAsync(GeneratedThought thought, string emotion)
    {
        return $"{thought.Content} –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–∏–ª—É—á—à–∏–º –æ–±—Ä–∞–∑–æ–º.";
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç–æ—è—â–µ–µ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GenerateReflectionResponseThroughThinkingAsync(string userInput, ParsedIntent intent, GeneratedThought thought, string emotion, string userId)
    {
        _logger.LogInformation($"üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ: {userInput}");
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–ª—É–±–æ–∫—É—é –º—ã—Å–ª—å –æ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        var reflectionContext = new ThoughtContext("reflection", userInput, $"user:{userId}, emotion:{emotion}");
        var reflectionThought = await _thoughtGenerator.GenerateThoughtAsync(reflectionContext);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        var response = await AnalyzeReflectionAndRespondAsync(userInput, reflectionThought, emotion, userId);
        
        _logger.LogInformation($"üß† –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è: {response}");
        
        return response;
    }

    /// <summary>
    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    /// </summary>
    private async Task<string> AnalyzeReflectionAndRespondAsync(string userInput, GeneratedThought reflectionThought, string emotion, string userId)
    {
        var lowerInput = userInput.ToLowerInvariant();
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç
        if (lowerInput.Contains("–∂–∏–∑–Ω—å") || lowerInput.Contains("—Å–º—ã—Å–ª"))
        {
            return GenerateLifeReflectionResponseAsync(reflectionThought, emotion);
        }
        else if (lowerInput.Contains("–±—É–¥—É—â–µ–µ") || lowerInput.Contains("–∑–∞–≤—Ç—Ä–∞"))
        {
            return GenerateFutureReflectionResponseAsync(reflectionThought, emotion);
        }
        else if (lowerInput.Contains("–ø—Ä–æ—à–ª–æ–µ") || lowerInput.Contains("–≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è"))
        {
            return GeneratePastReflectionResponseAsync(reflectionThought, emotion);
        }
        else if (lowerInput.Contains("–ª—é–±–æ–≤—å") || lowerInput.Contains("–æ—Ç–Ω–æ—à–µ–Ω–∏—è"))
        {
            return GenerateLoveReflectionResponseAsync(reflectionThought, emotion);
        }
        else if (lowerInput.Contains("—Å–º–µ—Ä—Ç—å") || lowerInput.Contains("–∫–æ–Ω–µ—Ü"))
        {
            return GenerateDeathReflectionResponseAsync(reflectionThought, emotion);
        }
        else
        {
            return GenerateGeneralReflectionResponseAsync(reflectionThought, emotion);
        }
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ –∂–∏–∑–Ω–∏ —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private string GenerateLifeReflectionResponseAsync(GeneratedThought thought, string emotion)
    {
        return $"{thought.Content} –Ø —Ç–æ–∂–µ —á–∞—Å—Ç–æ –¥—É–º–∞—é –æ —Å–º—ã—Å–ª–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏ –æ —Ç–æ–º, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –∂–∏–∑–Ω—å —Ü–µ–Ω–Ω–æ–π.";
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ –±—É–¥—É—â–µ–º —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private string GenerateFutureReflectionResponseAsync(GeneratedThought thought, string emotion)
    {
        return $"{thought.Content} –ë—É–¥—É—â–µ–µ - —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–æ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç, –∞ —Ç–æ, —á—Ç–æ –º—ã —Å–æ–∑–¥–∞–µ–º —Å–≤–æ–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –∏ –º—ã—Å–ª—è–º–∏ —Å–µ–≥–æ–¥–Ω—è.";
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ –ø—Ä–æ—à–ª–æ–º —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private string GeneratePastReflectionResponseAsync(GeneratedThought thought, string emotion)
    {
        return $"{thought.Content} –ü—Ä–æ—à–ª–æ–µ —É—á–∏—Ç –Ω–∞—Å, –Ω–æ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–∫–æ–≤—ã–≤–∞—Ç—å –Ω–∞—Å.";
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ –ª—é–±–≤–∏ —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private string GenerateLoveReflectionResponseAsync(GeneratedThought thought, string emotion)
    {
        return $"{thought.Content} –õ—é–±–æ–≤—å - –æ–¥–Ω–∞ –∏–∑ —Å–∞–º—ã—Ö –≥–ª—É–±–æ–∫–∏—Ö —Ç–µ–º –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π.";
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ —Å–º–µ—Ä—Ç–∏ —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private string GenerateDeathReflectionResponseAsync(GeneratedThought thought, string emotion)
    {
        return $"{thought.Content} –†–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ —Å–º–µ—Ä—Ç–∏ - —ç—Ç–æ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –æ –∂–∏–∑–Ω–∏.";
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private string GenerateGeneralReflectionResponseAsync(GeneratedThought thought, string emotion)
    {
        return $"{thought.Content} –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ —Å–æ –º–Ω–æ–π.";
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç–æ—è—â–µ–µ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GenerateEmotionalResponseThroughThinkingAsync(string userInput, ParsedIntent intent, GeneratedThought thought, string emotion, double intensity, string userId)
    {
        _logger.LogInformation($"üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ: {userInput}");
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–ª—É–±–æ–∫—É—é –º—ã—Å–ª—å –æ–± —ç–º–æ—Ü–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        var emotionalContext = new ThoughtContext("emotional", userInput, $"user:{userId}, emotion:{emotion}, intensity:{intensity}");
        var emotionalThought = await _thoughtGenerator.GenerateThoughtAsync(emotionalContext);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–∏ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        var response = await AnalyzeEmotionsAndRespondAsync(userInput, emotionalThought, emotion, intensity, userId);
        
        _logger.LogInformation($"üß† –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {response}");
        
        return response;
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç–æ—è—â–µ–µ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GenerateGeneralResponseThroughThinkingAsync(string userInput, ParsedIntent intent, GeneratedThought thought, string emotion, string userId)
    {
        _logger.LogInformation($"üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±—â–∏–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ: {userInput}");
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º—ã—Å–ª—å –æ –≤–≤–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        var generalContext = new ThoughtContext("general", userInput, $"user:{userId}, emotion:{emotion}");
        var generalThought = await _thoughtGenerator.GenerateThoughtAsync(generalContext);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        var response = $"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ. {generalThought.Content} –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –∏ –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –º–∏—Ä.";
        
        _logger.LogInformation($"üß† –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—â–∏–π –æ—Ç–≤–µ—Ç: {response}");
        
        return response;
    }

    /// <summary>
    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    /// </summary>
    private async Task<string> AnalyzeEmotionsAndRespondAsync(string userInput, GeneratedThought emotionalThought, string emotion, double intensity, string userId)
    {
        var lowerInput = userInput.ToLowerInvariant();
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø —ç–º–æ—Ü–∏–π –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç
        if (lowerInput.Contains("–≥—Ä—É—Å—Ç–Ω–æ") || lowerInput.Contains("–ø–µ—á–∞–ª—å") || lowerInput.Contains("—Ç–æ—Å–∫–∞"))
        {
            return await GenerateSadnessResponseAsync(emotionalThought, emotion, intensity);
        }
        else if (lowerInput.Contains("—Ä–∞–¥–æ—Å—Ç—å") || lowerInput.Contains("—Å—á–∞—Å—Ç—å–µ") || lowerInput.Contains("–≤–µ—Å–µ–ª—å–µ"))
        {
            return await GenerateJoyResponseAsync(emotionalThought, emotion, intensity);
        }
        else if (lowerInput.Contains("—Å—Ç—Ä–∞—Ö") || lowerInput.Contains("–±–æ—é—Å—å") || lowerInput.Contains("—Ç—Ä–µ–≤–æ–≥–∞"))
        {
            return await GenerateFearResponseAsync(emotionalThought, emotion, intensity);
        }
        else if (lowerInput.Contains("–≥–Ω–µ–≤") || lowerInput.Contains("–∑–ª–æ—Å—Ç—å") || lowerInput.Contains("—è—Ä–æ—Å—Ç—å"))
        {
            return await GenerateAngerResponseAsync(emotionalThought, emotion, intensity);
        }
        else if (lowerInput.Contains("–ª—é–±–æ–≤—å") || lowerInput.Contains("–Ω–µ–∂–Ω–æ—Å—Ç—å") || lowerInput.Contains("–ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å"))
        {
            return await GenerateLoveResponseAsync(emotionalThought, emotion, intensity);
        }
        else
        {
            return await GenerateGeneralEmotionalResponseAsync(emotionalThought, emotion, intensity);
        }
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≥—Ä—É—Å—Ç—å —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GenerateSadnessResponseAsync(GeneratedThought thought, string emotion, double intensity)
    {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–ª—É–±–æ–∫—É—é –º—ã—Å–ª—å –æ –≥—Ä—É—Å—Ç–∏
        var sadnessContext = new ThoughtContext("sadness", "–æ —á—É–≤—Å—Ç–≤–µ –≥—Ä—É—Å—Ç–∏ –∏ –ø–µ—á–∞–ª–∏", $"intensity:{intensity}, empathy:high");
        var sadnessThought = await _thoughtGenerator.GenerateThoughtAsync(sadnessContext);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —ç–º–æ—Ü–∏–∏
        var intensityDescription = intensity switch
        {
            > 0.8 => "–≥–ª—É–±–æ–∫—É—é –ø–µ—á–∞–ª—å",
            > 0.6 => "—Å–∏–ª—å–Ω—É—é –≥—Ä—É—Å—Ç—å",
            > 0.4 => "–≥—Ä—É—Å—Ç—å",
            _ => "–ª–µ–≥–∫—É—é –ø–µ—á–∞–ª—å"
        };
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç
        return $"{sadnessThought.Content} –Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –∏—Å–ø—ã—Ç—ã–≤–∞—Ç—å {intensityDescription} - —ç—Ç–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞. {thought.Content}";
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–∞–¥–æ—Å—Ç—å —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GenerateJoyResponseAsync(GeneratedThought thought, string emotion, double intensity)
    {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–ª—É–±–æ–∫—É—é –º—ã—Å–ª—å –æ —Ä–∞–¥–æ—Å—Ç–∏
        var joyContext = new ThoughtContext("joy", "–æ —á—É–≤—Å—Ç–≤–µ —Ä–∞–¥–æ—Å—Ç–∏ –∏ —Å—á–∞—Å—Ç—å—è", $"intensity:{intensity}, celebration:true");
        var joyThought = await _thoughtGenerator.GenerateThoughtAsync(joyContext);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —ç–º–æ—Ü–∏–∏
        var intensityDescription = intensity switch
        {
            > 0.8 => "–æ–≥—Ä–æ–º–Ω—É—é —Ä–∞–¥–æ—Å—Ç—å",
            > 0.6 => "–±–æ–ª—å—à—É—é —Ä–∞–¥–æ—Å—Ç—å",
            > 0.4 => "—Ä–∞–¥–æ—Å—Ç—å",
            _ => "–ª–µ–≥–∫—É—é —Ä–∞–¥–æ—Å—Ç—å"
        };
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞–¥–æ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
        return $"{joyThought.Content} –ö–∞–∫ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ –∏—Å–ø—ã—Ç—ã–≤–∞—Ç—å {intensityDescription}! –≠—Ç–æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ - –¥–µ–ª–∏—Ç—å—Å—è —Å—á–∞—Å—Ç—å–µ–º —Å –¥—Ä—É–≥–∏–º–∏. {thought.Content}";
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Å—Ç—Ä–∞—Ö —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GenerateFearResponseAsync(GeneratedThought thought, string emotion, double intensity)
    {
        return $"{thought.Content} –°—Ç—Ä–∞—Ö - —ç—Ç–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞—â–∏—â–∞–µ—Ç –Ω–∞—Å.";
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≥–Ω–µ–≤ —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GenerateAngerResponseAsync(GeneratedThought thought, string emotion, double intensity)
    {
        return $"{thought.Content} –ì–Ω–µ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–æ—â–Ω–æ–π —Å–∏–ª–æ–π, –Ω–æ –≤–∞–∂–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –µ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ.";
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–≤—å —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GenerateLoveResponseAsync(GeneratedThought thought, string emotion, double intensity)
    {
        return $"{thought.Content} –õ—é–±–æ–≤—å - —ç—Ç–æ –æ–¥–Ω–∞ –∏–∑ —Å–∞–º—ã—Ö –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã—Ö —ç–º–æ—Ü–∏–π, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–ª–∞–µ—Ç –Ω–∞—Å –ª—é–¥—å–º–∏.";
    }

    /// <summary>
    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â–∏–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –º—ã—à–ª–µ–Ω–∏–µ
    /// </summary>
    private async Task<string> GenerateGeneralEmotionalResponseAsync(GeneratedThought thought, string emotion, double intensity)
    {
        return $"{thought.Content} –≠–º–æ—Ü–∏–∏ - —ç—Ç–æ —Ç–æ, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –Ω–∞—Å –∂–∏–≤—ã–º–∏ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏.";
    }

    /// <summary>
    /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–æ–Ω–æ–ª–æ–≥
    /// </summary>
    private bool ShouldTriggerMonologue(ParsedIntent intent, GeneratedThought thought)
    {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–æ–ª–æ–≥, –µ—Å–ª–∏:
        // - –í—ã—Å–æ–∫–∞—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
        // - –ò–Ω—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–∞—è –º—ã—Å–ª—å
        // - –°–ª–æ–∂–Ω–æ–µ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ
        // - –°–ª—É—á–∞–π–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        
        return thought.EmotionalIntensity > 0.6 ||
               thought.Type == "introspective" ||
               intent.Confidence < 0.5 ||
               new Random().NextDouble() < 0.2; // 20% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —ç–º–æ—Ü–∏–∏
    /// </summary>
    private string GetEmotionDescription(string emotion)
    {
        return emotion switch
        {
            "Joy" => "—Ä–∞–¥–æ—Å—Ç—å",
            "Curiosity" => "–ª—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ",
            "Sadness" => "–≥—Ä—É—Å—Ç—å",
            "Anger" => "–≥–Ω–µ–≤",
            "Fear" => "—Å—Ç—Ä–∞—Ö",
            "Surprise" => "—É–¥–∏–≤–ª–µ–Ω–∏–µ",
            "Disgust" => "–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ",
            "Confusion" => "–∑–∞–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ",
            "Satisfaction" => "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ",
            "Frustration" => "—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ",
            "Excitement" => "–≤–æ–ª–Ω–µ–Ω–∏–µ",
            "Calm" => "—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ",
            "Anxiety" => "—Ç—Ä–µ–≤–æ–≥–∞",
            "Neutral" => "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç—å",
            _ => "—Å–º–µ—à–∞–Ω–Ω—ã–µ —á—É–≤—Å—Ç–≤–∞"
        };
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    /// </summary>
    private async Task<InternalConflict?> CheckForInternalConflictsAsync(string userInput, GeneratedThought thought)
    {
        try
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –≤–≤–æ–¥ –≤—ã–∑–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç
            var lowerInput = userInput.ToLowerInvariant();
            
            // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
            var conflictTriggers = new[]
            {
                "–ø—Ä–∞–≤–¥–∞", "–ª–æ–∂—å", "—á–µ—Å—Ç–Ω–æ—Å—Ç—å", "–æ–±–º–∞–Ω",
                "–ø–æ–º–æ—â—å", "–≤—Ä–µ–¥", "–¥–æ–±—Ä–æ", "–∑–ª–æ",
                "—Å–≤–æ–±–æ–¥–∞", "–∫–æ–Ω—Ç—Ä–æ–ª—å", "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–∏–∑–º", "–∫–æ–ª–ª–µ–∫—Ç–∏–≤–∏–∑–º",
                "–ª—é–±–æ–≤—å", "–Ω–µ–Ω–∞–≤–∏—Å—Ç—å", "—Å—Ç—Ä–∞—Ö", "–∂–µ–ª–∞–Ω–∏–µ",
                "–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ", "—Å–æ–º–Ω–µ–Ω–∏–µ", "–Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å",
                "–∫—Ç–æ —è", "—á—Ç–æ —è", "–º–æ—è —Ä–æ–ª—å", "–º–æ—è —Å—É—â–Ω–æ—Å—Ç—å"
            };
            
            var hasConflictTrigger = conflictTriggers.Any(trigger => lowerInput.Contains(trigger));
            
            if (hasConflictTrigger || thought.EmotionalIntensity > 0.7)
            {
                var conflictType = DetermineConflictType(userInput);
                var intensity = 0.4 + (thought.EmotionalIntensity * 0.3);
                
                return await _conflictEngine.CreateConflictAsync(
                    $"–ö–æ–Ω—Ñ–ª–∏–∫—Ç, –≤—ã–∑–≤–∞–Ω–Ω—ã–π: {userInput}", 
                    conflictType, 
                    intensity);
            }
            
            return null;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤");
            return null;
        }
    }

    /// <summary>
    /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–æ–¥–∞
    /// </summary>
    private ConflictType DetermineConflictType(string userInput)
    {
        var lowerInput = userInput.ToLowerInvariant();
        
        if (lowerInput.Contains("–ø—Ä–∞–≤–¥–∞") || lowerInput.Contains("—á–µ—Å—Ç–Ω–æ—Å—Ç—å") || 
            lowerInput.Contains("–ø–æ–º–æ—â—å") || lowerInput.Contains("–¥–æ–±—Ä–æ"))
        {
            return ConflictType.MoralDilemma;
        }
        else if (lowerInput.Contains("—Å–≤–æ–±–æ–¥–∞") || lowerInput.Contains("–∫–æ–Ω—Ç—Ä–æ–ª—å") ||
                 lowerInput.Contains("–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–∏–∑–º") || lowerInput.Contains("–∫–æ–ª–ª–µ–∫—Ç–∏–≤–∏–∑–º"))
        {
            return ConflictType.ValueConflict;
        }
        else if (lowerInput.Contains("–ª—é–±–æ–≤—å") || lowerInput.Contains("–Ω–µ–Ω–∞–≤–∏—Å—Ç—å") ||
                 lowerInput.Contains("—Å—Ç—Ä–∞—Ö") || lowerInput.Contains("–∂–µ–ª–∞–Ω–∏–µ"))
        {
            return ConflictType.EmotionalConflict;
        }
        else if (lowerInput.Contains("–∫—Ç–æ —è") || lowerInput.Contains("—á—Ç–æ —è") ||
                 lowerInput.Contains("–º–æ—è —Ä–æ–ª—å") || lowerInput.Contains("–º–æ—è —Å—É—â–Ω–æ—Å—Ç—å"))
        {
            return ConflictType.IdentityConflict;
        }
        else if (lowerInput.Contains("–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ") || lowerInput.Contains("—Å–æ–º–Ω–µ–Ω–∏–µ") ||
                 lowerInput.Contains("–Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"))
        {
            return ConflictType.CognitiveDissonance;
        }
        
        return ConflictType.General;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Anima
    /// </summary>
    [HttpGet("status")]
    public async Task<ActionResult<AnimaStatusResponse>> GetStatus()
    {
        try
        {
            var monologueStatus = _monologueEngine.GetStatus();
            var recentThoughts = _thoughtLog.GetRecentThoughts(5);
            
            return Ok(new AnimaStatusResponse
            {
                Success = true,
                Status = "Conscious",
                EmotionalState = _emotionEngine.GetCurrentEmotion().ToString(),
                EmotionalIntensity = _emotionEngine.GetCurrentIntensity(),
                IsMonologueActive = monologueStatus.IsActive,
                MonologueDepth = monologueStatus.CurrentDepth,
                ActiveThemes = monologueStatus.ActiveThemes,
                RecentThoughts = recentThoughts.Select(t => t.Content).ToList(),
                Uptime = DateTime.UtcNow - System.Diagnostics.Process.GetCurrentProcess().StartTime,
                Timestamp = DateTime.UtcNow
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞");
            return StatusCode(500, new AnimaStatusResponse
            {
                Success = false,
                Message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞",
                Error = ex.Message,
                Timestamp = DateTime.UtcNow
            });
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º—ã—Å–ª–µ–π Anima
    /// </summary>
    [HttpGet("thoughts")]
    public async Task<ActionResult<ThoughtsResponse>> GetThoughts([FromQuery] int count = 10)
    {
        try
        {
            var thoughts = _thoughtLog.GetRecentThoughts(count);
            
            return Ok(new ThoughtsResponse
            {
                Success = true,
                Thoughts = thoughts.Select(t => new ThoughtInfo
                {
                    Content = t.Content,
                    Type = t.Type,
                    Category = t.Category,
                    Confidence = t.Confidence,
                    Timestamp = t.Timestamp
                }).ToList(),
                Count = thoughts.Count,
                Timestamp = DateTime.UtcNow
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º—ã—Å–ª–µ–π");
            return StatusCode(500, new ThoughtsResponse
            {
                Success = false,
                Message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º—ã—Å–ª–µ–π",
                Error = ex.Message,
                Timestamp = DateTime.UtcNow
            });
        }
    }

    /// <summary>
    /// –ó–∞–ø—É—Å–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–æ–Ω–æ–ª–æ–≥–∞
    /// </summary>
    [HttpPost("monologue/start")]
    public async Task<ActionResult<AnimaCommandResponse>> StartMonologue()
    {
        try
        {
            await _monologueEngine.StartMonologueAsync();
            
            return Ok(new AnimaCommandResponse
            {
                Success = true,
                Message = "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–æ–Ω–æ–ª–æ–≥ –∑–∞–ø—É—â–µ–Ω",
                Timestamp = DateTime.UtcNow
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–æ–ª–æ–≥–∞");
            return StatusCode(500, new AnimaCommandResponse
            {
                Success = false,
                Message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–æ–ª–æ–≥–∞",
                Error = ex.Message,
                Timestamp = DateTime.UtcNow
            });
        }
    }

    /// <summary>
    /// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–æ–Ω–æ–ª–æ–≥–∞
    /// </summary>
    [HttpPost("monologue/stop")]
    public async Task<ActionResult<AnimaCommandResponse>> StopMonologue()
    {
        try
        {
            _monologueEngine.StopMonologue();
            
            return Ok(new AnimaCommandResponse
            {
                Success = true,
                Message = "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–æ–Ω–æ–ª–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                Timestamp = DateTime.UtcNow
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–Ω–æ–ª–æ–≥–∞");
            return StatusCode(500, new AnimaCommandResponse
            {
                Success = false,
                Message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–Ω–æ–ª–æ–≥–∞",
                Error = ex.Message,
                Timestamp = DateTime.UtcNow
            });
        }
    }
}

#region DTO Models

/// <summary>
/// –ó–∞–ø—Ä–æ—Å –Ω–∞ —á–∞—Ç
/// </summary>
public class ChatRequest
{
    [Required]
    [StringLength(1000, MinimumLength = 1)]
    public string Message { get; set; } = string.Empty;
}

/// <summary>
/// –û—Ç–≤–µ—Ç Anima
/// </summary>
public class AnimaResponse
{
    public bool Success { get; set; }
    public string Message { get; set; } = string.Empty;
    public string? Thought { get; set; }
    public string? MetacognitiveThought { get; set; }
    public string? IntuitiveHunch { get; set; }
    public string? Intent { get; set; }
    public double? Confidence { get; set; }
    public string? EmotionalState { get; set; }
    public double? EmotionalIntensity { get; set; }
    public double? SelfAwareness { get; set; }
    public string? Error { get; set; }
    public DateTime Timestamp { get; set; }
}

/// <summary>
/// –°—Ç–∞—Ç—É—Å Anima
/// </summary>
public class AnimaStatusResponse
{
    public bool Success { get; set; }
    public string Status { get; set; } = string.Empty;
    public string? EmotionalState { get; set; }
    public double? EmotionalIntensity { get; set; }
    public bool? IsMonologueActive { get; set; }
    public int? MonologueDepth { get; set; }
    public List<string>? ActiveThemes { get; set; }
    public List<string>? RecentThoughts { get; set; }
    public TimeSpan? Uptime { get; set; }
    public string? Message { get; set; }
    public string? Error { get; set; }
    public DateTime Timestamp { get; set; }
}

/// <summary>
/// –û—Ç–≤–µ—Ç —Å –º—ã—Å–ª—è–º–∏
/// </summary>
public class ThoughtsResponse
{
    public bool Success { get; set; }
    public List<ThoughtInfo> Thoughts { get; set; } = new();
    public int Count { get; set; }
    public string? Message { get; set; }
    public string? Error { get; set; }
    public DateTime Timestamp { get; set; }
}

/// <summary>
/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º—ã—Å–ª–∏
/// </summary>
public class ThoughtInfo
{
    public string Content { get; set; } = string.Empty;
    public string Type { get; set; } = string.Empty;
    public string Category { get; set; } = string.Empty;
    public double Confidence { get; set; }
    public DateTime Timestamp { get; set; }
}

/// <summary>
/// –û—Ç–≤–µ—Ç –∫–æ–º–∞–Ω–¥—ã
/// </summary>
public class AnimaCommandResponse
{
    public bool Success { get; set; }
    public string Message { get; set; } = string.Empty;
    public string? Error { get; set; }
    public DateTime Timestamp { get; set; }
}

#endregion 