using Microsoft.AspNetCore.Mvc;
using Anima.Core.AGI;
using Anima.Core.SA;
using Anima.Core.Emotion;
using Microsoft.Extensions.Logging;

namespace Anima.API.Controllers;

/// <summary>
/// –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—ã—Å–ª–µ–π
/// </summary>
[ApiController]
[Route("api/test")]
public class TestController : ControllerBase
{
    private readonly AnimaInstance _animaInstance;
    private readonly ThoughtGenerator _thoughtGenerator;
    private readonly InternalMonologueEngine _internalMonologue;
    private readonly SelfReflectionEngine _selfReflection;
    private readonly EmotionDrivenGoalShift _emotionGoalShift;
    private readonly ILogger<TestController> _logger;

    public TestController(
        AnimaInstance animaInstance,
        ThoughtGenerator thoughtGenerator,
        InternalMonologueEngine internalMonologue,
        SelfReflectionEngine selfReflection,
        EmotionDrivenGoalShift emotionGoalShift,
        ILogger<TestController> logger)
    {
        _animaInstance = animaInstance;
        _thoughtGenerator = thoughtGenerator;
        _internalMonologue = internalMonologue;
        _selfReflection = selfReflection;
        _emotionGoalShift = emotionGoalShift;
        _logger = logger;
    }

    /// <summary>
    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º—ã—Å–ª–µ–π
    /// </summary>
    [HttpPost("thoughts")]
    public async Task<IActionResult> TestThoughtGeneration([FromBody] ThoughtTestRequest request)
    {
        try
        {
            _logger.LogInformation($"üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—ã—Å–ª–µ–π: {request.Description}");
            
            var context = new ThoughtContext(request.Type, request.Description, request.Details);
            var thought = await _thoughtGenerator.GenerateThoughtAsync(context);
            
            var response = new ThoughtTestResponse
            {
                OriginalRequest = request,
                GeneratedThought = thought,
                Timestamp = DateTime.UtcNow
            };
            
            return Ok(response);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—ã—Å–ª–µ–π");
            return StatusCode(500, new { error = "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—ã—Å–ª–µ–π", details = ex.Message });
        }
    }

    /// <summary>
    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–æ–Ω–æ–ª–æ–≥
    /// </summary>
    [HttpPost("monologue")]
    public async Task<IActionResult> TestInternalMonologue()
    {
        try
        {
            _logger.LogInformation("üí≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–æ–Ω–æ–ª–æ–≥–∞");
            
            await _internalMonologue.StartMonologueAsync();
            
            // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—ã—Å–ª–µ–π
            await Task.Delay(3000);
            
            var status = _internalMonologue.GetStatus();
            var recentThoughts = _internalMonologue.GetRecentThoughts(5);
            
            var response = new MonologueTestResponse
            {
                Status = status,
                RecentThoughts = recentThoughts,
                Timestamp = DateTime.UtcNow
            };
            
            return Ok(response);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–æ–Ω–æ–ª–æ–≥–∞");
            return StatusCode(500, new { error = "–û—à–∏–±–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–æ–Ω–æ–ª–æ–≥–∞", details = ex.Message });
        }
    }

    /// <summary>
    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—é
    /// </summary>
    [HttpPost("reflection")]
    public async Task<IActionResult> TestSelfReflection([FromBody] ReflectionTestRequest request)
    {
        try
        {
            _logger.LogInformation($"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏: {request.Trigger}");
            
            var session = await _selfReflection.StartReflectionSessionAsync(request.Trigger, request.Context);
            var status = _selfReflection.GetStatus();
            var recommendations = await _selfReflection.GetRecommendationsAsync();
            
            var response = new ReflectionTestResponse
            {
                Session = session,
                Status = status,
                Recommendations = recommendations,
                Timestamp = DateTime.UtcNow
            };
            
            return Ok(response);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏");
            return StatusCode(500, new { error = "–û—à–∏–±–∫–∞ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏", details = ex.Message });
        }
    }

    /// <summary>
    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
    /// </summary>
    [HttpPost("emotional-intelligence")]
    public async Task<IActionResult> TestEmotionalIntelligence()
    {
        try
        {
            _logger.LogInformation("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞");
            
            var goalShift = await _emotionGoalShift.AnalyzeAndShiftGoalsAsync();
            var status = _emotionGoalShift.GetStatus();
            var recommendations = await _emotionGoalShift.GetRecommendationsAsync();
            
            var response = new EmotionalIntelligenceTestResponse
            {
                GoalShift = goalShift,
                Status = status,
                Recommendations = recommendations,
                Timestamp = DateTime.UtcNow
            };
            
            return Ok(response);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞");
            return StatusCode(500, new { error = "–û—à–∏–±–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞", details = ex.Message });
        }
    }

    /// <summary>
    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    /// </summary>
    [HttpPost("process-input")]
    public async Task<IActionResult> TestProcessInput([FromBody] ProcessInputRequest request)
    {
        try
        {
            _logger.LogInformation($"üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞: {request.Input}");
            
            var response = await _animaInstance.ProcessInputAsync(request.Input, request.UserId);
            
            var testResponse = new ProcessInputResponse
            {
                OriginalInput = request.Input,
                GeneratedResponse = response,
                Timestamp = DateTime.UtcNow
            };
            
            return Ok(testResponse);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞");
            return StatusCode(500, new { error = "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞", details = ex.Message });
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –º—ã—Å–ª–µ–π
    /// </summary>
    [HttpGet("status")]
    public async Task<IActionResult> GetSystemStatus()
    {
        try
        {
            var monologueStatus = _internalMonologue.GetStatus();
            var reflectionStatus = _selfReflection.GetStatus();
            var emotionalStatus = _emotionGoalShift.GetStatus();
            
            var status = new SystemStatusResponse
            {
                MonologueStatus = monologueStatus,
                ReflectionStatus = reflectionStatus,
                EmotionalIntelligenceStatus = emotionalStatus,
                Timestamp = DateTime.UtcNow
            };
            
            return Ok(status);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã");
            return StatusCode(500, new { error = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", details = ex.Message });
        }
    }
}

// –ú–æ–¥–µ–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

public class ThoughtTestRequest
{
    public string Type { get; set; } = "general";
    public string Description { get; set; } = "—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏";
    public string Details { get; set; } = "–¢–µ—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º—ã—Å–ª–∏";
}

public class ThoughtTestResponse
{
    public ThoughtTestRequest OriginalRequest { get; set; } = new();
    public GeneratedThought GeneratedThought { get; set; } = new();
    public DateTime Timestamp { get; set; }
}

public class MonologueTestResponse
{
    public MonologueStatus Status { get; set; } = new();
    public List<MonologueEntry> RecentThoughts { get; set; } = new();
    public DateTime Timestamp { get; set; }
}

public class ReflectionTestRequest
{
    public string Trigger { get; set; } = "test_reflection";
    public string Context { get; set; } = "–¢–µ—Å—Ç–æ–≤–∞—è —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è";
}

public class ReflectionTestResponse
{
    public ReflectionSession Session { get; set; } = new();
    public SelfReflectionStatus Status { get; set; } = new();
    public List<SelfReflectionRecommendation> Recommendations { get; set; } = new();
    public DateTime Timestamp { get; set; }
}

public class EmotionalIntelligenceTestResponse
{
    public EmotionalGoalShift GoalShift { get; set; } = new();
    public EmotionalIntelligenceStatus Status { get; set; } = new();
    public List<EmotionalRecommendation> Recommendations { get; set; } = new();
    public DateTime Timestamp { get; set; }
}

public class ProcessInputRequest
{
    public string Input { get; set; } = "–ü—Ä–∏–≤–µ—Ç!";
    public string UserId { get; set; } = "test_user";
}

public class ProcessInputResponse
{
    public string OriginalInput { get; set; } = string.Empty;
    public string GeneratedResponse { get; set; } = string.Empty;
    public DateTime Timestamp { get; set; }
}

public class SystemStatusResponse
{
    public MonologueStatus MonologueStatus { get; set; } = new();
    public SelfReflectionStatus ReflectionStatus { get; set; } = new();
    public EmotionalIntelligenceStatus EmotionalIntelligenceStatus { get; set; } = new();
    public DateTime Timestamp { get; set; }
} 